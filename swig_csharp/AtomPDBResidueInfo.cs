//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class AtomPDBResidueInfo : AtomMonomerInfo {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AtomPDBResidueInfo(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.AtomPDBResidueInfo_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AtomPDBResidueInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AtomPDBResidueInfo() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_AtomPDBResidueInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public AtomPDBResidueInfo() : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(AtomPDBResidueInfo other) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_1(AtomPDBResidueInfo.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId, string insertionCode, double occupancy, double tempFactor, bool isHeteroAtom, uint secondaryStructure, uint segmentNumber) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_2(atomName, serialNumber, altLoc, residueName, residueNumber, chainId, insertionCode, occupancy, tempFactor, isHeteroAtom, secondaryStructure, segmentNumber), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId, string insertionCode, double occupancy, double tempFactor, bool isHeteroAtom, uint secondaryStructure) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_3(atomName, serialNumber, altLoc, residueName, residueNumber, chainId, insertionCode, occupancy, tempFactor, isHeteroAtom, secondaryStructure), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId, string insertionCode, double occupancy, double tempFactor, bool isHeteroAtom) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_4(atomName, serialNumber, altLoc, residueName, residueNumber, chainId, insertionCode, occupancy, tempFactor, isHeteroAtom), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId, string insertionCode, double occupancy, double tempFactor) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_5(atomName, serialNumber, altLoc, residueName, residueNumber, chainId, insertionCode, occupancy, tempFactor), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId, string insertionCode, double occupancy) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_6(atomName, serialNumber, altLoc, residueName, residueNumber, chainId, insertionCode, occupancy), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId, string insertionCode) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_7(atomName, serialNumber, altLoc, residueName, residueNumber, chainId, insertionCode), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber, string chainId) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_8(atomName, serialNumber, altLoc, residueName, residueNumber, chainId), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName, int residueNumber) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_9(atomName, serialNumber, altLoc, residueName, residueNumber), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc, string residueName) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_10(atomName, serialNumber, altLoc, residueName), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber, string altLoc) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_11(atomName, serialNumber, altLoc), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName, int serialNumber) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_12(atomName, serialNumber), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomPDBResidueInfo(string atomName) : this(RDKFuncsPINVOKE.new_AtomPDBResidueInfo__SWIG_13(atomName), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getSerialNumber() {
    int ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getSerialNumber(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSerialNumber(int val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setSerialNumber(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getAltLoc() {
    string ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getAltLoc(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAltLoc(string val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setAltLoc(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getResidueName() {
    string ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getResidueName(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setResidueName(string val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setResidueName(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getResidueNumber() {
    int ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getResidueNumber(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setResidueNumber(int val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setResidueNumber(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getChainId() {
    string ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getChainId(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setChainId(string val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setChainId(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getInsertionCode() {
    string ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getInsertionCode(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInsertionCode(string val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setInsertionCode(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getOccupancy() {
    double ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getOccupancy(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOccupancy(double val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setOccupancy(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getTempFactor() {
    double ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getTempFactor(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTempFactor(double val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setTempFactor(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getIsHeteroAtom() {
    bool ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getIsHeteroAtom(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIsHeteroAtom(bool val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setIsHeteroAtom(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSecondaryStructure() {
    uint ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getSecondaryStructure(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSecondaryStructure(uint val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setSecondaryStructure(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSegmentNumber() {
    uint ret = RDKFuncsPINVOKE.AtomPDBResidueInfo_getSegmentNumber(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSegmentNumber(uint val) {
    RDKFuncsPINVOKE.AtomPDBResidueInfo_setSegmentNumber(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override AtomMonomerInfo copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.AtomPDBResidueInfo_copy(swigCPtr);
    AtomMonomerInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new AtomMonomerInfo(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
