//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class PeriodicTable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal PeriodicTable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PeriodicTable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PeriodicTable() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RDKFuncsPINVOKE.delete_PeriodicTable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static PeriodicTable getTable() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PeriodicTable_getTable();
    PeriodicTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new PeriodicTable(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAtomicWeight(uint atomicNumber) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getAtomicWeight__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAtomicWeight(string elementSymbol) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getAtomicWeight__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getAtomicNumber(string elementSymbol) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getAtomicNumber__SWIG_0(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getElementSymbol(uint atomicNumber) {
    string ret = RDKFuncsPINVOKE.PeriodicTable_getElementSymbol(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRvdw(uint atomicNumber) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getRvdw__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRvdw(string elementSymbol) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getRvdw__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRcovalent(uint atomicNumber) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getRcovalent__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRcovalent(string elementSymbol) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getRcovalent__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRb0(uint atomicNumber) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getRb0__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getRb0(string elementSymbol) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getRb0__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getDefaultValence(uint atomicNumber) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getDefaultValence__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getDefaultValence(string elementSymbol) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getDefaultValence__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Vect getValenceList(uint atomicNumber) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.PeriodicTable_getValenceList__SWIG_0(swigCPtr, atomicNumber), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Vect getValenceList(string elementSymbol) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.PeriodicTable_getValenceList__SWIG_1(swigCPtr, elementSymbol), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNouterElecs(uint atomicNumber) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getNouterElecs__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNouterElecs(string elementSymbol) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getNouterElecs__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getMostCommonIsotope(uint atomicNumber) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getMostCommonIsotope__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getMostCommonIsotope(string elementSymbol) {
    int ret = RDKFuncsPINVOKE.PeriodicTable_getMostCommonIsotope__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getMostCommonIsotopeMass(uint atomicNumber) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getMostCommonIsotopeMass__SWIG_0(swigCPtr, atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getMostCommonIsotopeMass(string elementSymbol) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getMostCommonIsotopeMass__SWIG_1(swigCPtr, elementSymbol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getMassForIsotope(uint atomicNumber, uint isotope) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getMassForIsotope__SWIG_0(swigCPtr, atomicNumber, isotope);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getMassForIsotope(string elementSymbol, uint isotope) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getMassForIsotope__SWIG_1(swigCPtr, elementSymbol, isotope);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAbundanceForIsotope(uint atomicNumber, uint isotope) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getAbundanceForIsotope__SWIG_0(swigCPtr, atomicNumber, isotope);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAbundanceForIsotope(string elementSymbol, uint isotope) {
    double ret = RDKFuncsPINVOKE.PeriodicTable_getAbundanceForIsotope__SWIG_1(swigCPtr, elementSymbol, isotope);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool moreElectroNegative(uint anum1, uint anum2) {
    bool ret = RDKFuncsPINVOKE.PeriodicTable_moreElectroNegative(swigCPtr, anum1, anum2);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
