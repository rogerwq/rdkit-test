//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class BoundsMatrix : DoubleSquareMatrix {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BoundsMatrix(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.BoundsMatrix_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BoundsMatrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BoundsMatrix() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_BoundsMatrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BoundsMatrix(uint N) : this(RDKFuncsPINVOKE.new_BoundsMatrix__SWIG_0(N), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public BoundsMatrix(uint N, Shared_Double_Array data) : this(RDKFuncsPINVOKE.new_BoundsMatrix__SWIG_1(N, Shared_Double_Array.getCPtr(data)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getUpperBound(uint i, uint j) {
    double ret = RDKFuncsPINVOKE.BoundsMatrix_getUpperBound(swigCPtr, i, j);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setUpperBound(uint i, uint j, double val) {
    RDKFuncsPINVOKE.BoundsMatrix_setUpperBound(swigCPtr, i, j, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUpperBoundIfBetter(uint i, uint j, double val) {
    RDKFuncsPINVOKE.BoundsMatrix_setUpperBoundIfBetter(swigCPtr, i, j, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLowerBound(uint i, uint j, double val) {
    RDKFuncsPINVOKE.BoundsMatrix_setLowerBound(swigCPtr, i, j, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setLowerBoundIfBetter(uint i, uint j, double val) {
    RDKFuncsPINVOKE.BoundsMatrix_setLowerBoundIfBetter(swigCPtr, i, j, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getLowerBound(uint i, uint j) {
    double ret = RDKFuncsPINVOKE.BoundsMatrix_getLowerBound(swigCPtr, i, j);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkValid() {
    bool ret = RDKFuncsPINVOKE.BoundsMatrix_checkValid(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
