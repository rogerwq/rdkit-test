//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class MolDraw2D : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MolDraw2D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MolDraw2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MolDraw2D() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_MolDraw2D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map, Int_Double_Map highlight_radii, int confId) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_0(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map), Int_Double_Map.getCPtr(highlight_radii), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map, Int_Double_Map highlight_radii) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_1(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map), Int_Double_Map.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_2(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_3(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_4(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_map, Int_Double_Map highlight_radii, int confId) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_5(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_map), Int_Double_Map.getCPtr(highlight_radii), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_map, Int_Double_Map highlight_radii) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_6(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_map), Int_Double_Map.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_map) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_7(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_8(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_9(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_map, Int_Double_Map highlight_radii, int confId) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_10(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_map), Int_Double_Map.getCPtr(highlight_radii), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_map, Int_Double_Map highlight_radii) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_11(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_map), Int_Double_Map.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_map) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_12(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend, Int_Vect highlight_atoms) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_13(swigCPtr, ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, string legend) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_14(swigCPtr, ROMol.getCPtr(mol), legend);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map, Int_Double_Map highlight_radii, int confId) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_15(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map), Int_Double_Map.getCPtr(highlight_radii), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map, Int_Double_Map highlight_radii) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_16(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map), Int_Double_Map.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_17(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_18(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecule(ROMol mol, Int_Vect highlight_atoms, Int_Vect highlight_bonds) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecule__SWIG_19(swigCPtr, ROMol.getCPtr(mol), Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends, Int_Vect_Vect highlight_atoms, Int_Vect_Vect highlight_bonds, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_atom_maps, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_bond_maps, SWIGTYPE_p_std__vectorT_std__mapT_int_double_std__lessT_int_t_t_t highlight_radii, Int_Vect confIds) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends), Int_Vect_Vect.getCPtr(highlight_atoms), Int_Vect_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_atom_maps), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_bond_maps), SWIGTYPE_p_std__vectorT_std__mapT_int_double_std__lessT_int_t_t_t.getCPtr(highlight_radii), Int_Vect.getCPtr(confIds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends, Int_Vect_Vect highlight_atoms, Int_Vect_Vect highlight_bonds, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_atom_maps, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_bond_maps, SWIGTYPE_p_std__vectorT_std__mapT_int_double_std__lessT_int_t_t_t highlight_radii) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends), Int_Vect_Vect.getCPtr(highlight_atoms), Int_Vect_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_atom_maps), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_bond_maps), SWIGTYPE_p_std__vectorT_std__mapT_int_double_std__lessT_int_t_t_t.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends, Int_Vect_Vect highlight_atoms, Int_Vect_Vect highlight_bonds, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_atom_maps, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_bond_maps) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_2(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends), Int_Vect_Vect.getCPtr(highlight_atoms), Int_Vect_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_atom_maps), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_bond_maps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends, Int_Vect_Vect highlight_atoms, Int_Vect_Vect highlight_bonds, SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t highlight_atom_maps) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_3(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends), Int_Vect_Vect.getCPtr(highlight_atoms), Int_Vect_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__vectorT_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t_t.getCPtr(highlight_atom_maps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends, Int_Vect_Vect highlight_atoms, Int_Vect_Vect highlight_bonds) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_4(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends), Int_Vect_Vect.getCPtr(highlight_atoms), Int_Vect_Vect.getCPtr(highlight_bonds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends, Int_Vect_Vect highlight_atoms) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_5(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends), Int_Vect_Vect.getCPtr(highlight_atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols, Str_Vect legends) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_6(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols), Str_Vect.getCPtr(legends));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawMolecules(SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t mols) {
    RDKFuncsPINVOKE.MolDraw2D_drawMolecules__SWIG_7(swigCPtr, SWIGTYPE_p_std__vectorT_RDKit__ROMol_p_t.getCPtr(mols));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawReaction(ChemicalReaction rxn, bool highlightByReactant, SWIGTYPE_p_std__vectorT_RDKit__DrawColour_t highlightColorsReactants, Int_Vect confIds) {
    RDKFuncsPINVOKE.MolDraw2D_drawReaction__SWIG_0(swigCPtr, ChemicalReaction.getCPtr(rxn), highlightByReactant, SWIGTYPE_p_std__vectorT_RDKit__DrawColour_t.getCPtr(highlightColorsReactants), Int_Vect.getCPtr(confIds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawReaction(ChemicalReaction rxn, bool highlightByReactant, SWIGTYPE_p_std__vectorT_RDKit__DrawColour_t highlightColorsReactants) {
    RDKFuncsPINVOKE.MolDraw2D_drawReaction__SWIG_1(swigCPtr, ChemicalReaction.getCPtr(rxn), highlightByReactant, SWIGTYPE_p_std__vectorT_RDKit__DrawColour_t.getCPtr(highlightColorsReactants));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawReaction(ChemicalReaction rxn, bool highlightByReactant) {
    RDKFuncsPINVOKE.MolDraw2D_drawReaction__SWIG_2(swigCPtr, ChemicalReaction.getCPtr(rxn), highlightByReactant);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawReaction(ChemicalReaction rxn) {
    RDKFuncsPINVOKE.MolDraw2D_drawReaction__SWIG_3(swigCPtr, ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Point2D getDrawCoords(Point2D mol_cds) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_getDrawCoords__SWIG_0(swigCPtr, Point2D.getCPtr(mol_cds)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Point2D getDrawCoords(int at_num) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_getDrawCoords__SWIG_1(swigCPtr, at_num), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Point2D getAtomCoords(Int_Pair screen_cds) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_getAtomCoords__SWIG_0(swigCPtr, Int_Pair.getCPtr(screen_cds)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Point2D getAtomCoords(Double_Pair screen_cds) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_getAtomCoords__SWIG_1(swigCPtr, Double_Pair.getCPtr(screen_cds)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Point2D getAtomCoords(int at_num) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_getAtomCoords__SWIG_2(swigCPtr, at_num), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int width() {
    int ret = RDKFuncsPINVOKE.MolDraw2D_width(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int height() {
    int ret = RDKFuncsPINVOKE.MolDraw2D_height(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int panelWidth() {
    int ret = RDKFuncsPINVOKE.MolDraw2D_panelWidth(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int panelHeight() {
    int ret = RDKFuncsPINVOKE.MolDraw2D_panelHeight(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double scale() {
    double ret = RDKFuncsPINVOKE.MolDraw2D_scale(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void calculateScale(int width, int height, Int_Vect highlight_atoms, Int_Double_Map highlight_radii) {
    RDKFuncsPINVOKE.MolDraw2D_calculateScale__SWIG_0(swigCPtr, width, height, Int_Vect.getCPtr(highlight_atoms), Int_Double_Map.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void calculateScale(int width, int height, Int_Vect highlight_atoms) {
    RDKFuncsPINVOKE.MolDraw2D_calculateScale__SWIG_1(swigCPtr, width, height, Int_Vect.getCPtr(highlight_atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void calculateScale(int width, int height) {
    RDKFuncsPINVOKE.MolDraw2D_calculateScale__SWIG_2(swigCPtr, width, height);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void calculateScale() {
    RDKFuncsPINVOKE.MolDraw2D_calculateScale__SWIG_3(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setScale(int width, int height, Point2D minv, Point2D maxv) {
    RDKFuncsPINVOKE.MolDraw2D_setScale(swigCPtr, width, height, Point2D.getCPtr(minv), Point2D.getCPtr(maxv));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOffset(int x, int y) {
    RDKFuncsPINVOKE.MolDraw2D_setOffset(swigCPtr, x, y);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point2D offset() {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_offset(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point2D minPt() {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_minPt(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point2D range() {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.MolDraw2D_range(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double fontSize() {
    double ret = RDKFuncsPINVOKE.MolDraw2D_fontSize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setFontSize(double new_size) {
    RDKFuncsPINVOKE.MolDraw2D_setFontSize(swigCPtr, new_size);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setColour(DrawColour col) {
    RDKFuncsPINVOKE.MolDraw2D_setColour(swigCPtr, DrawColour.getCPtr(col));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DrawColour colour() {
    DrawColour ret = new DrawColour(RDKFuncsPINVOKE.MolDraw2D_colour(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setDash(SWIGTYPE_p_std__vectorT_unsigned_int_t patt) {
    RDKFuncsPINVOKE.MolDraw2D_setDash(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(patt));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_std__vectorT_unsigned_int_t dash() {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.MolDraw2D_dash(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setLineWidth(int width) {
    RDKFuncsPINVOKE.MolDraw2D_setLineWidth(swigCPtr, width);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int lineWidth() {
    int ret = RDKFuncsPINVOKE.MolDraw2D_lineWidth(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setStringDrawMode(string instring, SWIGTYPE_p_RDKit__MolDraw2D__TextDrawType draw_mode, SWIGTYPE_p_int i) {
    bool ret = RDKFuncsPINVOKE.MolDraw2D_setStringDrawMode(swigCPtr, instring, SWIGTYPE_p_RDKit__MolDraw2D__TextDrawType.getCPtr(draw_mode), SWIGTYPE_p_int.getCPtr(i));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void clearDrawing() {
    RDKFuncsPINVOKE.MolDraw2D_clearDrawing(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawLine(Point2D cds1, Point2D cds2) {
    RDKFuncsPINVOKE.MolDraw2D_drawLine(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getStringSize(string label, SWIGTYPE_p_double label_width, SWIGTYPE_p_double label_height) {
    RDKFuncsPINVOKE.MolDraw2D_getStringSize(swigCPtr, label, SWIGTYPE_p_double.getCPtr(label_width), SWIGTYPE_p_double.getCPtr(label_height));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawString(string str, Point2D cds) {
    RDKFuncsPINVOKE.MolDraw2D_drawString(swigCPtr, str, Point2D.getCPtr(cds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawPolygon(SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t cds) {
    RDKFuncsPINVOKE.MolDraw2D_drawPolygon(swigCPtr, SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t.getCPtr(cds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawTriangle(Point2D cds1, Point2D cds2, Point2D cds3) {
    RDKFuncsPINVOKE.MolDraw2D_drawTriangle(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), Point2D.getCPtr(cds3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawEllipse(Point2D cds1, Point2D cds2) {
    RDKFuncsPINVOKE.MolDraw2D_drawEllipse(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawRect(Point2D cds1, Point2D cds2) {
    RDKFuncsPINVOKE.MolDraw2D_drawRect(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawAttachmentLine(Point2D cds1, Point2D cds2, DrawColour col, double len, uint nSegments) {
    RDKFuncsPINVOKE.MolDraw2D_drawAttachmentLine__SWIG_0(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), DrawColour.getCPtr(col), len, nSegments);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawAttachmentLine(Point2D cds1, Point2D cds2, DrawColour col, double len) {
    RDKFuncsPINVOKE.MolDraw2D_drawAttachmentLine__SWIG_1(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), DrawColour.getCPtr(col), len);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawAttachmentLine(Point2D cds1, Point2D cds2, DrawColour col) {
    RDKFuncsPINVOKE.MolDraw2D_drawAttachmentLine__SWIG_2(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), DrawColour.getCPtr(col));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawWavyLine(Point2D cds1, Point2D cds2, DrawColour col1, DrawColour col2, uint nSegments, double vertOffset) {
    RDKFuncsPINVOKE.MolDraw2D_drawWavyLine__SWIG_0(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), DrawColour.getCPtr(col1), DrawColour.getCPtr(col2), nSegments, vertOffset);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawWavyLine(Point2D cds1, Point2D cds2, DrawColour col1, DrawColour col2, uint nSegments) {
    RDKFuncsPINVOKE.MolDraw2D_drawWavyLine__SWIG_1(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), DrawColour.getCPtr(col1), DrawColour.getCPtr(col2), nSegments);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawWavyLine(Point2D cds1, Point2D cds2, DrawColour col1, DrawColour col2) {
    RDKFuncsPINVOKE.MolDraw2D_drawWavyLine__SWIG_2(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), DrawColour.getCPtr(col1), DrawColour.getCPtr(col2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void tagAtoms(ROMol mol) {
    RDKFuncsPINVOKE.MolDraw2D_tagAtoms(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool fillPolys() {
    bool ret = RDKFuncsPINVOKE.MolDraw2D_fillPolys(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setFillPolys(bool val) {
    RDKFuncsPINVOKE.MolDraw2D_setFillPolys(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public MolDrawOptions drawOptions() {
    MolDrawOptions ret = new MolDrawOptions(RDKFuncsPINVOKE.MolDraw2D_drawOptions__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t atomCoords() {
    SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t ret = new SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t(RDKFuncsPINVOKE.MolDraw2D_atomCoords(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__pairT_std__string_RDKit__MolDraw2D__OrientType_t_t atomSyms() {
    SWIGTYPE_p_std__vectorT_std__pairT_std__string_RDKit__MolDraw2D__OrientType_t_t ret = new SWIGTYPE_p_std__vectorT_std__pairT_std__string_RDKit__MolDraw2D__OrientType_t_t(RDKFuncsPINVOKE.MolDraw2D_atomSyms(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void drawArrow(Point2D cds1, Point2D cds2, bool asPolygon, double frac, double angle) {
    RDKFuncsPINVOKE.MolDraw2D_drawArrow__SWIG_0(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), asPolygon, frac, angle);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawArrow(Point2D cds1, Point2D cds2, bool asPolygon, double frac) {
    RDKFuncsPINVOKE.MolDraw2D_drawArrow__SWIG_1(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), asPolygon, frac);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawArrow(Point2D cds1, Point2D cds2, bool asPolygon) {
    RDKFuncsPINVOKE.MolDraw2D_drawArrow__SWIG_2(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2), asPolygon);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawArrow(Point2D cds1, Point2D cds2) {
    RDKFuncsPINVOKE.MolDraw2D_drawArrow__SWIG_3(swigCPtr, Point2D.getCPtr(cds1), Point2D.getCPtr(cds2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum OrientType {
    C = 0,
    N,
    E,
    S,
    W
  }

  public enum TextDrawType {
    TextDrawNormal = 0,
    TextDrawSuperscript,
    TextDrawSubscript
  }

}

}
