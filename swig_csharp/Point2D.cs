//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Point2D : Point {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Point2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.Point2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Point2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Point2D() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_Point2D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public double x {
    set {
      RDKFuncsPINVOKE.Point2D_x_set(swigCPtr, value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = RDKFuncsPINVOKE.Point2D_x_get(swigCPtr);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double y {
    set {
      RDKFuncsPINVOKE.Point2D_y_set(swigCPtr, value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = RDKFuncsPINVOKE.Point2D_y_get(swigCPtr);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Point2D() : this(RDKFuncsPINVOKE.new_Point2D__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point2D(double xv, double yv) : this(RDKFuncsPINVOKE.new_Point2D__SWIG_1(xv, yv), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point2D(Point2D other) : this(RDKFuncsPINVOKE.new_Point2D__SWIG_2(Point2D.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point2D(Point3D p3d) : this(RDKFuncsPINVOKE.new_Point2D__SWIG_3(Point3D.getCPtr(p3d)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Point copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Point2D_copy(swigCPtr);
    Point ret = (cPtr == global::System.IntPtr.Zero) ? null : new Point(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint dimension() {
    uint ret = RDKFuncsPINVOKE.Point2D_dimension(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void normalize() {
    RDKFuncsPINVOKE.Point2D_normalize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void rotate90() {
    RDKFuncsPINVOKE.Point2D_rotate90(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override double length() {
    double ret = RDKFuncsPINVOKE.Point2D_length(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double lengthSq() {
    double ret = RDKFuncsPINVOKE.Point2D_lengthSq(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double dotProduct(Point2D other) {
    double ret = RDKFuncsPINVOKE.Point2D_dotProduct(swigCPtr, Point2D.getCPtr(other));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double angleTo(Point2D other) {
    double ret = RDKFuncsPINVOKE.Point2D_angleTo(swigCPtr, Point2D.getCPtr(other));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double signedAngleTo(Point2D other) {
    double ret = RDKFuncsPINVOKE.Point2D_signedAngleTo(swigCPtr, Point2D.getCPtr(other));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point2D directionVector(Point2D other) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.Point2D_directionVector(swigCPtr, Point2D.getCPtr(other)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point2D minus(Point2D other) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Point2D_minus(swigCPtr, Point2D.getCPtr(other));
    Point2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Point2D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
