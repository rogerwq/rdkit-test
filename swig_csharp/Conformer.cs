//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Conformer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Conformer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Conformer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Conformer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_Conformer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Conformer() : this(RDKFuncsPINVOKE.new_Conformer__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Conformer(uint numAtoms) : this(RDKFuncsPINVOKE.new_Conformer__SWIG_1(numAtoms), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Conformer(Conformer other) : this(RDKFuncsPINVOKE.new_Conformer__SWIG_2(Conformer.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize(uint size) {
    RDKFuncsPINVOKE.Conformer_resize(swigCPtr, size);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reserve(uint size) {
    RDKFuncsPINVOKE.Conformer_reserve(swigCPtr, size);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasOwningMol() {
    bool ret = RDKFuncsPINVOKE.Conformer_hasOwningMol(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol getOwningMol() {
    ROMol ret = new ROMol(RDKFuncsPINVOKE.Conformer_getOwningMol(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_RDGeom__Point3D_t getPositions() {
    SWIGTYPE_p_std__vectorT_RDGeom__Point3D_t ret = new SWIGTYPE_p_std__vectorT_RDGeom__Point3D_t(RDKFuncsPINVOKE.Conformer_getPositions__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point3D getAtomPos(uint atomId) {
    Point3D ret = new Point3D(RDKFuncsPINVOKE.Conformer_getAtomPos__SWIG_0(swigCPtr, atomId), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAtomPos(uint atomId, Point3D position) {
    RDKFuncsPINVOKE.Conformer_setAtomPos(swigCPtr, atomId, Point3D.getCPtr(position));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getId() {
    uint ret = RDKFuncsPINVOKE.Conformer_getId(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setId(uint id) {
    RDKFuncsPINVOKE.Conformer_setId(swigCPtr, id);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumAtoms() {
    uint ret = RDKFuncsPINVOKE.Conformer_getNumAtoms(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is3D() {
    bool ret = RDKFuncsPINVOKE.Conformer_is3D(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set3D(bool v) {
    RDKFuncsPINVOKE.Conformer_set3D(swigCPtr, v);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Point3D computeCentroid(bool ignoreHs) {
    Point3D ret = new Point3D(RDKFuncsPINVOKE.Conformer_computeCentroid__SWIG_0(swigCPtr, ignoreHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point3D computeCentroid() {
    Point3D ret = new Point3D(RDKFuncsPINVOKE.Conformer_computeCentroid__SWIG_1(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Transform3D computeCanonicalTransform(Point3D center, bool normalizeCovar, bool ignoreHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Conformer_computeCanonicalTransform__SWIG_0(swigCPtr, Point3D.getCPtr(center), normalizeCovar, ignoreHs);
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Transform3D computeCanonicalTransform(Point3D center, bool normalizeCovar) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Conformer_computeCanonicalTransform__SWIG_1(swigCPtr, Point3D.getCPtr(center), normalizeCovar);
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Transform3D computeCanonicalTransform(Point3D center) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Conformer_computeCanonicalTransform__SWIG_2(swigCPtr, Point3D.getCPtr(center));
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Transform3D computeCanonicalTransform() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Conformer_computeCanonicalTransform__SWIG_3(swigCPtr);
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void transformConformer(Transform3D trans) {
    RDKFuncsPINVOKE.Conformer_transformConformer(swigCPtr, Transform3D.getCPtr(trans));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeConformer(Point3D center, bool normalizeCovar, bool ignoreHs) {
    RDKFuncsPINVOKE.Conformer_canonicalizeConformer__SWIG_0(swigCPtr, Point3D.getCPtr(center), normalizeCovar, ignoreHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeConformer(Point3D center, bool normalizeCovar) {
    RDKFuncsPINVOKE.Conformer_canonicalizeConformer__SWIG_1(swigCPtr, Point3D.getCPtr(center), normalizeCovar);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeConformer(Point3D center) {
    RDKFuncsPINVOKE.Conformer_canonicalizeConformer__SWIG_2(swigCPtr, Point3D.getCPtr(center));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeConformer() {
    RDKFuncsPINVOKE.Conformer_canonicalizeConformer__SWIG_3(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
