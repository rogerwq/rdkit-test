//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Snapshot : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Snapshot(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Snapshot obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Snapshot() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_Snapshot(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Snapshot(Shared_Double_Array pos, double energy) : this(RDKFuncsPINVOKE.new_Snapshot__SWIG_0(Shared_Double_Array.getCPtr(pos), energy), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Snapshot(Shared_Double_Array pos) : this(RDKFuncsPINVOKE.new_Snapshot__SWIG_1(Shared_Double_Array.getCPtr(pos)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Trajectory trajectory() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Snapshot_trajectory(swigCPtr);
    Trajectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trajectory(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point2D getPoint2D(uint pointNum) {
    Point2D ret = new Point2D(RDKFuncsPINVOKE.Snapshot_getPoint2D(swigCPtr, pointNum), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Point3D getPoint3D(uint pointNum) {
    Point3D ret = new Point3D(RDKFuncsPINVOKE.Snapshot_getPoint3D(swigCPtr, pointNum), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getEnergy() {
    double ret = RDKFuncsPINVOKE.Snapshot_getEnergy(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEnergy(double energy) {
    RDKFuncsPINVOKE.Snapshot_setEnergy(swigCPtr, energy);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Snapshot(Double_Vect posVect, double energy) : this(RDKFuncsPINVOKE.new_Snapshot__SWIG_2(Double_Vect.getCPtr(posVect), energy), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Snapshot(Double_Vect posVect) : this(RDKFuncsPINVOKE.new_Snapshot__SWIG_3(Double_Vect.getCPtr(posVect)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Snapshot(Snapshot other) : this(RDKFuncsPINVOKE.new_Snapshot__SWIG_4(Snapshot.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__vectorT_RDKit__Snapshot_t SnapshotVect() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Snapshot_SnapshotVect();
    SWIGTYPE_p_std__vectorT_RDKit__Snapshot_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_RDKit__Snapshot_t(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
