//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class FPHolderBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal FPHolderBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FPHolderBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FPHolderBase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RDKFuncsPINVOKE.delete_FPHolderBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public uint addMol(ROMol m) {
    uint ret = RDKFuncsPINVOKE.FPHolderBase_addMol(swigCPtr, ROMol.getCPtr(m));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addFingerprint(ExplicitBitVect v) {
    uint ret = RDKFuncsPINVOKE.FPHolderBase_addFingerprint(swigCPtr, ExplicitBitVect.getCPtr(v));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool passesFilter(uint idx, ExplicitBitVect query) {
    bool ret = RDKFuncsPINVOKE.FPHolderBase_passesFilter(swigCPtr, idx, ExplicitBitVect.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExplicitBitVect getFingerprint(uint idx) {
    ExplicitBitVect ret = new ExplicitBitVect(RDKFuncsPINVOKE.FPHolderBase_getFingerprint(swigCPtr, idx), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ExplicitBitVect makeFingerprint(ROMol m) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.FPHolderBase_makeFingerprint(swigCPtr, ROMol.getCPtr(m));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ExplicitBitVect_p_t getFingerprints() {
    SWIGTYPE_p_std__vectorT_ExplicitBitVect_p_t ret = new SWIGTYPE_p_std__vectorT_ExplicitBitVect_p_t(RDKFuncsPINVOKE.FPHolderBase_getFingerprints__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
