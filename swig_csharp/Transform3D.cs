//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Transform3D : DoubleSquareMatrix {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Transform3D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.Transform3D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Transform3D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Transform3D() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_Transform3D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Transform3D() : this(RDKFuncsPINVOKE.new_Transform3D(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setToIdentity() {
    RDKFuncsPINVOKE.Transform3D_setToIdentity(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransformPoint(Point3D pt) {
    RDKFuncsPINVOKE.Transform3D_TransformPoint(swigCPtr, Point3D.getCPtr(pt));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTranslation(Point3D move) {
    RDKFuncsPINVOKE.Transform3D_SetTranslation(swigCPtr, Point3D.getCPtr(move));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotation(double angle, AxisType axis) {
    RDKFuncsPINVOKE.Transform3D_SetRotation__SWIG_0(swigCPtr, angle, (int)axis);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotation(double angle, Point3D axis) {
    RDKFuncsPINVOKE.Transform3D_SetRotation__SWIG_1(swigCPtr, angle, Point3D.getCPtr(axis));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotation(double cosT, double sinT, Point3D axis) {
    RDKFuncsPINVOKE.Transform3D_SetRotation__SWIG_2(swigCPtr, cosT, sinT, Point3D.getCPtr(axis));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotationFromQuaternion(SWIGTYPE_p_double quaternion) {
    RDKFuncsPINVOKE.Transform3D_SetRotationFromQuaternion(swigCPtr, SWIGTYPE_p_double.getCPtr(quaternion));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reflect() {
    RDKFuncsPINVOKE.Transform3D_Reflect(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
