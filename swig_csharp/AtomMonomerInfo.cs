//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class AtomMonomerInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AtomMonomerInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AtomMonomerInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AtomMonomerInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_AtomMonomerInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AtomMonomerInfo() : this(RDKFuncsPINVOKE.new_AtomMonomerInfo__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomMonomerInfo(AtomMonomerInfo.AtomMonomerType typ, string nm) : this(RDKFuncsPINVOKE.new_AtomMonomerInfo__SWIG_1((int)typ, nm), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomMonomerInfo(AtomMonomerInfo.AtomMonomerType typ) : this(RDKFuncsPINVOKE.new_AtomMonomerInfo__SWIG_2((int)typ), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomMonomerInfo(AtomMonomerInfo other) : this(RDKFuncsPINVOKE.new_AtomMonomerInfo__SWIG_3(AtomMonomerInfo.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = RDKFuncsPINVOKE.AtomMonomerInfo_getName(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setName(string nm) {
    RDKFuncsPINVOKE.AtomMonomerInfo_setName(swigCPtr, nm);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public AtomMonomerInfo.AtomMonomerType getMonomerType() {
    AtomMonomerInfo.AtomMonomerType ret = (AtomMonomerInfo.AtomMonomerType)RDKFuncsPINVOKE.AtomMonomerInfo_getMonomerType(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMonomerType(AtomMonomerInfo.AtomMonomerType typ) {
    RDKFuncsPINVOKE.AtomMonomerInfo_setMonomerType(swigCPtr, (int)typ);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual AtomMonomerInfo copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.AtomMonomerInfo_copy(swigCPtr);
    AtomMonomerInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new AtomMonomerInfo(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum AtomMonomerType {
    UNKNOWN = 0,
    PDBRESIDUE,
    OTHER
  }

}

}
