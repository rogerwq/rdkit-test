//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class FilterMatcherBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FilterMatcherBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FilterMatcherBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FilterMatcherBase() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_FilterMatcherBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool isValid() {
    bool ret = RDKFuncsPINVOKE.FilterMatcherBase_isValid(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getName() {
    string ret = RDKFuncsPINVOKE.FilterMatcherBase_getName(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getMatches(ROMol mol, FilterMatch_Vect matchVect) {
    bool ret = RDKFuncsPINVOKE.FilterMatcherBase_getMatches(swigCPtr, ROMol.getCPtr(mol), FilterMatch_Vect.getCPtr(matchVect));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasMatch(ROMol mol) {
    bool ret = RDKFuncsPINVOKE.FilterMatcherBase_hasMatch(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t Clone() {
    SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t ret = new SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t(RDKFuncsPINVOKE.FilterMatcherBase_Clone(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t copy() {
    SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t ret = new SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t(RDKFuncsPINVOKE.FilterMatcherBase_copy(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
