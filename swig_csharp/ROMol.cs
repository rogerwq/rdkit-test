//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class ROMol : RDProps {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ROMol(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.ROMol_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ROMol obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ROMol() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_ROMol(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SWIGTYPE_p_RDKit__CXXAtomIteratorT_boost__adjacency_listT_boost__vecS_boost__vecS_boost__undirectedS_RDKit__Atom_p_RDKit__Bond_p_t_RDKit__Atom_p_t atoms() {
    SWIGTYPE_p_RDKit__CXXAtomIteratorT_boost__adjacency_listT_boost__vecS_boost__vecS_boost__undirectedS_RDKit__Atom_p_RDKit__Bond_p_t_RDKit__Atom_p_t ret = new SWIGTYPE_p_RDKit__CXXAtomIteratorT_boost__adjacency_listT_boost__vecS_boost__vecS_boost__undirectedS_RDKit__Atom_p_RDKit__Bond_p_t_RDKit__Atom_p_t(RDKFuncsPINVOKE.ROMol_atoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RDKit__CXXBondIteratorT_boost__adjacency_listT_boost__vecS_boost__vecS_boost__undirectedS_RDKit__Atom_p_RDKit__Bond_p_t_RDKit__Bond_p_t bonds() {
    SWIGTYPE_p_RDKit__CXXBondIteratorT_boost__adjacency_listT_boost__vecS_boost__vecS_boost__undirectedS_RDKit__Atom_p_RDKit__Bond_p_t_RDKit__Bond_p_t ret = new SWIGTYPE_p_RDKit__CXXBondIteratorT_boost__adjacency_listT_boost__vecS_boost__vecS_boost__undirectedS_RDKit__Atom_p_RDKit__Bond_p_t_RDKit__Bond_p_t(RDKFuncsPINVOKE.ROMol_bonds__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol() : this(RDKFuncsPINVOKE.new_ROMol__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ROMol(ROMol other, bool quickCopy, int confId) : this(RDKFuncsPINVOKE.new_ROMol__SWIG_1(ROMol.getCPtr(other), quickCopy, confId), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ROMol(ROMol other, bool quickCopy) : this(RDKFuncsPINVOKE.new_ROMol__SWIG_2(ROMol.getCPtr(other), quickCopy), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ROMol(ROMol other) : this(RDKFuncsPINVOKE.new_ROMol__SWIG_3(ROMol.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ROMol(string binStr) : this(RDKFuncsPINVOKE.new_ROMol__SWIG_4(binStr), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumAtoms(bool onlyExplicit) {
    uint ret = RDKFuncsPINVOKE.ROMol_getNumAtoms__SWIG_0(swigCPtr, onlyExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumAtoms() {
    uint ret = RDKFuncsPINVOKE.ROMol_getNumAtoms__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumHeavyAtoms() {
    uint ret = RDKFuncsPINVOKE.ROMol_getNumHeavyAtoms(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Atom getAtomWithIdx(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAtomWithIdx(swigCPtr, idx);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getAtomDegree(Atom at) {
    uint ret = RDKFuncsPINVOKE.ROMol_getAtomDegree(swigCPtr, Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumBonds(bool onlyHeavy) {
    uint ret = RDKFuncsPINVOKE.ROMol_getNumBonds__SWIG_0(swigCPtr, onlyHeavy);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumBonds() {
    uint ret = RDKFuncsPINVOKE.ROMol_getNumBonds__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bond getBondWithIdx(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getBondWithIdx(swigCPtr, idx);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bond getBondBetweenAtoms(uint idx1, uint idx2) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getBondBetweenAtoms(swigCPtr, idx1, idx2);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAtomBookmark(Atom at, int mark) {
    RDKFuncsPINVOKE.ROMol_setAtomBookmark(swigCPtr, Atom.getCPtr(at), mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void replaceAtomBookmark(Atom at, int mark) {
    RDKFuncsPINVOKE.ROMol_replaceAtomBookmark(swigCPtr, Atom.getCPtr(at), mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom getAtomWithBookmark(int mark) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAtomWithBookmark(swigCPtr, mark);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Atom getUniqueAtomWithBookmark(int mark) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getUniqueAtomWithBookmark(swigCPtr, mark);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_RDKit__Atom_p_t getAllAtomsWithBookmark(int mark) {
    SWIGTYPE_p_std__listT_RDKit__Atom_p_t ret = new SWIGTYPE_p_std__listT_RDKit__Atom_p_t(RDKFuncsPINVOKE.ROMol_getAllAtomsWithBookmark(swigCPtr, mark), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearAtomBookmark(int mark) {
    RDKFuncsPINVOKE.ROMol_clearAtomBookmark__SWIG_0(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearAtomBookmark(int mark, Atom atom) {
    RDKFuncsPINVOKE.ROMol_clearAtomBookmark__SWIG_1(swigCPtr, mark, Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearAllAtomBookmarks() {
    RDKFuncsPINVOKE.ROMol_clearAllAtomBookmarks(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasAtomBookmark(int mark) {
    bool ret = RDKFuncsPINVOKE.ROMol_hasAtomBookmark(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_int_std__listT_RDKit__Atom_p_t_std__lessT_int_t_t getAtomBookmarks() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAtomBookmarks(swigCPtr);
    SWIGTYPE_p_std__mapT_int_std__listT_RDKit__Atom_p_t_std__lessT_int_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_std__listT_RDKit__Atom_p_t_std__lessT_int_t_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBondBookmark(Bond bond, int mark) {
    RDKFuncsPINVOKE.ROMol_setBondBookmark(swigCPtr, Bond.getCPtr(bond), mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bond getBondWithBookmark(int mark) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getBondWithBookmark(swigCPtr, mark);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bond getUniqueBondWithBookmark(int mark) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getUniqueBondWithBookmark(swigCPtr, mark);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_RDKit__Bond_p_t getAllBondsWithBookmark(int mark) {
    SWIGTYPE_p_std__listT_RDKit__Bond_p_t ret = new SWIGTYPE_p_std__listT_RDKit__Bond_p_t(RDKFuncsPINVOKE.ROMol_getAllBondsWithBookmark(swigCPtr, mark), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearBondBookmark(int mark) {
    RDKFuncsPINVOKE.ROMol_clearBondBookmark__SWIG_0(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearBondBookmark(int mark, Bond bond) {
    RDKFuncsPINVOKE.ROMol_clearBondBookmark__SWIG_1(swigCPtr, mark, Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearAllBondBookmarks() {
    RDKFuncsPINVOKE.ROMol_clearAllBondBookmarks(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasBondBookmark(int mark) {
    bool ret = RDKFuncsPINVOKE.ROMol_hasBondBookmark(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_int_std__listT_RDKit__Bond_p_t_std__lessT_int_t_t getBondBookmarks() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getBondBookmarks(swigCPtr);
    SWIGTYPE_p_std__mapT_int_std__listT_RDKit__Bond_p_t_std__lessT_int_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_std__listT_RDKit__Bond_p_t_std__lessT_int_t_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Conformer getConformer(int id) {
    Conformer ret = new Conformer(RDKFuncsPINVOKE.ROMol_getConformer__SWIG_0(swigCPtr, id), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Conformer getConformer() {
    Conformer ret = new Conformer(RDKFuncsPINVOKE.ROMol_getConformer__SWIG_1(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeConformer(uint id) {
    RDKFuncsPINVOKE.ROMol_removeConformer(swigCPtr, id);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearConformers() {
    RDKFuncsPINVOKE.ROMol_clearConformers(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumConformers() {
    uint ret = RDKFuncsPINVOKE.ROMol_getNumConformers(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RingInfo getRingInfo() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getRingInfo(swigCPtr);
    RingInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new RingInfo(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AtomIterator beginAtoms() {
    AtomIterator ret = new AtomIterator(RDKFuncsPINVOKE.ROMol_beginAtoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AtomIterator endAtoms() {
    AtomIterator ret = new AtomIterator(RDKFuncsPINVOKE.ROMol_endAtoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BondIterator beginBonds() {
    BondIterator ret = new BondIterator(RDKFuncsPINVOKE.ROMol_beginBonds__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BondIterator endBonds() {
    BondIterator ret = new BondIterator(RDKFuncsPINVOKE.ROMol_endBonds__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AromaticAtomIterator beginAromaticAtoms() {
    AromaticAtomIterator ret = new AromaticAtomIterator(RDKFuncsPINVOKE.ROMol_beginAromaticAtoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AromaticAtomIterator endAromaticAtoms() {
    AromaticAtomIterator ret = new AromaticAtomIterator(RDKFuncsPINVOKE.ROMol_endAromaticAtoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HeteroatomIterator beginHeteros() {
    HeteroatomIterator ret = new HeteroatomIterator(RDKFuncsPINVOKE.ROMol_beginHeteros__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HeteroatomIterator endHeteros() {
    HeteroatomIterator ret = new HeteroatomIterator(RDKFuncsPINVOKE.ROMol_endHeteros__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public QueryAtomIterator beginQueryAtoms(QueryAtom query) {
    QueryAtomIterator ret = new QueryAtomIterator(RDKFuncsPINVOKE.ROMol_beginQueryAtoms__SWIG_0(swigCPtr, QueryAtom.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public QueryAtomIterator endQueryAtoms() {
    QueryAtomIterator ret = new QueryAtomIterator(RDKFuncsPINVOKE.ROMol_endQueryAtoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_RDKit__ROMol_t beginMatchingAtoms(SWIGTYPE_p_f_p_RDKit__Atom__bool query) {
    SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_RDKit__ROMol_t ret = new SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_RDKit__ROMol_t(RDKFuncsPINVOKE.ROMol_beginMatchingAtoms__SWIG_0(swigCPtr, SWIGTYPE_p_f_p_RDKit__Atom__bool.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_const_RDKit__ROMol_const_t beginMatchingAtoms(SWIGTYPE_p_f_p_q_const__RDKit__Atom__bool query) {
    SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_const_RDKit__ROMol_const_t ret = new SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_const_RDKit__ROMol_const_t(RDKFuncsPINVOKE.ROMol_beginMatchingAtoms__SWIG_1(swigCPtr, SWIGTYPE_p_f_p_q_const__RDKit__Atom__bool.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_RDKit__ROMol_t endMatchingAtoms() {
    SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_RDKit__ROMol_t ret = new SWIGTYPE_p_RDKit__MatchingAtomIterator_T_RDKit__Atom_RDKit__ROMol_t(RDKFuncsPINVOKE.ROMol_endMatchingAtoms__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_boost__shared_ptrT_RDKit__Conformer_t_t__iterator beginConformers() {
    SWIGTYPE_p_std__listT_boost__shared_ptrT_RDKit__Conformer_t_t__iterator ret = new SWIGTYPE_p_std__listT_boost__shared_ptrT_RDKit__Conformer_t_t__iterator(RDKFuncsPINVOKE.ROMol_beginConformers__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_boost__shared_ptrT_RDKit__Conformer_t_t__iterator endConformers() {
    SWIGTYPE_p_std__listT_boost__shared_ptrT_RDKit__Conformer_t_t__iterator ret = new SWIGTYPE_p_std__listT_boost__shared_ptrT_RDKit__Conformer_t_t__iterator(RDKFuncsPINVOKE.ROMol_endConformers__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearComputedProps(bool includeRings) {
    RDKFuncsPINVOKE.ROMol_clearComputedProps__SWIG_0(swigCPtr, includeRings);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void clearComputedProps() {
    RDKFuncsPINVOKE.ROMol_clearComputedProps__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updatePropertyCache(bool strict) {
    RDKFuncsPINVOKE.ROMol_updatePropertyCache__SWIG_0(swigCPtr, strict);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updatePropertyCache() {
    RDKFuncsPINVOKE.ROMol_updatePropertyCache__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool needsUpdatePropertyCache() {
    bool ret = RDKFuncsPINVOKE.ROMol_needsUpdatePropertyCache(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void debugMol(SWIGTYPE_p_std__ostream str) {
    RDKFuncsPINVOKE.ROMol_debugMol(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(str));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public StereoGroup_Vect getStereoGroups() {
    StereoGroup_Vect ret = new StereoGroup_Vect(RDKFuncsPINVOKE.ROMol_getStereoGroups(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getProp(string key) {
    string ret = RDKFuncsPINVOKE.ROMol_getProp(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addConformer(Conformer ownedConf, bool assignId) {
    uint ret = RDKFuncsPINVOKE.ROMol_addConformer__SWIG_0(swigCPtr, Conformer.getCPtr(ownedConf), assignId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addConformer(Conformer ownedConf) {
    uint ret = RDKFuncsPINVOKE.ROMol_addConformer__SWIG_1(swigCPtr, Conformer.getCPtr(ownedConf));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToSmiles(bool doIsomericSmiles, bool doKekule, int rootedAtAtom) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToSmiles__SWIG_0(swigCPtr, doIsomericSmiles, doKekule, rootedAtAtom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToSmiles(bool doIsomericSmiles, bool doKekule) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToSmiles__SWIG_1(swigCPtr, doIsomericSmiles, doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToSmiles(bool doIsomericSmiles) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToSmiles__SWIG_2(swigCPtr, doIsomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToSmiles() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToSmiles__SWIG_3(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToMolBlock(bool includeStereo, int confId) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToMolBlock__SWIG_0(swigCPtr, includeStereo, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToMolBlock(bool includeStereo) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToMolBlock__SWIG_1(swigCPtr, includeStereo);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToMolBlock() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToMolBlock__SWIG_2(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MolToMolFile(string fName, bool includeStereo, int confId, bool kekulize) {
    RDKFuncsPINVOKE.ROMol_MolToMolFile__SWIG_0(swigCPtr, fName, includeStereo, confId, kekulize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToMolFile(string fName, bool includeStereo, int confId) {
    RDKFuncsPINVOKE.ROMol_MolToMolFile__SWIG_1(swigCPtr, fName, includeStereo, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToMolFile(string fName, bool includeStereo) {
    RDKFuncsPINVOKE.ROMol_MolToMolFile__SWIG_2(swigCPtr, fName, includeStereo);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToMolFile(string fName) {
    RDKFuncsPINVOKE.ROMol_MolToMolFile__SWIG_3(swigCPtr, fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string MolToTPLText(string partialChargeProp, bool writeFirstConfTwice) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToTPLText__SWIG_0(swigCPtr, partialChargeProp, writeFirstConfTwice);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToTPLText(string partialChargeProp) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToTPLText__SWIG_1(swigCPtr, partialChargeProp);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToTPLText() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToTPLText__SWIG_2(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MolToTPLFile(string fName, string partialChargeProp, bool writeFirstConfTwice) {
    RDKFuncsPINVOKE.ROMol_MolToTPLFile__SWIG_0(swigCPtr, fName, partialChargeProp, writeFirstConfTwice);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToTPLFile(string fName, string partialChargeProp) {
    RDKFuncsPINVOKE.ROMol_MolToTPLFile__SWIG_1(swigCPtr, fName, partialChargeProp);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToTPLFile(string fName) {
    RDKFuncsPINVOKE.ROMol_MolToTPLFile__SWIG_2(swigCPtr, fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string MolToPDBBlock(int confId, uint flavor) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToPDBBlock__SWIG_0(swigCPtr, confId, flavor);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToPDBBlock(int confId) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToPDBBlock__SWIG_1(swigCPtr, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToPDBBlock() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToPDBBlock__SWIG_2(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MolToPDBFile(string fName, int confId, uint flavor) {
    RDKFuncsPINVOKE.ROMol_MolToPDBFile__SWIG_0(swigCPtr, fName, confId, flavor);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToPDBFile(string fName, int confId) {
    RDKFuncsPINVOKE.ROMol_MolToPDBFile__SWIG_1(swigCPtr, fName, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToPDBFile(string fName) {
    RDKFuncsPINVOKE.ROMol_MolToPDBFile__SWIG_2(swigCPtr, fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string MolToSequence() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToSequence(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToFASTA() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToFASTA(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToHELM() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToHELM(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToXYZBlock(int confId) {
    string ret = RDKFuncsPINVOKE.ROMol_MolToXYZBlock__SWIG_0(swigCPtr, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string MolToXYZBlock() {
    string ret = RDKFuncsPINVOKE.ROMol_MolToXYZBlock__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MolToXYZFile(string fName, int confId) {
    RDKFuncsPINVOKE.ROMol_MolToXYZFile__SWIG_0(swigCPtr, fName, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MolToXYZFile(string fName) {
    RDKFuncsPINVOKE.ROMol_MolToXYZFile__SWIG_1(swigCPtr, fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasSubstructMatch(ROMol query, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.ROMol_hasSubstructMatch__SWIG_0(swigCPtr, ROMol.getCPtr(query), useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSubstructMatch(ROMol query) {
    bool ret = RDKFuncsPINVOKE.ROMol_hasSubstructMatch__SWIG_1(swigCPtr, ROMol.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSubstructMatch(ROMol query, SubstructMatchParameters ps) {
    bool ret = RDKFuncsPINVOKE.ROMol_hasSubstructMatch__SWIG_2(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(ps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect getSubstructMatch(ROMol query, SubstructMatchParameters ps) {
    Match_Vect ret = new Match_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatch__SWIG_0(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(ps)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query, SubstructMatchParameters ps) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatches__SWIG_0(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(ps)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect getSubstructMatch(ROMol query, bool useChirality) {
    Match_Vect ret = new Match_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatch__SWIG_1(swigCPtr, ROMol.getCPtr(query), useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect getSubstructMatch(ROMol query) {
    Match_Vect ret = new Match_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatch__SWIG_2(swigCPtr, ROMol.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query, bool uniquify, bool useChirality) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatches__SWIG_1(swigCPtr, ROMol.getCPtr(query), uniquify, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query, bool uniquify) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatches__SWIG_2(swigCPtr, ROMol.getCPtr(query), uniquify), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ROMol_getSubstructMatches__SWIG_3(swigCPtr, ROMol.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol deleteSubstructs(ROMol query, bool replaceAll) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_deleteSubstructs(swigCPtr, ROMol.getCPtr(query), replaceAll);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect replaceSubstructs(ROMol query, ROMol replacement, bool replaceAll) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.ROMol_replaceSubstructs__SWIG_0(swigCPtr, ROMol.getCPtr(query), ROMol.getCPtr(replacement), replaceAll), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect replaceSubstructs(ROMol query, ROMol replacement) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.ROMol_replaceSubstructs__SWIG_1(swigCPtr, ROMol.getCPtr(query), ROMol.getCPtr(replacement)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol replaceSidechains(ROMol coreQuery) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_replaceSidechains(swigCPtr, ROMol.getCPtr(coreQuery));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol replaceCore(ROMol coreQuery, bool replaceDummies, bool labelByIndex) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_replaceCore__SWIG_0(swigCPtr, ROMol.getCPtr(coreQuery), replaceDummies, labelByIndex);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol replaceCore(ROMol coreQuery, bool replaceDummies) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_replaceCore__SWIG_1(swigCPtr, ROMol.getCPtr(coreQuery), replaceDummies);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol replaceCore(ROMol coreQuery) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_replaceCore__SWIG_2(swigCPtr, ROMol.getCPtr(coreQuery));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DetectBondStereoChemistry(Conformer conf) {
    RDKFuncsPINVOKE.ROMol_DetectBondStereoChemistry(swigCPtr, Conformer.getCPtr(conf));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WedgeMolBonds(Conformer conf) {
    RDKFuncsPINVOKE.ROMol_WedgeMolBonds(swigCPtr, Conformer.getCPtr(conf));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pickBondsToWedge() {
    RDKFuncsPINVOKE.ROMol_pickBondsToWedge(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearSingleBondDirFlags() {
    RDKFuncsPINVOKE.ROMol_ClearSingleBondDirFlags(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConjugation() {
    RDKFuncsPINVOKE.ROMol_setConjugation(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHybridization() {
    RDKFuncsPINVOKE.ROMol_setHybridization(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient, bool clearConfs, uint nFlipsPerSample, uint nSamples, int sampleSeed, bool permuteDeg4Nodes, bool forceRDKit) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_0(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient, clearConfs, nFlipsPerSample, nSamples, sampleSeed, permuteDeg4Nodes, forceRDKit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient, bool clearConfs, uint nFlipsPerSample, uint nSamples, int sampleSeed, bool permuteDeg4Nodes) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_1(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient, clearConfs, nFlipsPerSample, nSamples, sampleSeed, permuteDeg4Nodes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient, bool clearConfs, uint nFlipsPerSample, uint nSamples, int sampleSeed) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_2(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient, clearConfs, nFlipsPerSample, nSamples, sampleSeed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient, bool clearConfs, uint nFlipsPerSample, uint nSamples) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_3(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient, clearConfs, nFlipsPerSample, nSamples);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient, bool clearConfs, uint nFlipsPerSample) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_4(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient, clearConfs, nFlipsPerSample);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient, bool clearConfs) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_5(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient, clearConfs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap, bool canonOrient) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_6(swigCPtr, Int_Point2D_Map.getCPtr(coordMap), canonOrient);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(Int_Point2D_Map coordMap) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_7(swigCPtr, Int_Point2D_Map.getCPtr(coordMap));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords() {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_8(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoords(ROMol templ) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoords__SWIG_9(swigCPtr, ROMol.getCPtr(templ));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs, double weightDistMat, uint nFlipsPerSample, uint nSamples, int sampleSeed, bool permuteDeg4Nodes, bool forceRDKit) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_0(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs, weightDistMat, nFlipsPerSample, nSamples, sampleSeed, permuteDeg4Nodes, forceRDKit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs, double weightDistMat, uint nFlipsPerSample, uint nSamples, int sampleSeed, bool permuteDeg4Nodes) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_1(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs, weightDistMat, nFlipsPerSample, nSamples, sampleSeed, permuteDeg4Nodes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs, double weightDistMat, uint nFlipsPerSample, uint nSamples, int sampleSeed) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_2(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs, weightDistMat, nFlipsPerSample, nSamples, sampleSeed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs, double weightDistMat, uint nFlipsPerSample, uint nSamples) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_3(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs, weightDistMat, nFlipsPerSample, nSamples);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs, double weightDistMat, uint nFlipsPerSample) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_4(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs, weightDistMat, nFlipsPerSample);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs, double weightDistMat) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_5(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs, weightDistMat);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient, bool clearConfs) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_6(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient, clearConfs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat, bool canonOrient) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_7(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat), canonOrient);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat(SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR dmat) {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_8(swigCPtr, SWIGTYPE_p_RDDepict__DOUBLE_SMART_PTR.getCPtr(dmat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint compute2DCoordsMimicDistMat() {
    uint ret = RDKFuncsPINVOKE.ROMol_compute2DCoordsMimicDistMat__SWIG_9(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void generateDepictionMatching2DStructure(ROMol reference, int confId, bool acceptFailure, bool forceRDKit) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_0(swigCPtr, ROMol.getCPtr(reference), confId, acceptFailure, forceRDKit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateDepictionMatching2DStructure(ROMol reference, int confId, bool acceptFailure) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_1(swigCPtr, ROMol.getCPtr(reference), confId, acceptFailure);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateDepictionMatching2DStructure(ROMol reference, int confId) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_2(swigCPtr, ROMol.getCPtr(reference), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateDepictionMatching2DStructure(ROMol reference) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_3(swigCPtr, ROMol.getCPtr(reference));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateDepictionMatching2DStructure(ROMol reference, int confId, ROMol referencePattern, bool acceptFailure, bool forceRDKit) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_4(swigCPtr, ROMol.getCPtr(reference), confId, ROMol.getCPtr(referencePattern), acceptFailure, forceRDKit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateDepictionMatching2DStructure(ROMol reference, int confId, ROMol referencePattern, bool acceptFailure) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_5(swigCPtr, ROMol.getCPtr(reference), confId, ROMol.getCPtr(referencePattern), acceptFailure);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateDepictionMatching2DStructure(ROMol reference, int confId, ROMol referencePattern) {
    RDKFuncsPINVOKE.ROMol_generateDepictionMatching2DStructure__SWIG_6(swigCPtr, ROMol.getCPtr(reference), confId, ROMol.getCPtr(referencePattern));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int findSSSR(Int_Vect_Vect res) {
    int ret = RDKFuncsPINVOKE.ROMol_findSSSR__SWIG_0(swigCPtr, Int_Vect_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int findSSSR() {
    int ret = RDKFuncsPINVOKE.ROMol_findSSSR__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int symmetrizeSSSR(Int_Vect_Vect res) {
    int ret = RDKFuncsPINVOKE.ROMol_symmetrizeSSSR__SWIG_0(swigCPtr, Int_Vect_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int symmetrizeSSSR() {
    int ret = RDKFuncsPINVOKE.ROMol_symmetrizeSSSR__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(bool useBO, bool useAtomWts, bool force, string propNamePrefix) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_0(swigCPtr, useBO, useAtomWts, force, propNamePrefix);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(bool useBO, bool useAtomWts, bool force) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_1(swigCPtr, useBO, useAtomWts, force);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(bool useBO, bool useAtomWts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_2(swigCPtr, useBO, useAtomWts);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(bool useBO) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_3(swigCPtr, useBO);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_4(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(Int_Vect activeAtoms, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bonds, bool useBO, bool useAtomWts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_5(swigCPtr, Int_Vect.getCPtr(activeAtoms), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bonds), useBO, useAtomWts);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(Int_Vect activeAtoms, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bonds, bool useBO) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_6(swigCPtr, Int_Vect.getCPtr(activeAtoms), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bonds), useBO);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getDistanceMat(Int_Vect activeAtoms, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bonds) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getDistanceMat__SWIG_7(swigCPtr, Int_Vect.getCPtr(activeAtoms), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bonds));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getAdjacencyMatrix(bool useBO, int emptyVal, bool force, string propNamePrefix) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAdjacencyMatrix__SWIG_0(swigCPtr, useBO, emptyVal, force, propNamePrefix);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getAdjacencyMatrix(bool useBO, int emptyVal, bool force) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAdjacencyMatrix__SWIG_1(swigCPtr, useBO, emptyVal, force);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getAdjacencyMatrix(bool useBO, int emptyVal) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAdjacencyMatrix__SWIG_2(swigCPtr, useBO, emptyVal);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getAdjacencyMatrix(bool useBO) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAdjacencyMatrix__SWIG_3(swigCPtr, useBO);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getAdjacencyMatrix() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAdjacencyMatrix__SWIG_4(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_List getShortestPath(int aid1, int aid2) {
    Int_List ret = new Int_List(RDKFuncsPINVOKE.ROMol_getShortestPath(swigCPtr, aid1, aid2), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void transformMolsAtoms(Transform3D tform) {
    RDKFuncsPINVOKE.ROMol_transformMolsAtoms(swigCPtr, Transform3D.getCPtr(tform));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeMol(bool normalizeCovar, bool ignoreHs) {
    RDKFuncsPINVOKE.ROMol_canonicalizeMol__SWIG_0(swigCPtr, normalizeCovar, ignoreHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeMol(bool normalizeCovar) {
    RDKFuncsPINVOKE.ROMol_canonicalizeMol__SWIG_1(swigCPtr, normalizeCovar);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void canonicalizeMol() {
    RDKFuncsPINVOKE.ROMol_canonicalizeMol__SWIG_2(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom_Vect getAtoms() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAtoms(swigCPtr);
    Atom_Vect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom_Vect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Atom_Vect getAtomNeighbors(Atom at) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAtomNeighbors(swigCPtr, Atom.getCPtr(at));
    Atom_Vect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom_Vect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bond_Vect getAtomBonds(Atom at) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_getAtomBonds(swigCPtr, Atom.getCPtr(at));
    Bond_Vect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond_Vect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Vect ToBinary() {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.ROMol_ToBinary(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol MolFromBinary(Int_Vect pkl) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_MolFromBinary(Int_Vect.getCPtr(pkl));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol addHs(bool explicitOnly, bool addCoords) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_addHs__SWIG_0(swigCPtr, explicitOnly, addCoords);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol addHs(bool explicitOnly) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_addHs__SWIG_1(swigCPtr, explicitOnly);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol removeHs(bool implicitOnly, bool updateExplicitCount, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_removeHs__SWIG_0(swigCPtr, implicitOnly, updateExplicitCount, sanitize);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol removeHs(bool implicitOnly, bool updateExplicitCount) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_removeHs__SWIG_1(swigCPtr, implicitOnly, updateExplicitCount);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol removeHs(bool implicitOnly) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_removeHs__SWIG_2(swigCPtr, implicitOnly);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol mergeQueryHs() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ROMol_mergeQueryHs(swigCPtr);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol, int prbCid, int refCid, Match_Vect atomMap, SWIGTYPE_p_RDNumeric__VectorT_double_t weights, bool reflect, uint maxIters) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_0(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, Match_Vect.getCPtr(atomMap), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights), reflect, maxIters);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol, int prbCid, int refCid, Match_Vect atomMap, SWIGTYPE_p_RDNumeric__VectorT_double_t weights, bool reflect) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_1(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, Match_Vect.getCPtr(atomMap), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights), reflect);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol, int prbCid, int refCid, Match_Vect atomMap, SWIGTYPE_p_RDNumeric__VectorT_double_t weights) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_2(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, Match_Vect.getCPtr(atomMap), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol, int prbCid, int refCid, Match_Vect atomMap) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_3(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, Match_Vect.getCPtr(atomMap));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol, int prbCid, int refCid) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_4(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol, int prbCid) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_5(swigCPtr, ROMol.getCPtr(refMol), prbCid);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double alignMol(ROMol refMol) {
    double ret = RDKFuncsPINVOKE.ROMol_alignMol__SWIG_6(swigCPtr, ROMol.getCPtr(refMol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void alignMolConformers(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atomIds, SWIGTYPE_p_std__vectorT_unsigned_int_t confIds, SWIGTYPE_p_RDNumeric__VectorT_double_t weights, bool reflect, uint maxIters) {
    RDKFuncsPINVOKE.ROMol_alignMolConformers__SWIG_0(swigCPtr, ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomIds), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(confIds), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights), reflect, maxIters);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void alignMolConformers(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atomIds, SWIGTYPE_p_std__vectorT_unsigned_int_t confIds, SWIGTYPE_p_RDNumeric__VectorT_double_t weights, bool reflect) {
    RDKFuncsPINVOKE.ROMol_alignMolConformers__SWIG_1(swigCPtr, ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomIds), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(confIds), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights), reflect);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void alignMolConformers(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atomIds, SWIGTYPE_p_std__vectorT_unsigned_int_t confIds, SWIGTYPE_p_RDNumeric__VectorT_double_t weights) {
    RDKFuncsPINVOKE.ROMol_alignMolConformers__SWIG_2(swigCPtr, ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomIds), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(confIds), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void alignMolConformers(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atomIds, SWIGTYPE_p_std__vectorT_unsigned_int_t confIds) {
    RDKFuncsPINVOKE.ROMol_alignMolConformers__SWIG_3(swigCPtr, ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomIds), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(confIds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void alignMolConformers(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atomIds) {
    RDKFuncsPINVOKE.ROMol_alignMolConformers__SWIG_4(swigCPtr, ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomIds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void alignMolConformers(ROMol mol) {
    RDKFuncsPINVOKE.ROMol_alignMolConformers__SWIG_5(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans, int prbCid, int refCid, Match_Vect atomMap, SWIGTYPE_p_RDNumeric__VectorT_double_t weights, bool reflect, uint maxIters) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_0(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans), prbCid, refCid, Match_Vect.getCPtr(atomMap), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights), reflect, maxIters);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans, int prbCid, int refCid, Match_Vect atomMap, SWIGTYPE_p_RDNumeric__VectorT_double_t weights, bool reflect) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_1(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans), prbCid, refCid, Match_Vect.getCPtr(atomMap), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights), reflect);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans, int prbCid, int refCid, Match_Vect atomMap, SWIGTYPE_p_RDNumeric__VectorT_double_t weights) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_2(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans), prbCid, refCid, Match_Vect.getCPtr(atomMap), SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(weights));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans, int prbCid, int refCid, Match_Vect atomMap) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_3(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans), prbCid, refCid, Match_Vect.getCPtr(atomMap));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans, int prbCid, int refCid) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_4(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans), prbCid, refCid);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans, int prbCid) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_5(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans), prbCid);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getAlignmentTransform(ROMol refMol, Transform3D trans) {
    double ret = RDKFuncsPINVOKE.ROMol_getAlignmentTransform__SWIG_6(swigCPtr, ROMol.getCPtr(refMol), Transform3D.getCPtr(trans));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Double_Pair O3AAlignMol(ROMol refMol, int prbCid, int refCid, bool reflect, uint maxIters, uint accuracy) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.ROMol_O3AAlignMol__SWIG_0(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, reflect, maxIters, accuracy), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Double_Pair O3AAlignMol(ROMol refMol, int prbCid, int refCid, bool reflect, uint maxIters) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.ROMol_O3AAlignMol__SWIG_1(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, reflect, maxIters), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Double_Pair O3AAlignMol(ROMol refMol, int prbCid, int refCid, bool reflect) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.ROMol_O3AAlignMol__SWIG_2(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid, reflect), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Double_Pair O3AAlignMol(ROMol refMol, int prbCid, int refCid) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.ROMol_O3AAlignMol__SWIG_3(swigCPtr, ROMol.getCPtr(refMol), prbCid, refCid), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Double_Pair O3AAlignMol(ROMol refMol, int prbCid) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.ROMol_O3AAlignMol__SWIG_4(swigCPtr, ROMol.getCPtr(refMol), prbCid), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Double_Pair O3AAlignMol(ROMol refMol) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.ROMol_O3AAlignMol__SWIG_5(swigCPtr, ROMol.getCPtr(refMol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void computeGasteigerCharges(ROMol mol, int nIter, bool throwOnParamFailure) {
    RDKFuncsPINVOKE.ROMol_computeGasteigerCharges__SWIG_0(swigCPtr, ROMol.getCPtr(mol), nIter, throwOnParamFailure);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGasteigerCharges(ROMol mol, int nIter) {
    RDKFuncsPINVOKE.ROMol_computeGasteigerCharges__SWIG_1(swigCPtr, ROMol.getCPtr(mol), nIter);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGasteigerCharges(ROMol mol) {
    RDKFuncsPINVOKE.ROMol_computeGasteigerCharges__SWIG_2(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGasteigerCharges(ROMol mol, Double_Vect charges, int nIter, bool throwOnParamFailure) {
    RDKFuncsPINVOKE.ROMol_computeGasteigerCharges__SWIG_3(swigCPtr, ROMol.getCPtr(mol), Double_Vect.getCPtr(charges), nIter, throwOnParamFailure);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGasteigerCharges(ROMol mol, Double_Vect charges, int nIter) {
    RDKFuncsPINVOKE.ROMol_computeGasteigerCharges__SWIG_4(swigCPtr, ROMol.getCPtr(mol), Double_Vect.getCPtr(charges), nIter);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void computeGasteigerCharges(ROMol mol, Double_Vect charges) {
    RDKFuncsPINVOKE.ROMol_computeGasteigerCharges__SWIG_5(swigCPtr, ROMol.getCPtr(mol), Double_Vect.getCPtr(charges));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void rankMolAtoms(SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, bool breakTies, bool includeChirality, bool includeIsotopes) {
    RDKFuncsPINVOKE.ROMol_rankMolAtoms__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), breakTies, includeChirality, includeIsotopes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void rankMolAtoms(SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, bool breakTies, bool includeChirality) {
    RDKFuncsPINVOKE.ROMol_rankMolAtoms__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), breakTies, includeChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void rankMolAtoms(SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, bool breakTies) {
    RDKFuncsPINVOKE.ROMol_rankMolAtoms__SWIG_2(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), breakTies);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void rankMolAtoms(SWIGTYPE_p_std__vectorT_unsigned_int_t ranks) {
    RDKFuncsPINVOKE.ROMol_rankMolAtoms__SWIG_3(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string ToSVG(Int_Vect highlightAtoms, int lineWidthMult, int fontSize) {
    string ret = RDKFuncsPINVOKE.ROMol_ToSVG__SWIG_0(swigCPtr, Int_Vect.getCPtr(highlightAtoms), lineWidthMult, fontSize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToSVG(Int_Vect highlightAtoms, int lineWidthMult) {
    string ret = RDKFuncsPINVOKE.ROMol_ToSVG__SWIG_1(swigCPtr, Int_Vect.getCPtr(highlightAtoms), lineWidthMult);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToSVG(Int_Vect highlightAtoms) {
    string ret = RDKFuncsPINVOKE.ROMol_ToSVG__SWIG_2(swigCPtr, Int_Vect.getCPtr(highlightAtoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToSVG(int lineWidthMult, int fontSize) {
    string ret = RDKFuncsPINVOKE.ROMol_ToSVG__SWIG_3(swigCPtr, lineWidthMult, fontSize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToSVG(int lineWidthMult) {
    string ret = RDKFuncsPINVOKE.ROMol_ToSVG__SWIG_4(swigCPtr, lineWidthMult);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToSVG() {
    string ret = RDKFuncsPINVOKE.ROMol_ToSVG__SWIG_5(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
