//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Atom : RDProps {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Atom(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.Atom_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Atom obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Atom() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_Atom(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Atom() : this(RDKFuncsPINVOKE.new_Atom__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom(uint num) : this(RDKFuncsPINVOKE.new_Atom__SWIG_1(num), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom(string what) : this(RDKFuncsPINVOKE.new_Atom__SWIG_2(what), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom(Atom other) : this(RDKFuncsPINVOKE.new_Atom__SWIG_3(Atom.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Atom copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Atom_copy(swigCPtr);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getAtomicNum() {
    int ret = RDKFuncsPINVOKE.Atom_getAtomicNum(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAtomicNum(int newNum) {
    RDKFuncsPINVOKE.Atom_setAtomicNum(swigCPtr, newNum);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getSymbol() {
    string ret = RDKFuncsPINVOKE.Atom_getSymbol(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasOwningMol() {
    bool ret = RDKFuncsPINVOKE.Atom_hasOwningMol(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol getOwningMol() {
    ROMol ret = new ROMol(RDKFuncsPINVOKE.Atom_getOwningMol(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getIdx() {
    uint ret = RDKFuncsPINVOKE.Atom_getIdx(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIdx(uint index) {
    RDKFuncsPINVOKE.Atom_setIdx(swigCPtr, index);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDegree() {
    uint ret = RDKFuncsPINVOKE.Atom_getDegree(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTotalDegree() {
    uint ret = RDKFuncsPINVOKE.Atom_getTotalDegree(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTotalNumHs(bool includeNeighbors) {
    uint ret = RDKFuncsPINVOKE.Atom_getTotalNumHs__SWIG_0(swigCPtr, includeNeighbors);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTotalNumHs() {
    uint ret = RDKFuncsPINVOKE.Atom_getTotalNumHs__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTotalValence() {
    uint ret = RDKFuncsPINVOKE.Atom_getTotalValence(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumImplicitHs() {
    uint ret = RDKFuncsPINVOKE.Atom_getNumImplicitHs(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getExplicitValence() {
    int ret = RDKFuncsPINVOKE.Atom_getExplicitValence(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getImplicitValence() {
    int ret = RDKFuncsPINVOKE.Atom_getImplicitValence(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumRadicalElectrons() {
    uint ret = RDKFuncsPINVOKE.Atom_getNumRadicalElectrons(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNumRadicalElectrons(uint num) {
    RDKFuncsPINVOKE.Atom_setNumRadicalElectrons(swigCPtr, num);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getFormalCharge() {
    int ret = RDKFuncsPINVOKE.Atom_getFormalCharge(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFormalCharge(int what) {
    RDKFuncsPINVOKE.Atom_setFormalCharge(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNoImplicit(bool what) {
    RDKFuncsPINVOKE.Atom_setNoImplicit(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getNoImplicit() {
    bool ret = RDKFuncsPINVOKE.Atom_getNoImplicit(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNumExplicitHs(uint what) {
    RDKFuncsPINVOKE.Atom_setNumExplicitHs(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumExplicitHs() {
    uint ret = RDKFuncsPINVOKE.Atom_getNumExplicitHs(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIsAromatic(bool what) {
    RDKFuncsPINVOKE.Atom_setIsAromatic(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getIsAromatic() {
    bool ret = RDKFuncsPINVOKE.Atom_getIsAromatic(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getMass() {
    double ret = RDKFuncsPINVOKE.Atom_getMass(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIsotope(uint what) {
    RDKFuncsPINVOKE.Atom_setIsotope(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getIsotope() {
    uint ret = RDKFuncsPINVOKE.Atom_getIsotope(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setChiralTag(Atom.ChiralType what) {
    RDKFuncsPINVOKE.Atom_setChiralTag(swigCPtr, (int)what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invertChirality() {
    RDKFuncsPINVOKE.Atom_invertChirality(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom.ChiralType getChiralTag() {
    Atom.ChiralType ret = (Atom.ChiralType)RDKFuncsPINVOKE.Atom_getChiralTag(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHybridization(Atom.HybridizationType what) {
    RDKFuncsPINVOKE.Atom_setHybridization(swigCPtr, (int)what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Atom.HybridizationType getHybridization() {
    Atom.HybridizationType ret = (Atom.HybridizationType)RDKFuncsPINVOKE.Atom_getHybridization(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasQuery() {
    bool ret = RDKFuncsPINVOKE.Atom_hasQuery(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what) {
    RDKFuncsPINVOKE.Atom_setQuery(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t getQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Atom_getQuery(swigCPtr);
    SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what, CompositeQueryType how, bool maintainOrder) {
    RDKFuncsPINVOKE.Atom_expandQuery__SWIG_0(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what), (int)how, maintainOrder);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what, CompositeQueryType how) {
    RDKFuncsPINVOKE.Atom_expandQuery__SWIG_1(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what), (int)how);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what) {
    RDKFuncsPINVOKE.Atom_expandQuery__SWIG_2(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getPerturbationOrder(Int_List probe) {
    int ret = RDKFuncsPINVOKE.Atom_getPerturbationOrder(swigCPtr, Int_List.getCPtr(probe));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updatePropertyCache(bool strict) {
    RDKFuncsPINVOKE.Atom_updatePropertyCache__SWIG_0(swigCPtr, strict);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updatePropertyCache() {
    RDKFuncsPINVOKE.Atom_updatePropertyCache__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool needsUpdatePropertyCache() {
    bool ret = RDKFuncsPINVOKE.Atom_needsUpdatePropertyCache(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int calcExplicitValence(bool strict) {
    int ret = RDKFuncsPINVOKE.Atom_calcExplicitValence__SWIG_0(swigCPtr, strict);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int calcExplicitValence() {
    int ret = RDKFuncsPINVOKE.Atom_calcExplicitValence__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int calcImplicitValence(bool strict) {
    int ret = RDKFuncsPINVOKE.Atom_calcImplicitValence__SWIG_0(swigCPtr, strict);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int calcImplicitValence() {
    int ret = RDKFuncsPINVOKE.Atom_calcImplicitValence__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AtomMonomerInfo getMonomerInfo() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Atom_getMonomerInfo__SWIG_0(swigCPtr);
    AtomMonomerInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new AtomMonomerInfo(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMonomerInfo(AtomMonomerInfo info) {
    RDKFuncsPINVOKE.Atom_setMonomerInfo(swigCPtr, AtomMonomerInfo.getCPtr(info));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAtomMapNum(int mapno, bool strict) {
    RDKFuncsPINVOKE.Atom_setAtomMapNum__SWIG_0(swigCPtr, mapno, strict);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAtomMapNum(int mapno) {
    RDKFuncsPINVOKE.Atom_setAtomMapNum__SWIG_1(swigCPtr, mapno);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getAtomMapNum() {
    int ret = RDKFuncsPINVOKE.Atom_getAtomMapNum(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getProp(string key) {
    string ret = RDKFuncsPINVOKE.Atom_getProp(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void markConjAtomBonds() {
    RDKFuncsPINVOKE.Atom_markConjAtomBonds(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public int numBondsPlusLonePairs() {
    int ret = RDKFuncsPINVOKE.Atom_numBondsPlusLonePairs(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool atomHasConjugatedBond() {
    bool ret = RDKFuncsPINVOKE.Atom_atomHasConjugatedBond(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void transformAtom(Transform3D tform) {
    RDKFuncsPINVOKE.Atom_transformAtom(swigCPtr, Transform3D.getCPtr(tform));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsInRing() {
    bool ret = RDKFuncsPINVOKE.Atom_IsInRing(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsInRingSize(int size) {
    bool ret = RDKFuncsPINVOKE.Atom_IsInRingSize(swigCPtr, size);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bond_Vect getBonds() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Atom_getBonds(swigCPtr);
    Bond_Vect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond_Vect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum HybridizationType {
    UNSPECIFIED = 0,
    S,
    SP,
    SP2,
    SP3,
    SP3D,
    SP3D2,
    OTHER
  }

  public enum ChiralType {
    CHI_UNSPECIFIED = 0,
    CHI_TETRAHEDRAL_CW,
    CHI_TETRAHEDRAL_CCW,
    CHI_OTHER
  }

}

}
