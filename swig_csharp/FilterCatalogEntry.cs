//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class FilterCatalogEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal FilterCatalogEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FilterCatalogEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FilterCatalogEntry() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RDKFuncsPINVOKE.delete_FilterCatalogEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FilterCatalogEntry() : this(RDKFuncsPINVOKE.new_FilterCatalogEntry__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalogEntry(string name, FilterMatcherBase matcher) : this(RDKFuncsPINVOKE.new_FilterCatalogEntry__SWIG_1(name, FilterMatcherBase.getCPtr(matcher)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalogEntry(string name, SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t matcher) : this(RDKFuncsPINVOKE.new_FilterCatalogEntry__SWIG_2(name, SWIGTYPE_p_boost__shared_ptrT_RDKit__FilterMatcherBase_t.getCPtr(matcher)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalogEntry(FilterCatalogEntry rhs) : this(RDKFuncsPINVOKE.new_FilterCatalogEntry__SWIG_3(FilterCatalogEntry.getCPtr(rhs)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid() {
    bool ret = RDKFuncsPINVOKE.FilterCatalogEntry_isValid(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getDescription() {
    string ret = RDKFuncsPINVOKE.FilterCatalogEntry_getDescription(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDescription(string description) {
    RDKFuncsPINVOKE.FilterCatalogEntry_setDescription(swigCPtr, description);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Str_Vect getPropList() {
    Str_Vect ret = new Str_Vect(RDKFuncsPINVOKE.FilterCatalogEntry_getPropList(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasProp(string key) {
    bool ret = RDKFuncsPINVOKE.FilterCatalogEntry_hasProp__SWIG_0(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearProp(string key) {
    RDKFuncsPINVOKE.FilterCatalogEntry_clearProp__SWIG_0(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Dict getProps() {
    Dict ret = new Dict(RDKFuncsPINVOKE.FilterCatalogEntry_getProps__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setProps(Dict props) {
    RDKFuncsPINVOKE.FilterCatalogEntry_setProps(swigCPtr, Dict.getCPtr(props));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getFilterMatches(ROMol mol, FilterMatch_Vect matchVect) {
    bool ret = RDKFuncsPINVOKE.FilterCatalogEntry_getFilterMatches__SWIG_0(swigCPtr, ROMol.getCPtr(mol), FilterMatch_Vect.getCPtr(matchVect));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasFilterMatch(ROMol mol) {
    bool ret = RDKFuncsPINVOKE.FilterCatalogEntry_hasFilterMatch(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void toStream(SWIGTYPE_p_std__ostream ss) {
    RDKFuncsPINVOKE.FilterCatalogEntry_toStream(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(ss));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string Serialize() {
    string ret = RDKFuncsPINVOKE.FilterCatalogEntry_Serialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void initFromStream(SWIGTYPE_p_std__istream ss) {
    RDKFuncsPINVOKE.FilterCatalogEntry_initFromStream(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(ss));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void initFromString(string text) {
    RDKFuncsPINVOKE.FilterCatalogEntry_initFromString(swigCPtr, text);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getProp(string key) {
    string ret = RDKFuncsPINVOKE.FilterCatalogEntry_getProp(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterMatch_Vect getFilterMatches(ROMol mol) {
    FilterMatch_Vect ret = new FilterMatch_Vect(RDKFuncsPINVOKE.FilterCatalogEntry_getFilterMatches__SWIG_1(swigCPtr, ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
