//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class SubstructLibrary : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SubstructLibrary(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubstructLibrary obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubstructLibrary() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_SubstructLibrary(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SubstructLibrary() : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(MolHolderBase molecules) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_1(MolHolderBase.getCPtr(molecules)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(MolHolderBase molecules, FPHolderBase fingerprints) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_2(MolHolderBase.getCPtr(molecules), FPHolderBase.getCPtr(fingerprints)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(string pickle) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_3(pickle), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public MolHolderBase getMolHolder() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getMolHolder__SWIG_0(swigCPtr);
    MolHolderBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new MolHolderBase(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FPHolderBase getFpHolder() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getFpHolder__SWIG_0(swigCPtr);
    FPHolderBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new FPHolderBase(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MolHolderBase getMolecules() {
    MolHolderBase ret = new MolHolderBase(RDKFuncsPINVOKE.SubstructLibrary_getMolecules(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FPHolderBase getFingerprints() {
    FPHolderBase ret = new FPHolderBase(RDKFuncsPINVOKE.SubstructLibrary_getFingerprints__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addMol(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_addMol(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads, int maxResults) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_0(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_1(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_2(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, bool recursionPossible, bool useChirality) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_3(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, bool recursionPossible) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_4(swigCPtr, ROMol.getCPtr(query), recursionPossible), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_5(swigCPtr, ROMol.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads, int maxResults) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_6(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_7(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_8(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_9(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_10(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t getMatches(ROMol query, uint startIdx, uint endIdx) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_11(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_0(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_1(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible, bool useChirality) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_2(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_3(swigCPtr, ROMol.getCPtr(query), recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_4(swigCPtr, ROMol.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_5(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_6(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_7(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_8(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_9(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_0(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_1(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_2(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_3(swigCPtr, ROMol.getCPtr(query), recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_4(swigCPtr, ROMol.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_5(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_6(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_7(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_8(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_9(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol getMol(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getMol(swigCPtr, idx);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint size() {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_size(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void resetHolders() {
    RDKFuncsPINVOKE.SubstructLibrary_resetHolders(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void toStream(SWIGTYPE_p_std__ostream ss) {
    RDKFuncsPINVOKE.SubstructLibrary_toStream(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(ss));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string Serialize() {
    string ret = RDKFuncsPINVOKE.SubstructLibrary_Serialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void initFromStream(SWIGTYPE_p_std__istream ss) {
    RDKFuncsPINVOKE.SubstructLibrary_initFromStream(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(ss));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initFromString(string text) {
    RDKFuncsPINVOKE.SubstructLibrary_initFromString(swigCPtr, text);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(UChar_Vect data) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_4(UChar_Vect.getCPtr(data)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool canSerialize() {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_canSerialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
