//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Dict : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dict(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dict obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dict() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_Dict(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Dict() : this(RDKFuncsPINVOKE.new_Dict__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Dict(Dict other) : this(RDKFuncsPINVOKE.new_Dict__SWIG_1(Dict.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update(Dict other, bool preserveExisting) {
    RDKFuncsPINVOKE.Dict_update__SWIG_0(swigCPtr, Dict.getCPtr(other), preserveExisting);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update(Dict other) {
    RDKFuncsPINVOKE.Dict_update__SWIG_1(swigCPtr, Dict.getCPtr(other));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_bool getNonPODStatus() {
    SWIGTYPE_p_bool ret = new SWIGTYPE_p_bool(RDKFuncsPINVOKE.Dict_getNonPODStatus(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_RDKit__Dict__Pair_t getData() {
    SWIGTYPE_p_std__vectorT_RDKit__Dict__Pair_t ret = new SWIGTYPE_p_std__vectorT_RDKit__Dict__Pair_t(RDKFuncsPINVOKE.Dict_getData__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasVal(string what) {
    bool ret = RDKFuncsPINVOKE.Dict_hasVal(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Str_Vect keys() {
    Str_Vect ret = new Str_Vect(RDKFuncsPINVOKE.Dict_keys(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getVal(string what, SWIGTYPE_p_std__string res) {
    RDKFuncsPINVOKE.Dict_getVal(swigCPtr, what, SWIGTYPE_p_std__string.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getValIfPresent(string what, SWIGTYPE_p_std__string res) {
    bool ret = RDKFuncsPINVOKE.Dict_getValIfPresent(swigCPtr, what, SWIGTYPE_p_std__string.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVal(string what, bool val) {
    RDKFuncsPINVOKE.Dict_setVal__SWIG_1(swigCPtr, what, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVal(string what, double val) {
    RDKFuncsPINVOKE.Dict_setVal__SWIG_2(swigCPtr, what, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVal(string what, float val) {
    RDKFuncsPINVOKE.Dict_setVal__SWIG_3(swigCPtr, what, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVal(string what, int val) {
    RDKFuncsPINVOKE.Dict_setVal__SWIG_4(swigCPtr, what, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVal(string what, uint val) {
    RDKFuncsPINVOKE.Dict_setVal__SWIG_5(swigCPtr, what, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVal(string what, string val) {
    RDKFuncsPINVOKE.Dict_setVal__SWIG_6(swigCPtr, what, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearVal(string what) {
    RDKFuncsPINVOKE.Dict_clearVal(swigCPtr, what);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reset() {
    RDKFuncsPINVOKE.Dict_reset(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
