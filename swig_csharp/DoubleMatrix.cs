//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class DoubleMatrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DoubleMatrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleMatrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DoubleMatrix() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_DoubleMatrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DoubleMatrix(uint nRows, uint nCols) : this(RDKFuncsPINVOKE.new_DoubleMatrix__SWIG_0(nRows, nCols), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleMatrix(uint nRows, uint nCols, double val) : this(RDKFuncsPINVOKE.new_DoubleMatrix__SWIG_1(nRows, nCols, val), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleMatrix(uint nRows, uint nCols, Shared_Double_Array data) : this(RDKFuncsPINVOKE.new_DoubleMatrix__SWIG_2(nRows, nCols, Shared_Double_Array.getCPtr(data)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleMatrix(DoubleMatrix other) : this(RDKFuncsPINVOKE.new_DoubleMatrix__SWIG_3(DoubleMatrix.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint numRows() {
    uint ret = RDKFuncsPINVOKE.DoubleMatrix_numRows(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numCols() {
    uint ret = RDKFuncsPINVOKE.DoubleMatrix_numCols(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDataSize() {
    uint ret = RDKFuncsPINVOKE.DoubleMatrix_getDataSize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getVal(uint i, uint j) {
    double ret = RDKFuncsPINVOKE.DoubleMatrix_getVal(swigCPtr, i, j);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setVal(uint i, uint j, double val) {
    RDKFuncsPINVOKE.DoubleMatrix_setVal(swigCPtr, i, j, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getRow(uint i, SWIGTYPE_p_RDNumeric__VectorT_double_t row) {
    RDKFuncsPINVOKE.DoubleMatrix_getRow(swigCPtr, i, SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(row));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getCol(uint i, SWIGTYPE_p_RDNumeric__VectorT_double_t col) {
    RDKFuncsPINVOKE.DoubleMatrix_getCol(swigCPtr, i, SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(col));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double getData() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DoubleMatrix_getData__SWIG_0(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleMatrix assign(DoubleMatrix other) {
    DoubleMatrix ret = new DoubleMatrix(RDKFuncsPINVOKE.DoubleMatrix_assign(swigCPtr, DoubleMatrix.getCPtr(other)), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DoubleMatrix transpose(DoubleMatrix transpose) {
    DoubleMatrix ret = new DoubleMatrix(RDKFuncsPINVOKE.DoubleMatrix_transpose(swigCPtr, DoubleMatrix.getCPtr(transpose)), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
