//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class QueryBond : Bond {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal QueryBond(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.QueryBond_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(QueryBond obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~QueryBond() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_QueryBond(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public QueryBond() : this(RDKFuncsPINVOKE.new_QueryBond__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public QueryBond(Bond.BondType bT) : this(RDKFuncsPINVOKE.new_QueryBond__SWIG_1((int)bT), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public QueryBond(Bond other) : this(RDKFuncsPINVOKE.new_QueryBond__SWIG_2(Bond.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public QueryBond(QueryBond other) : this(RDKFuncsPINVOKE.new_QueryBond__SWIG_3(QueryBond.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Bond copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.QueryBond_copy(swigCPtr);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new void setBondType(Bond.BondType bT) {
    RDKFuncsPINVOKE.QueryBond_setBondType(swigCPtr, (int)bT);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public new void setBondDir(Bond.BondDir bD) {
    RDKFuncsPINVOKE.QueryBond_setBondDir(swigCPtr, (int)bD);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool QueryMatch(QueryBond what) {
    bool ret = RDKFuncsPINVOKE.QueryBond_QueryMatch(swigCPtr, QueryBond.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool hasQuery() {
    bool ret = RDKFuncsPINVOKE.QueryBond_hasQuery(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t getQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.QueryBond_getQuery(swigCPtr);
    SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t what) {
    RDKFuncsPINVOKE.QueryBond_setQuery(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t what, CompositeQueryType how, bool maintainOrder) {
    RDKFuncsPINVOKE.QueryBond_expandQuery__SWIG_0(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t.getCPtr(what), (int)how, maintainOrder);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t what, CompositeQueryType how) {
    RDKFuncsPINVOKE.QueryBond_expandQuery__SWIG_1(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t.getCPtr(what), (int)how);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t what) {
    RDKFuncsPINVOKE.QueryBond_expandQuery__SWIG_2(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
