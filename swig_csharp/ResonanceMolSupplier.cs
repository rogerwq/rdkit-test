//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class ResonanceMolSupplier : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ResonanceMolSupplier(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ResonanceMolSupplier obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ResonanceMolSupplier() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_ResonanceMolSupplier(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ResonanceMolSupplier(ROMol mol, uint flags, uint maxStructs) : this(RDKFuncsPINVOKE.new_ResonanceMolSupplier__SWIG_0(ROMol.getCPtr(mol), flags, maxStructs), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ResonanceMolSupplier(ROMol mol, uint flags) : this(RDKFuncsPINVOKE.new_ResonanceMolSupplier__SWIG_1(ROMol.getCPtr(mol), flags), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ResonanceMolSupplier(ROMol mol) : this(RDKFuncsPINVOKE.new_ResonanceMolSupplier__SWIG_2(ROMol.getCPtr(mol)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ROMol mol() {
    ROMol ret = new ROMol(RDKFuncsPINVOKE.ResonanceMolSupplier_mol(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint flags() {
    uint ret = RDKFuncsPINVOKE.ResonanceMolSupplier_flags(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumConjGrps() {
    uint ret = RDKFuncsPINVOKE.ResonanceMolSupplier_getNumConjGrps(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getBondConjGrpIdx(uint bi) {
    int ret = RDKFuncsPINVOKE.ResonanceMolSupplier_getBondConjGrpIdx(swigCPtr, bi);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getAtomConjGrpIdx(uint ai) {
    int ret = RDKFuncsPINVOKE.ResonanceMolSupplier_getAtomConjGrpIdx(swigCPtr, ai);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNumThreads(int numThreads) {
    RDKFuncsPINVOKE.ResonanceMolSupplier_setNumThreads__SWIG_0(swigCPtr, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNumThreads() {
    RDKFuncsPINVOKE.ResonanceMolSupplier_setNumThreads__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enumerate() {
    RDKFuncsPINVOKE.ResonanceMolSupplier_enumerate(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getIsEnumerated() {
    bool ret = RDKFuncsPINVOKE.ResonanceMolSupplier_getIsEnumerated(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint length() {
    uint ret = RDKFuncsPINVOKE.ResonanceMolSupplier_length(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reset() {
    RDKFuncsPINVOKE.ResonanceMolSupplier_reset(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool atEnd() {
    bool ret = RDKFuncsPINVOKE.ResonanceMolSupplier_atEnd(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol next() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ResonanceMolSupplier_next(swigCPtr);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void moveTo(uint idx) {
    RDKFuncsPINVOKE.ResonanceMolSupplier_moveTo(swigCPtr, idx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query, bool uniquify, bool useChirality, int numThreads) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ResonanceMolSupplier_getSubstructMatches__SWIG_0(swigCPtr, ROMol.getCPtr(query), uniquify, useChirality, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query, bool uniquify, bool useChirality) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ResonanceMolSupplier_getSubstructMatches__SWIG_1(swigCPtr, ROMol.getCPtr(query), uniquify, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query, bool uniquify) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ResonanceMolSupplier_getSubstructMatches__SWIG_2(swigCPtr, ROMol.getCPtr(query), uniquify), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect getSubstructMatches(ROMol query) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.ResonanceMolSupplier_getSubstructMatches__SWIG_3(swigCPtr, ROMol.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ResonanceFlags {
    ALLOW_INCOMPLETE_OCTETS = (1 << 0),
    ALLOW_CHARGE_SEPARATION = (1 << 1),
    KEKULE_ALL = (1 << 2),
    UNCONSTRAINED_CATIONS = (1 << 3),
    UNCONSTRAINED_ANIONS = (1 << 4)
  }

}

}
