//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class RDKFuncs {
  public static double computeDihedralAngle(Point3D pt1, Point3D pt2, Point3D pt3, Point3D pt4) {
    double ret = RDKFuncsPINVOKE.computeDihedralAngle(Point3D.getCPtr(pt1), Point3D.getCPtr(pt2), Point3D.getCPtr(pt3), Point3D.getCPtr(pt4));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeSignedDihedralAngle(Point3D pt1, Point3D pt2, Point3D pt3, Point3D pt4) {
    double ret = RDKFuncsPINVOKE.computeSignedDihedralAngle(Point3D.getCPtr(pt1), Point3D.getCPtr(pt2), Point3D.getCPtr(pt3), Point3D.getCPtr(pt4));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string computedPropName {
    get {
      string ret = RDKFuncsPINVOKE.computedPropName_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _Name {
    get {
      string ret = RDKFuncsPINVOKE._Name_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MolFileInfo {
    get {
      string ret = RDKFuncsPINVOKE.MolFileInfo_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MolFileComments {
    get {
      string ret = RDKFuncsPINVOKE.MolFileComments_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _2DConf {
    get {
      string ret = RDKFuncsPINVOKE._2DConf_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _3DConf {
    get {
      string ret = RDKFuncsPINVOKE._3DConf_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _doIsoSmiles {
    get {
      string ret = RDKFuncsPINVOKE._doIsoSmiles_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string extraRings {
    get {
      string ret = RDKFuncsPINVOKE.extraRings_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _smilesAtomOutputOrder {
    get {
      string ret = RDKFuncsPINVOKE._smilesAtomOutputOrder_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _StereochemDone {
    get {
      string ret = RDKFuncsPINVOKE._StereochemDone_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _NeedsQueryScan {
    get {
      string ret = RDKFuncsPINVOKE._NeedsQueryScan_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _fragSMARTS {
    get {
      string ret = RDKFuncsPINVOKE._fragSMARTS_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string maxAttachIdx {
    get {
      string ret = RDKFuncsPINVOKE.maxAttachIdx_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string origNoImplicit {
    get {
      string ret = RDKFuncsPINVOKE.origNoImplicit_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string ringMembership {
    get {
      string ret = RDKFuncsPINVOKE.ringMembership_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _connectivityHKDeltas {
    get {
      string ret = RDKFuncsPINVOKE._connectivityHKDeltas_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _connectivityNVals {
    get {
      string ret = RDKFuncsPINVOKE._connectivityNVals_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _crippenLogP {
    get {
      string ret = RDKFuncsPINVOKE._crippenLogP_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _crippenLogPContribs {
    get {
      string ret = RDKFuncsPINVOKE._crippenLogPContribs_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _crippenMR {
    get {
      string ret = RDKFuncsPINVOKE._crippenMR_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _crippenMRContribs {
    get {
      string ret = RDKFuncsPINVOKE._crippenMRContribs_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _labuteASA {
    get {
      string ret = RDKFuncsPINVOKE._labuteASA_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _labuteAtomContribs {
    get {
      string ret = RDKFuncsPINVOKE._labuteAtomContribs_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _labuteAtomHContrib {
    get {
      string ret = RDKFuncsPINVOKE._labuteAtomHContrib_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _tpsa {
    get {
      string ret = RDKFuncsPINVOKE._tpsa_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _tpsaAtomContribs {
    get {
      string ret = RDKFuncsPINVOKE._tpsaAtomContribs_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string numArom {
    get {
      string ret = RDKFuncsPINVOKE.numArom_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MMFFSanitized {
    get {
      string ret = RDKFuncsPINVOKE._MMFFSanitized_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _CrippenLogP {
    get {
      string ret = RDKFuncsPINVOKE._CrippenLogP_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _CrippenMR {
    get {
      string ret = RDKFuncsPINVOKE._CrippenMR_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _GasteigerCharge {
    get {
      string ret = RDKFuncsPINVOKE._GasteigerCharge_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _GasteigerHCharge {
    get {
      string ret = RDKFuncsPINVOKE._GasteigerHCharge_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _BondsPotentialStereo {
    get {
      string ret = RDKFuncsPINVOKE._BondsPotentialStereo_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _CIPCode {
    get {
      string ret = RDKFuncsPINVOKE._CIPCode_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _CIPRank {
    get {
      string ret = RDKFuncsPINVOKE._CIPRank_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _ChiralityPossible {
    get {
      string ret = RDKFuncsPINVOKE._ChiralityPossible_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _UnknownStereo {
    get {
      string ret = RDKFuncsPINVOKE._UnknownStereo_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _ringStereoAtoms {
    get {
      string ret = RDKFuncsPINVOKE._ringStereoAtoms_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _ringStereochemCand {
    get {
      string ret = RDKFuncsPINVOKE._ringStereochemCand_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _ringStereoWarning {
    get {
      string ret = RDKFuncsPINVOKE._ringStereoWarning_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _SmilesStart {
    get {
      string ret = RDKFuncsPINVOKE._SmilesStart_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _TraversalBondIndexOrder {
    get {
      string ret = RDKFuncsPINVOKE._TraversalBondIndexOrder_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _TraversalRingClosureBond {
    get {
      string ret = RDKFuncsPINVOKE._TraversalRingClosureBond_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _TraversalStartPoint {
    get {
      string ret = RDKFuncsPINVOKE._TraversalStartPoint_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _queryRootAtom {
    get {
      string ret = RDKFuncsPINVOKE._queryRootAtom_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _hasMassQuery {
    get {
      string ret = RDKFuncsPINVOKE._hasMassQuery_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _protected {
    get {
      string ret = RDKFuncsPINVOKE._protected_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _supplementalSmilesLabel {
    get {
      string ret = RDKFuncsPINVOKE._supplementalSmilesLabel_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _unspecifiedOrder {
    get {
      string ret = RDKFuncsPINVOKE._unspecifiedOrder_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _RingClosures {
    get {
      string ret = RDKFuncsPINVOKE._RingClosures_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string atomLabel {
    get {
      string ret = RDKFuncsPINVOKE.atomLabel_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molAtomMapNumber {
    get {
      string ret = RDKFuncsPINVOKE.molAtomMapNumber_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molFileAlias {
    get {
      string ret = RDKFuncsPINVOKE.molFileAlias_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molFileValue {
    get {
      string ret = RDKFuncsPINVOKE.molFileValue_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molInversionFlag {
    get {
      string ret = RDKFuncsPINVOKE.molInversionFlag_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molParity {
    get {
      string ret = RDKFuncsPINVOKE.molParity_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molRxnComponent {
    get {
      string ret = RDKFuncsPINVOKE.molRxnComponent_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molRxnRole {
    get {
      string ret = RDKFuncsPINVOKE.molRxnRole_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string molTotValence {
    get {
      string ret = RDKFuncsPINVOKE.molTotValence_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileRLabel {
    get {
      string ret = RDKFuncsPINVOKE._MolFileRLabel_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileChiralFlag {
    get {
      string ret = RDKFuncsPINVOKE._MolFileChiralFlag_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileAtomQuery {
    get {
      string ret = RDKFuncsPINVOKE._MolFileAtomQuery_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileBondQuery {
    get {
      string ret = RDKFuncsPINVOKE._MolFileBondQuery_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileBondEndPts {
    get {
      string ret = RDKFuncsPINVOKE._MolFileBondEndPts_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileBondAttach {
    get {
      string ret = RDKFuncsPINVOKE._MolFileBondAttach_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileBondType {
    get {
      string ret = RDKFuncsPINVOKE._MolFileBondType_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileBondStereo {
    get {
      string ret = RDKFuncsPINVOKE._MolFileBondStereo_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _MolFileBondCfg {
    get {
      string ret = RDKFuncsPINVOKE._MolFileBondCfg_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string MRV_SMA {
    get {
      string ret = RDKFuncsPINVOKE.MRV_SMA_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string dummyLabel {
    get {
      string ret = RDKFuncsPINVOKE.dummyLabel_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _QueryFormalCharge {
    get {
      string ret = RDKFuncsPINVOKE._QueryFormalCharge_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _QueryHCount {
    get {
      string ret = RDKFuncsPINVOKE._QueryHCount_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _QueryIsotope {
    get {
      string ret = RDKFuncsPINVOKE._QueryIsotope_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _QueryMass {
    get {
      string ret = RDKFuncsPINVOKE._QueryMass_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _ReactionDegreeChanged {
    get {
      string ret = RDKFuncsPINVOKE._ReactionDegreeChanged_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string NullBond {
    get {
      string ret = RDKFuncsPINVOKE.NullBond_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _rgroupAtomMaps {
    get {
      string ret = RDKFuncsPINVOKE._rgroupAtomMaps_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _rgroupBonds {
    get {
      string ret = RDKFuncsPINVOKE._rgroupBonds_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string reactantAtomIdx {
    get {
      string ret = RDKFuncsPINVOKE.reactantAtomIdx_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string reactionMapNum {
    get {
      string ret = RDKFuncsPINVOKE.reactionMapNum_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _AtomID {
    get {
      string ret = RDKFuncsPINVOKE._AtomID_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _starred {
    get {
      string ret = RDKFuncsPINVOKE._starred_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _SLN_s {
    get {
      string ret = RDKFuncsPINVOKE._SLN_s_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _Unfinished_SLN_ {
    get {
      string ret = RDKFuncsPINVOKE._Unfinished_SLN__get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _brokenChirality {
    get {
      string ret = RDKFuncsPINVOKE._brokenChirality_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string isImplicit {
    get {
      string ret = RDKFuncsPINVOKE.isImplicit_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string smilesSymbol {
    get {
      string ret = RDKFuncsPINVOKE.smilesSymbol_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string _TriposAtomType {
    get {
      string ret = RDKFuncsPINVOKE._TriposAtomType_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string TWOD {
    get {
      string ret = RDKFuncsPINVOKE.TWOD_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string BalabanJ {
    get {
      string ret = RDKFuncsPINVOKE.BalabanJ_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string BalanbanJ {
    get {
      string ret = RDKFuncsPINVOKE.BalanbanJ_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string Discrims {
    get {
      string ret = RDKFuncsPINVOKE.Discrims_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string DistanceMatrix_Paths {
    get {
      string ret = RDKFuncsPINVOKE.DistanceMatrix_Paths_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string internalRgroupSmiles {
    get {
      string ret = RDKFuncsPINVOKE.internalRgroupSmiles_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double MAX_DOUBLE {
    get {
      double ret = RDKFuncsPINVOKE.MAX_DOUBLE_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double EPS_DOUBLE {
    get {
      double ret = RDKFuncsPINVOKE.EPS_DOUBLE_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double SMALL_DOUBLE {
    get {
      double ret = RDKFuncsPINVOKE.SMALL_DOUBLE_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double MAX_INT {
    get {
      double ret = RDKFuncsPINVOKE.MAX_INT_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double MAX_LONGINT {
    get {
      double ret = RDKFuncsPINVOKE.MAX_LONGINT_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void Union(Int_Vect r1, Int_Vect r2, Int_Vect res) {
    RDKFuncsPINVOKE.Union__SWIG_0(Int_Vect.getCPtr(r1), Int_Vect.getCPtr(r2), Int_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Intersect(Int_Vect r1, Int_Vect r2, Int_Vect res) {
    RDKFuncsPINVOKE.Intersect(Int_Vect.getCPtr(r1), Int_Vect.getCPtr(r2), Int_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Union(Int_Vect_Vect rings, Int_Vect res, Int_Vect exclude) {
    RDKFuncsPINVOKE.Union__SWIG_1(Int_Vect_Vect.getCPtr(rings), Int_Vect.getCPtr(res), Int_Vect.getCPtr(exclude));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Union(Int_Vect_Vect rings, Int_Vect res) {
    RDKFuncsPINVOKE.Union__SWIG_2(Int_Vect_Vect.getCPtr(rings), Int_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int nextCombination(Int_Vect comb, int tot) {
    int ret = RDKFuncsPINVOKE.nextCombination(Int_Vect.getCPtr(comb), tot);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double round(double v) {
    double ret = RDKFuncsPINVOKE.round(v);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool hasNonZeroZCoords(Conformer conf) {
    bool ret = RDKFuncsPINVOKE.hasNonZeroZCoords(Conformer.getCPtr(conf));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void removeGroupsWithAtom(Atom atom, StereoGroup_Vect groups) {
    RDKFuncsPINVOKE.removeGroupsWithAtom(Atom.getCPtr(atom), StereoGroup_Vect.getCPtr(groups));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeGroupsWithAtoms(Atom_Vect atoms, StereoGroup_Vect groups) {
    RDKFuncsPINVOKE.removeGroupsWithAtoms(Atom_Vect.getCPtr(atoms), StereoGroup_Vect.getCPtr(groups));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ci_RIGHTMOST_ATOM {
    get {
      int ret = RDKFuncsPINVOKE.ci_RIGHTMOST_ATOM_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ci_LEADING_BOND {
    get {
      int ret = RDKFuncsPINVOKE.ci_LEADING_BOND_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ci_ATOM_HOLDER {
    get {
      int ret = RDKFuncsPINVOKE.ci_ATOM_HOLDER_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool getPreferCoordGen() {
    bool ret = RDKFuncsPINVOKE.getPreferCoordGen();
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setPreferCoordGen(bool arg0) {
    RDKFuncsPINVOKE.setPreferCoordGen(arg0);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int MOLFILE_MAXLINE {
    get {
      int ret = RDKFuncsPINVOKE.MOLFILE_MAXLINE_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string strip(string orig) {
    string ret = RDKFuncsPINVOKE.strip(orig);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line, bool sanitize, bool removeHs, bool strictParsing) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolDataStreamToMol__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line), sanitize, removeHs, strictParsing);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolDataStreamToMol__SWIG_1(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line), sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolDataStreamToMol__SWIG_2(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line), sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolDataStreamToMol__SWIG_3(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line));
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolBlockToMol(string molBlock, bool sanitize, bool removeHs, bool strictParsing) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolBlockToMol__SWIG_0(molBlock, sanitize, removeHs, strictParsing);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolBlockToMol(string molBlock, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolBlockToMol__SWIG_1(molBlock, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolBlockToMol(string molBlock, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolBlockToMol__SWIG_2(molBlock, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolBlockToMol(string molBlock) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolBlockToMol__SWIG_3(molBlock);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolFileToMol(string fName, bool sanitize, bool removeHs, bool strictParsing) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolFileToMol__SWIG_0(fName, sanitize, removeHs, strictParsing);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolFileToMol(string fName, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolFileToMol__SWIG_1(fName, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolFileToMol(string fName, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolFileToMol__SWIG_2(fName, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol MolFileToMol(string fName) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MolFileToMol__SWIG_3(fName);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToMolBlock(ROMol mol, bool includeStereo, int confId, bool kekulize, bool forceV3000) {
    string ret = RDKFuncsPINVOKE.MolToMolBlock__SWIG_0(ROMol.getCPtr(mol), includeStereo, confId, kekulize, forceV3000);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToMolBlock(ROMol mol, bool includeStereo, int confId, bool kekulize) {
    string ret = RDKFuncsPINVOKE.MolToMolBlock__SWIG_1(ROMol.getCPtr(mol), includeStereo, confId, kekulize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToMolBlock(ROMol mol, bool includeStereo, int confId) {
    string ret = RDKFuncsPINVOKE.MolToMolBlock__SWIG_2(ROMol.getCPtr(mol), includeStereo, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToMolBlock(ROMol mol, bool includeStereo) {
    string ret = RDKFuncsPINVOKE.MolToMolBlock__SWIG_3(ROMol.getCPtr(mol), includeStereo);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToMolBlock(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToMolBlock__SWIG_4(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MolToMolFile(ROMol mol, string fName, bool includeStereo, int confId, bool kekulize, bool forceV3000) {
    RDKFuncsPINVOKE.MolToMolFile__SWIG_0(ROMol.getCPtr(mol), fName, includeStereo, confId, kekulize, forceV3000);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToMolFile(ROMol mol, string fName, bool includeStereo, int confId, bool kekulize) {
    RDKFuncsPINVOKE.MolToMolFile__SWIG_1(ROMol.getCPtr(mol), fName, includeStereo, confId, kekulize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToMolFile(ROMol mol, string fName, bool includeStereo, int confId) {
    RDKFuncsPINVOKE.MolToMolFile__SWIG_2(ROMol.getCPtr(mol), fName, includeStereo, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToMolFile(ROMol mol, string fName, bool includeStereo) {
    RDKFuncsPINVOKE.MolToMolFile__SWIG_3(ROMol.getCPtr(mol), fName, includeStereo);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToMolFile(ROMol mol, string fName) {
    RDKFuncsPINVOKE.MolToMolFile__SWIG_4(ROMol.getCPtr(mol), fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string MolToXYZBlock(ROMol mol, int confId) {
    string ret = RDKFuncsPINVOKE.MolToXYZBlock__SWIG_0(ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToXYZBlock(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToXYZBlock__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MolToXYZFile(ROMol mol, string fName, int confId) {
    RDKFuncsPINVOKE.MolToXYZFile__SWIG_0(ROMol.getCPtr(mol), fName, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToXYZFile(ROMol mol, string fName) {
    RDKFuncsPINVOKE.MolToXYZFile__SWIG_1(ROMol.getCPtr(mol), fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static RWMol TPLDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line, bool sanitize, bool skipFirstConf) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TPLDataStreamToMol__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line), sanitize, skipFirstConf);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol TPLDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TPLDataStreamToMol__SWIG_1(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line), sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol TPLDataStreamToMol(SWIGTYPE_p_std__istream inStream, SWIGTYPE_p_unsigned_int line) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TPLDataStreamToMol__SWIG_2(SWIGTYPE_p_std__istream.getCPtr(inStream), SWIGTYPE_p_unsigned_int.getCPtr(line));
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol TPLFileToMol(string fName, bool sanitize, bool skipFirstConf) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TPLFileToMol__SWIG_0(fName, sanitize, skipFirstConf);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol TPLFileToMol(string fName, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TPLFileToMol__SWIG_1(fName, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol TPLFileToMol(string fName) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TPLFileToMol__SWIG_2(fName);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToTPLText(ROMol mol, string partialChargeProp, bool writeFirstConfTwice) {
    string ret = RDKFuncsPINVOKE.MolToTPLText__SWIG_0(ROMol.getCPtr(mol), partialChargeProp, writeFirstConfTwice);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToTPLText(ROMol mol, string partialChargeProp) {
    string ret = RDKFuncsPINVOKE.MolToTPLText__SWIG_1(ROMol.getCPtr(mol), partialChargeProp);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToTPLText(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToTPLText__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MolToTPLFile(ROMol mol, string fName, string partialChargeProp, bool writeFirstConfTwice) {
    RDKFuncsPINVOKE.MolToTPLFile__SWIG_0(ROMol.getCPtr(mol), fName, partialChargeProp, writeFirstConfTwice);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToTPLFile(ROMol mol, string fName, string partialChargeProp) {
    RDKFuncsPINVOKE.MolToTPLFile__SWIG_1(ROMol.getCPtr(mol), fName, partialChargeProp);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToTPLFile(ROMol mol, string fName) {
    RDKFuncsPINVOKE.MolToTPLFile__SWIG_2(ROMol.getCPtr(mol), fName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static RWMol Mol2FileToMol(string fName, bool sanitize, bool removeHs, Mol2Type variant, bool cleanupSubstructures) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2FileToMol__SWIG_0(fName, sanitize, removeHs, (int)variant, cleanupSubstructures);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2FileToMol(string fName, bool sanitize, bool removeHs, Mol2Type variant) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2FileToMol__SWIG_1(fName, sanitize, removeHs, (int)variant);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2FileToMol(string fName, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2FileToMol__SWIG_2(fName, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2FileToMol(string fName, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2FileToMol__SWIG_3(fName, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2FileToMol(string fName) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2FileToMol__SWIG_4(fName);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2DataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize, bool removeHs, Mol2Type variant, bool cleanupSubstructures) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2DataStreamToMol__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize, removeHs, (int)variant, cleanupSubstructures);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2DataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize, bool removeHs, Mol2Type variant) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2DataStreamToMol__SWIG_1(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize, removeHs, (int)variant);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2DataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2DataStreamToMol__SWIG_2(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2DataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2DataStreamToMol__SWIG_3(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2DataStreamToMol(SWIGTYPE_p_std__istream inStream) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2DataStreamToMol__SWIG_4(SWIGTYPE_p_std__istream.getCPtr(inStream));
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2BlockToMol(string molBlock, bool sanitize, bool removeHs, Mol2Type variant, bool cleanupSubstructures) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2BlockToMol__SWIG_0(molBlock, sanitize, removeHs, (int)variant, cleanupSubstructures);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2BlockToMol(string molBlock, bool sanitize, bool removeHs, Mol2Type variant) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2BlockToMol__SWIG_1(molBlock, sanitize, removeHs, (int)variant);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2BlockToMol(string molBlock, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2BlockToMol__SWIG_2(molBlock, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2BlockToMol(string molBlock, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2BlockToMol__SWIG_3(molBlock, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol Mol2BlockToMol(string molBlock) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.Mol2BlockToMol__SWIG_4(molBlock);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBBlockToMol(string str, bool sanitize, bool removeHs, uint flavor, bool proximityBonding) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBBlockToMol__SWIG_0(str, sanitize, removeHs, flavor, proximityBonding);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBBlockToMol(string str, bool sanitize, bool removeHs, uint flavor) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBBlockToMol__SWIG_1(str, sanitize, removeHs, flavor);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBBlockToMol(string str, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBBlockToMol__SWIG_2(str, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBBlockToMol(string str, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBBlockToMol__SWIG_3(str, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBBlockToMol(string str) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBBlockToMol__SWIG_4(str);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBDataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize, bool removeHs, uint flavor, bool proximityBonding) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBDataStreamToMol__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize, removeHs, flavor, proximityBonding);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBDataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize, bool removeHs, uint flavor) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBDataStreamToMol__SWIG_1(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize, removeHs, flavor);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBDataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBDataStreamToMol__SWIG_2(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBDataStreamToMol(SWIGTYPE_p_std__istream inStream, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBDataStreamToMol__SWIG_3(SWIGTYPE_p_std__istream.getCPtr(inStream), sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBDataStreamToMol(SWIGTYPE_p_std__istream inStream) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBDataStreamToMol__SWIG_4(SWIGTYPE_p_std__istream.getCPtr(inStream));
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBFileToMol(string fname, bool sanitize, bool removeHs, uint flavor, bool proximityBonding) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBFileToMol__SWIG_0(fname, sanitize, removeHs, flavor, proximityBonding);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBFileToMol(string fname, bool sanitize, bool removeHs, uint flavor) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBFileToMol__SWIG_1(fname, sanitize, removeHs, flavor);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBFileToMol(string fname, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBFileToMol__SWIG_2(fname, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBFileToMol(string fname, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBFileToMol__SWIG_3(fname, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol PDBFileToMol(string fname) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PDBFileToMol__SWIG_4(fname);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToPDBBlock(ROMol mol, int confId, uint flavor) {
    string ret = RDKFuncsPINVOKE.MolToPDBBlock__SWIG_0(ROMol.getCPtr(mol), confId, flavor);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToPDBBlock(ROMol mol, int confId) {
    string ret = RDKFuncsPINVOKE.MolToPDBBlock__SWIG_1(ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToPDBBlock(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToPDBBlock__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MolToPDBFile(ROMol mol, string fname, int confId, uint flavor) {
    RDKFuncsPINVOKE.MolToPDBFile__SWIG_0(ROMol.getCPtr(mol), fname, confId, flavor);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToPDBFile(ROMol mol, string fname, int confId) {
    RDKFuncsPINVOKE.MolToPDBFile__SWIG_1(ROMol.getCPtr(mol), fname, confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MolToPDBFile(ROMol mol, string fname) {
    RDKFuncsPINVOKE.MolToPDBFile__SWIG_2(ROMol.getCPtr(mol), fname);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static RWMol RDKitSVGToMol(string svg, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKitSVGToMol__SWIG_0(svg, sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol RDKitSVGToMol(string svg, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKitSVGToMol__SWIG_1(svg, sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol RDKitSVGToMol(string svg) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKitSVGToMol__SWIG_2(svg);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol RDKitSVGToMol(SWIGTYPE_p_std__istream instream, bool sanitize, bool removeHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKitSVGToMol__SWIG_3(SWIGTYPE_p_std__istream.getCPtr(instream), sanitize, removeHs);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol RDKitSVGToMol(SWIGTYPE_p_std__istream instream, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKitSVGToMol__SWIG_4(SWIGTYPE_p_std__istream.getCPtr(instream), sanitize);
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RWMol RDKitSVGToMol(SWIGTYPE_p_std__istream instream) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKitSVGToMol__SWIG_5(SWIGTYPE_p_std__istream.getCPtr(instream));
    RWMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new RWMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setAtomRLabel(Atom atm, int rlabel) {
    RDKFuncsPINVOKE.setAtomRLabel(Atom.getCPtr(atm), rlabel);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int getAtomRLabel(Atom atm) {
    int ret = RDKFuncsPINVOKE.getAtomRLabel(Atom.getCPtr(atm));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setAtomAlias(Atom atom, string alias) {
    RDKFuncsPINVOKE.setAtomAlias(Atom.getCPtr(atom), alias);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string getAtomAlias(Atom atom) {
    string ret = RDKFuncsPINVOKE.getAtomAlias(Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setAtomValue(Atom atom, string value) {
    RDKFuncsPINVOKE.setAtomValue(Atom.getCPtr(atom), value);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string getAtomValue(Atom atom) {
    string ret = RDKFuncsPINVOKE.getAtomValue(Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setSupplementalSmilesLabel(Atom atom, string label) {
    RDKFuncsPINVOKE.setSupplementalSmilesLabel(Atom.getCPtr(atom), label);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string getSupplementalSmilesLabel(Atom atom) {
    string ret = RDKFuncsPINVOKE.getSupplementalSmilesLabel(Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isEarlyAtom(int atomicNum) {
    bool ret = RDKFuncsPINVOKE.isEarlyAtom(atomicNum);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ci_SPARSEINTVECT_VERSION {
    get {
      int ret = RDKFuncsPINVOKE.ci_SPARSEINTVECT_VERSION_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string atomPairsVersion {
    get {
      string ret = RDKFuncsPINVOKE.atomPairsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality, bool use2D, int confId) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_0(ROMol.getCPtr(mol), minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality, use2D, confId);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality, bool use2D) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_1(ROMol.getCPtr(mol), minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality, use2D);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_2(ROMol.getCPtr(mol), minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_3(ROMol.getCPtr(mol), minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_4(ROMol.getCPtr(mol), minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_5(ROMol.getCPtr(mol), minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, uint minLength, uint maxLength) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_6(ROMol.getCPtr(mol), minLength, maxLength);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality, bool use2D, int confId) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_7(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality, use2D, confId);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality, bool use2D) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_8(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality, use2D);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_9(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_10(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_11(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_12(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getAtomPairFingerprint(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAtomPairFingerprint__SWIG_13(ROMol.getCPtr(mol));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality, bool use2D, int confId) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_0(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality, use2D, confId);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality, bool use2D) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_1(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality, use2D);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_2(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_3(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_4(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_5(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength, uint maxLength) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_6(ROMol.getCPtr(mol), nBits, minLength, maxLength);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits, uint minLength) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_7(ROMol.getCPtr(mol), nBits, minLength);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol, uint nBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_8(ROMol.getCPtr(mol), nBits);
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect32 getHashedAtomPairFingerprint(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprint__SWIG_9(ROMol.getCPtr(mol));
    SparseIntVect32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, uint nBitsPerEntry, bool includeChirality, bool use2D, int confId) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_0(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), nBitsPerEntry, includeChirality, use2D, confId);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, uint nBitsPerEntry, bool includeChirality, bool use2D) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_1(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), nBitsPerEntry, includeChirality, use2D);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, uint nBitsPerEntry, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_2(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), nBitsPerEntry, includeChirality);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, uint nBitsPerEntry) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_3(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), nBitsPerEntry);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_4(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_5(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_6(ROMol.getCPtr(mol), nBits, minLength, maxLength, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength, uint maxLength) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_7(ROMol.getCPtr(mol), nBits, minLength, maxLength);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits, uint minLength) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_8(ROMol.getCPtr(mol), nBits, minLength);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol, uint nBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_9(ROMol.getCPtr(mol), nBits);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedAtomPairFingerprintAsBitVect(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedAtomPairFingerprintAsBitVect__SWIG_10(ROMol.getCPtr(mol));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getTopologicalTorsionFingerprint(ROMol mol, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getTopologicalTorsionFingerprint__SWIG_0(ROMol.getCPtr(mol), targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality);
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getTopologicalTorsionFingerprint(ROMol mol, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getTopologicalTorsionFingerprint__SWIG_1(ROMol.getCPtr(mol), targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getTopologicalTorsionFingerprint(ROMol mol, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getTopologicalTorsionFingerprint__SWIG_2(ROMol.getCPtr(mol), targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getTopologicalTorsionFingerprint(ROMol mol, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getTopologicalTorsionFingerprint__SWIG_3(ROMol.getCPtr(mol), targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getTopologicalTorsionFingerprint(ROMol mol, uint targetSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getTopologicalTorsionFingerprint__SWIG_4(ROMol.getCPtr(mol), targetSize);
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getTopologicalTorsionFingerprint(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getTopologicalTorsionFingerprint__SWIG_5(ROMol.getCPtr(mol));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_0(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), includeChirality);
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_1(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_2(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_3(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol, uint nBits, uint targetSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_4(ROMol.getCPtr(mol), nBits, targetSize);
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol, uint nBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_5(ROMol.getCPtr(mol), nBits);
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVect64 getHashedTopologicalTorsionFingerprint(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprint__SWIG_6(ROMol.getCPtr(mol));
    SparseIntVect64 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVect64(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, uint nBitsPerEntry, bool includeChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_0(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), nBitsPerEntry, includeChirality);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, uint nBitsPerEntry) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_1(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), nBitsPerEntry);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_2(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_unsigned_int_t ignoreAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_3(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ignoreAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits, uint targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_4(ROMol.getCPtr(mol), nBits, targetSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits, uint targetSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_5(ROMol.getCPtr(mol), nBits, targetSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol, uint nBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_6(ROMol.getCPtr(mol), nBits);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getHashedTopologicalTorsionFingerprintAsBitVect(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedTopologicalTorsionFingerprintAsBitVect__SWIG_7(ROMol.getCPtr(mol));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MAX_NATOMS {
    get {
      int ret = RDKFuncsPINVOKE.MAX_NATOMS_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MAX_CYCLES {
    get {
      int ret = RDKFuncsPINVOKE.MAX_CYCLES_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MAX_BONDTYPE {
    get {
      int ret = RDKFuncsPINVOKE.MAX_BONDTYPE_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void canonicalizeFragment(ROMol mol, int atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t colors, SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t molStack, SWIGTYPE_p_boost__dynamic_bitsetT_t bondsInPlay, Str_Vect bondSymbols, bool doIsomericSmiles, bool doRandom) {
    RDKFuncsPINVOKE.canonicalizeFragment__SWIG_0(ROMol.getCPtr(mol), atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t.getCPtr(colors), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t.getCPtr(molStack), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(bondsInPlay), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doRandom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeFragment(ROMol mol, int atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t colors, SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t molStack, SWIGTYPE_p_boost__dynamic_bitsetT_t bondsInPlay, Str_Vect bondSymbols, bool doIsomericSmiles) {
    RDKFuncsPINVOKE.canonicalizeFragment__SWIG_1(ROMol.getCPtr(mol), atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t.getCPtr(colors), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t.getCPtr(molStack), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(bondsInPlay), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeFragment(ROMol mol, int atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t colors, SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t molStack, SWIGTYPE_p_boost__dynamic_bitsetT_t bondsInPlay, Str_Vect bondSymbols) {
    RDKFuncsPINVOKE.canonicalizeFragment__SWIG_2(ROMol.getCPtr(mol), atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t.getCPtr(colors), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t.getCPtr(molStack), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(bondsInPlay), Str_Vect.getCPtr(bondSymbols));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeFragment(ROMol mol, int atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t colors, SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t molStack, SWIGTYPE_p_boost__dynamic_bitsetT_t bondsInPlay) {
    RDKFuncsPINVOKE.canonicalizeFragment__SWIG_3(ROMol.getCPtr(mol), atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t.getCPtr(colors), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t.getCPtr(molStack), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(bondsInPlay));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeFragment(ROMol mol, int atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t colors, SWIGTYPE_p_std__vectorT_unsigned_int_t ranks, SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t molStack) {
    RDKFuncsPINVOKE.canonicalizeFragment__SWIG_4(ROMol.getCPtr(mol), atomIdx, SWIGTYPE_p_std__vectorT_RDKit__Canon__AtomColors_t.getCPtr(colors), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(ranks), SWIGTYPE_p_std__vectorT_RDKit__Canon__MolStackElem_t.getCPtr(molStack));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool chiralAtomNeedsTagInversion(ROMol mol, Atom atom, bool isAtomFirst, uint numClosures) {
    bool ret = RDKFuncsPINVOKE.chiralAtomNeedsTagInversion(ROMol.getCPtr(mol), Atom.getCPtr(atom), isAtomFirst, numClosures);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string qhelper(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t q, uint depth) {
    string ret = RDKFuncsPINVOKE.qhelper__SWIG_0(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(q), depth);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string describeQuery(Atom atom) {
    string ret = RDKFuncsPINVOKE.describeQuery__SWIG_0(Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string qhelper(SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t q, uint depth) {
    string ret = RDKFuncsPINVOKE.qhelper__SWIG_1(SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t.getCPtr(q), depth);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string describeQuery(Bond bond) {
    string ret = RDKFuncsPINVOKE.describeQuery__SWIG_1(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomAromatic(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomAromatic(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomAliphatic(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomAliphatic(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomExplicitDegree(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomExplicitDegree(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomTotalDegree(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomTotalDegree(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomNonHydrogenDegree(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomNonHydrogenDegree(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHeavyAtomDegree(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHeavyAtomDegree(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHCount(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHCount(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomImplicitHCount(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomImplicitHCount(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHasImplicitH(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHasImplicitH(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomImplicitValence(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomImplicitValence(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomExplicitValence(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomExplicitValence(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomTotalValence(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomTotalValence(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomUnsaturated(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomUnsaturated(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomNum(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomNum(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int makeAtomType(int atomic_num, bool aromatic) {
    int ret = RDKFuncsPINVOKE.makeAtomType(atomic_num, aromatic);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void parseAtomType(int val, SWIGTYPE_p_int atomic_num, SWIGTYPE_p_bool aromatic) {
    RDKFuncsPINVOKE.parseAtomType(val, SWIGTYPE_p_int.getCPtr(atomic_num), SWIGTYPE_p_bool.getCPtr(aromatic));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool getAtomTypeIsAromatic(int val) {
    bool ret = RDKFuncsPINVOKE.getAtomTypeIsAromatic(val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getAtomTypeAtomicNum(int val) {
    int ret = RDKFuncsPINVOKE.getAtomTypeAtomicNum(val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomType(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomType(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int massIntegerConversionFactor {
    get {
      int ret = RDKFuncsPINVOKE.massIntegerConversionFactor_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int queryAtomMass(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomMass(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomIsotope(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomIsotope(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomFormalCharge(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomFormalCharge(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomNegativeFormalCharge(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomNegativeFormalCharge(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHybridization(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHybridization(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomNumRadicalElectrons(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomNumRadicalElectrons(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHasChiralTag(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHasChiralTag(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomMissingChiralTag(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomMissingChiralTag(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHasHeteroatomNbrs(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHasHeteroatomNbrs(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomNumHeteroatomNbrs(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomNumHeteroatomNbrs(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHasAliphaticHeteroatomNbrs(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHasAliphaticHeteroatomNbrs(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomNumAliphaticHeteroatomNbrs(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomNumAliphaticHeteroatomNbrs(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint queryAtomBondProduct(Atom at) {
    uint ret = RDKFuncsPINVOKE.queryAtomBondProduct(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint queryAtomAllBondProduct(Atom at) {
    uint ret = RDKFuncsPINVOKE.queryAtomAllBondProduct(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryBondOrder(Bond bond) {
    int ret = RDKFuncsPINVOKE.queryBondOrder(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryBondIsSingleOrAromatic(Bond bond) {
    int ret = RDKFuncsPINVOKE.queryBondIsSingleOrAromatic(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryBondDir(Bond bond) {
    int ret = RDKFuncsPINVOKE.queryBondDir(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryIsBondInNRings(Bond at) {
    int ret = RDKFuncsPINVOKE.queryIsBondInNRings(Bond.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryBondHasStereo(Bond bnd) {
    int ret = RDKFuncsPINVOKE.queryBondHasStereo(Bond.getCPtr(bnd));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryIsAtomInNRings(Atom at) {
    int ret = RDKFuncsPINVOKE.queryIsAtomInNRings(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryIsAtomInRing(Atom at) {
    int ret = RDKFuncsPINVOKE.queryIsAtomInRing(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomHasRingBond(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomHasRingBond(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryIsBondInRing(Bond bond) {
    int ret = RDKFuncsPINVOKE.queryIsBondInRing(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomMinRingSize(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomMinRingSize(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryBondMinRingSize(Bond bond) {
    int ret = RDKFuncsPINVOKE.queryBondMinRingSize(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomRingBondCount(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomRingBondCount(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__RangeQueryT_int_RDKit__Atom_const_p_true_t makeAtomRangeQuery(int lower, int upper, bool lowerOpen, bool upperOpen, SWIGTYPE_p_f_p_q_const__RDKit__Atom__int func, string description) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomRangeQuery__SWIG_0(lower, upper, lowerOpen, upperOpen, SWIGTYPE_p_f_p_q_const__RDKit__Atom__int.getCPtr(func), description);
    SWIGTYPE_p_Queries__RangeQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__RangeQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__RangeQueryT_int_RDKit__Atom_const_p_true_t makeAtomRangeQuery(int lower, int upper, bool lowerOpen, bool upperOpen, SWIGTYPE_p_f_p_q_const__RDKit__Atom__int func) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomRangeQuery__SWIG_1(lower, upper, lowerOpen, upperOpen, SWIGTYPE_p_f_p_q_const__RDKit__Atom__int.getCPtr(func));
    SWIGTYPE_p_Queries__RangeQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__RangeQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomNumQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomNumQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomTypeQuery(int num, int aromatic) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomTypeQuery(num, aromatic);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomImplicitValenceQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomImplicitValenceQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomExplicitValenceQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomExplicitValenceQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomTotalValenceQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomTotalValenceQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomExplicitDegreeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomExplicitDegreeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomTotalDegreeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomTotalDegreeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHeavyAtomDegreeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHeavyAtomDegreeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHCountQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHCountQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHasImplicitHQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHasImplicitHQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomImplicitHCountQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomImplicitHCountQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomAromaticQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomAromaticQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomAliphaticQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomAliphaticQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomMassQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomMassQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomIsotopeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomIsotopeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomFormalChargeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomFormalChargeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomNegativeFormalChargeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomNegativeFormalChargeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHybridizationQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHybridizationQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomNumRadicalElectronsQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomNumRadicalElectronsQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHasChiralTagQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHasChiralTagQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomMissingChiralTagQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomMissingChiralTagQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomUnsaturatedQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomUnsaturatedQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomInRingQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomInRingQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomInNRingsQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomInNRingsQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomInRingOfSizeQuery(int tgt) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomInRingOfSizeQuery(tgt);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomMinRingSizeQuery(int tgt) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomMinRingSizeQuery(tgt);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomRingBondCountQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomRingBondCountQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAAtomQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAHAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAHAtomQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t makeQAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeQAtomQuery();
    SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeQHAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeQHAtomQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t makeXAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeXAtomQuery();
    SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t makeXHAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeXHAtomQuery();
    SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t makeMAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeMAtomQuery();
    SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t makeMHAtomQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeMHAtomQuery();
    SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__OrQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHasRingBondQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHasRingBondQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomNumHeteroatomNbrsQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomNumHeteroatomNbrsQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHasHeteroatomNbrsQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHasHeteroatomNbrsQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomNumAliphaticHeteroatomNbrsQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomNumAliphaticHeteroatomNbrsQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t makeAtomHasAliphaticHeteroatomNbrsQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomHasAliphaticHeteroatomNbrsQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondOrderEqualsQuery(Bond.BondType what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondOrderEqualsQuery((int)what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeSingleOrAromaticBondQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeSingleOrAromaticBondQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondDirEqualsQuery(Bond.BondDir what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondDirEqualsQuery((int)what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondHasStereoQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondHasStereoQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondIsInRingQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondIsInRingQuery();
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondInRingOfSizeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondInRingOfSizeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondMinRingSizeQuery(int what) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondMinRingSizeQuery(what);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t makeBondInNRingsQuery(int tgt) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondInNRingsQuery(tgt);
    SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__EqualityQueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t makeBondNullQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeBondNullQuery();
    SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__QueryT_int_RDKit__Bond_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t makeAtomNullQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.makeAtomNullQuery();
    SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int queryAtomRingMembership(Atom at) {
    int ret = RDKFuncsPINVOKE.queryAtomRingMembership(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isComplexQuery(Bond b) {
    bool ret = RDKFuncsPINVOKE.isComplexQuery__SWIG_0(Bond.getCPtr(b));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isComplexQuery(Atom a) {
    bool ret = RDKFuncsPINVOKE.isComplexQuery__SWIG_1(Atom.getCPtr(a));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isAtomAromatic(Atom a) {
    bool ret = RDKFuncsPINVOKE.isAtomAromatic(Atom.getCPtr(a));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string periodicTableAtomData {
    get {
      string ret = RDKFuncsPINVOKE.periodicTableAtomData_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string isotopesAtomData {
    get {
      global::System.IntPtr cPtr = RDKFuncsPINVOKE.isotopesAtomData_get();
      SWIGTYPE_p_std__string ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(cPtr, false);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double electronMass {
    get {
      double ret = RDKFuncsPINVOKE.electronMass_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Atom SmilesToAtom(string smi) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SmilesToAtom(smi);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Bond SmilesToBond(string smi) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SmilesToBond(smi);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Atom SmartsToAtom(string sma) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SmartsToAtom(sma);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Bond SmartsToBond(string sma) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SmartsToBond(sma);
    Bond ret = (cPtr == global::System.IntPtr.Zero) ? null : new Bond(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getCXExtensions(ROMol mol) {
    string ret = RDKFuncsPINVOKE.getCXExtensions(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool inOrganicSubset(int atomicNumber) {
    bool ret = RDKFuncsPINVOKE.inOrganicSubset(atomicNumber);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAtomSmiles(Atom atom, bool doKekule, Bond bondIn, bool allHsExplicit, bool isomericSmiles) {
    string ret = RDKFuncsPINVOKE.GetAtomSmiles__SWIG_0(Atom.getCPtr(atom), doKekule, Bond.getCPtr(bondIn), allHsExplicit, isomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAtomSmiles(Atom atom, bool doKekule, Bond bondIn, bool allHsExplicit) {
    string ret = RDKFuncsPINVOKE.GetAtomSmiles__SWIG_1(Atom.getCPtr(atom), doKekule, Bond.getCPtr(bondIn), allHsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAtomSmiles(Atom atom, bool doKekule, Bond bondIn) {
    string ret = RDKFuncsPINVOKE.GetAtomSmiles__SWIG_2(Atom.getCPtr(atom), doKekule, Bond.getCPtr(bondIn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAtomSmiles(Atom atom, bool doKekule) {
    string ret = RDKFuncsPINVOKE.GetAtomSmiles__SWIG_3(Atom.getCPtr(atom), doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAtomSmiles(Atom atom) {
    string ret = RDKFuncsPINVOKE.GetAtomSmiles__SWIG_4(Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBondSmiles(Bond bond, int atomToLeftIdx, bool doKekule, bool allBondsExplicit) {
    string ret = RDKFuncsPINVOKE.GetBondSmiles__SWIG_0(Bond.getCPtr(bond), atomToLeftIdx, doKekule, allBondsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBondSmiles(Bond bond, int atomToLeftIdx, bool doKekule) {
    string ret = RDKFuncsPINVOKE.GetBondSmiles__SWIG_1(Bond.getCPtr(bond), atomToLeftIdx, doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBondSmiles(Bond bond, int atomToLeftIdx) {
    string ret = RDKFuncsPINVOKE.GetBondSmiles__SWIG_2(Bond.getCPtr(bond), atomToLeftIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBondSmiles(Bond bond) {
    string ret = RDKFuncsPINVOKE.GetBondSmiles__SWIG_3(Bond.getCPtr(bond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit, bool allHsExplicit, bool doRandom) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_0(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit, allHsExplicit, doRandom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit, bool allHsExplicit) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_1(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit, allHsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_2(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_3(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_4(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_5(ROMol.getCPtr(mol), doIsomericSmiles, doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol, bool doIsomericSmiles) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_6(ROMol.getCPtr(mol), doIsomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmiles(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToSmiles__SWIG_7(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit, bool allHsExplicit) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_0(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit, allHsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_1(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_2(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom, canonical);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_3(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_4(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_5(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_6(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_7(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_8(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmiles(ROMol mol, Int_Vect atomsToUse) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmiles__SWIG_9(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit, bool allHsExplicit, bool doRandom) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_0(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit, allHsExplicit, doRandom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit, bool allHsExplicit) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_1(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit, allHsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_2(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_3(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom, canonical);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule, int rootedAtAtom) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_4(ROMol.getCPtr(mol), doIsomericSmiles, doKekule, rootedAtAtom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles, bool doKekule) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_5(ROMol.getCPtr(mol), doIsomericSmiles, doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol, bool doIsomericSmiles) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_6(ROMol.getCPtr(mol), doIsomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToCXSmiles(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToCXSmiles__SWIG_7(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit, bool allHsExplicit) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_0(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit, allHsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical, bool allBondsExplicit) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_1(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom, canonical, allBondsExplicit);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom, bool canonical) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_2(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom, canonical);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule, int rootedAtAtom) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_3(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule, rootedAtAtom);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles, bool doKekule) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_4(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles, doKekule);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols, bool doIsomericSmiles) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_5(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols), doIsomericSmiles);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols, Str_Vect bondSymbols) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_6(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols), Str_Vect.getCPtr(bondSymbols));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, Str_Vect atomSymbols) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_7(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), Str_Vect.getCPtr(atomSymbols));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_8(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToCXSmiles(ROMol mol, Int_Vect atomsToUse) {
    string ret = RDKFuncsPINVOKE.MolFragmentToCXSmiles__SWIG_9(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetAtomSmarts(QueryAtom qatom) {
    string ret = RDKFuncsPINVOKE.GetAtomSmarts(QueryAtom.getCPtr(qatom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBondSmarts(QueryBond qbond, int atomToLeftIdx) {
    string ret = RDKFuncsPINVOKE.GetBondSmarts__SWIG_0(QueryBond.getCPtr(qbond), atomToLeftIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBondSmarts(QueryBond qbond) {
    string ret = RDKFuncsPINVOKE.GetBondSmarts__SWIG_1(QueryBond.getCPtr(qbond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmarts(ROMol mol, bool doIsomericSmarts) {
    string ret = RDKFuncsPINVOKE.MolToSmarts__SWIG_0(ROMol.getCPtr(mol), doIsomericSmarts);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolToSmarts(ROMol mol) {
    string ret = RDKFuncsPINVOKE.MolToSmarts__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmarts(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse, bool doIsomericSmarts) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmarts__SWIG_0(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse), doIsomericSmarts);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmarts(ROMol mol, Int_Vect atomsToUse, Int_Vect bondsToUse) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmarts__SWIG_1(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse), Int_Vect.getCPtr(bondsToUse));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolFragmentToSmarts(ROMol mol, Int_Vect atomsToUse) {
    string ret = RDKFuncsPINVOKE.MolFragmentToSmarts__SWIG_2(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomsToUse));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ci_LOCAL_INF {
    get {
      int ret = RDKFuncsPINVOKE.ci_LOCAL_INF_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int countAtomElec(Atom at) {
    int ret = RDKFuncsPINVOKE.countAtomElec(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int getFormalCharge(ROMol mol) {
    int ret = RDKFuncsPINVOKE.getFormalCharge(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool atomHasConjugatedBond(Atom at) {
    bool ret = RDKFuncsPINVOKE.atomHasConjugatedBond(Atom.getCPtr(at));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getMolFrags(ROMol mol, Int_Vect mapping) {
    uint ret = RDKFuncsPINVOKE.getMolFrags__SWIG_0(ROMol.getCPtr(mol), Int_Vect.getCPtr(mapping));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getMolFrags(ROMol mol, Int_Vect_Vect frags) {
    uint ret = RDKFuncsPINVOKE.getMolFrags__SWIG_1(ROMol.getCPtr(mol), Int_Vect_Vect.getCPtr(frags));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect getMolFrags(ROMol mol, bool sanitizeFrags, Int_Vect frags, Int_Vect_Vect fragsMolAtomMapping, bool copyConformers) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.getMolFrags__SWIG_2(ROMol.getCPtr(mol), sanitizeFrags, Int_Vect.getCPtr(frags), Int_Vect_Vect.getCPtr(fragsMolAtomMapping), copyConformers), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect getMolFrags(ROMol mol, bool sanitizeFrags, Int_Vect frags, Int_Vect_Vect fragsMolAtomMapping) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.getMolFrags__SWIG_3(ROMol.getCPtr(mol), sanitizeFrags, Int_Vect.getCPtr(frags), Int_Vect_Vect.getCPtr(fragsMolAtomMapping)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect getMolFrags(ROMol mol, bool sanitizeFrags, Int_Vect frags) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.getMolFrags__SWIG_4(ROMol.getCPtr(mol), sanitizeFrags, Int_Vect.getCPtr(frags)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect getMolFrags(ROMol mol, bool sanitizeFrags) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.getMolFrags__SWIG_5(ROMol.getCPtr(mol), sanitizeFrags), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect getMolFrags(ROMol mol) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.getMolFrags__SWIG_6(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeBalabanJ(ROMol mol, bool useBO, bool force, Int_Vect bondPath, bool cacheIt) {
    double ret = RDKFuncsPINVOKE.computeBalabanJ__SWIG_0(ROMol.getCPtr(mol), useBO, force, Int_Vect.getCPtr(bondPath), cacheIt);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeBalabanJ(ROMol mol, bool useBO, bool force, Int_Vect bondPath) {
    double ret = RDKFuncsPINVOKE.computeBalabanJ__SWIG_1(ROMol.getCPtr(mol), useBO, force, Int_Vect.getCPtr(bondPath));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeBalabanJ(ROMol mol, bool useBO, bool force) {
    double ret = RDKFuncsPINVOKE.computeBalabanJ__SWIG_2(ROMol.getCPtr(mol), useBO, force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeBalabanJ(ROMol mol, bool useBO) {
    double ret = RDKFuncsPINVOKE.computeBalabanJ__SWIG_3(ROMol.getCPtr(mol), useBO);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeBalabanJ(ROMol mol) {
    double ret = RDKFuncsPINVOKE.computeBalabanJ__SWIG_4(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double computeBalabanJ(SWIGTYPE_p_double distMat, int nb, int nAts) {
    double ret = RDKFuncsPINVOKE.computeBalabanJ__SWIG_5(SWIGTYPE_p_double.getCPtr(distMat), nb, nAts);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol addHs(ROMol mol, bool explicitOnly, bool addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t onlyOnAtoms, bool addResidueInfo) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.addHs__SWIG_0(ROMol.getCPtr(mol), explicitOnly, addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(onlyOnAtoms), addResidueInfo);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol addHs(ROMol mol, bool explicitOnly, bool addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t onlyOnAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.addHs__SWIG_1(ROMol.getCPtr(mol), explicitOnly, addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(onlyOnAtoms));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol addHs(ROMol mol, bool explicitOnly, bool addCoords) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.addHs__SWIG_2(ROMol.getCPtr(mol), explicitOnly, addCoords);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol addHs(ROMol mol, bool explicitOnly) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.addHs__SWIG_3(ROMol.getCPtr(mol), explicitOnly);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol addHs(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.addHs__SWIG_4(ROMol.getCPtr(mol));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void addHs(RWMol mol, bool explicitOnly, bool addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t onlyOnAtoms, bool addResidueInfo) {
    RDKFuncsPINVOKE.addHs__SWIG_5(RWMol.getCPtr(mol), explicitOnly, addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(onlyOnAtoms), addResidueInfo);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addHs(RWMol mol, bool explicitOnly, bool addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t onlyOnAtoms) {
    RDKFuncsPINVOKE.addHs__SWIG_6(RWMol.getCPtr(mol), explicitOnly, addCoords, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(onlyOnAtoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addHs(RWMol mol, bool explicitOnly, bool addCoords) {
    RDKFuncsPINVOKE.addHs__SWIG_7(RWMol.getCPtr(mol), explicitOnly, addCoords);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addHs(RWMol mol, bool explicitOnly) {
    RDKFuncsPINVOKE.addHs__SWIG_8(RWMol.getCPtr(mol), explicitOnly);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addHs(RWMol mol) {
    RDKFuncsPINVOKE.addHs__SWIG_9(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ROMol removeHs(ROMol mol, bool implicitOnly, bool updateExplicitCount, bool sanitize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.removeHs__SWIG_0(ROMol.getCPtr(mol), implicitOnly, updateExplicitCount, sanitize);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol removeHs(ROMol mol, bool implicitOnly, bool updateExplicitCount) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.removeHs__SWIG_1(ROMol.getCPtr(mol), implicitOnly, updateExplicitCount);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol removeHs(ROMol mol, bool implicitOnly) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.removeHs__SWIG_2(ROMol.getCPtr(mol), implicitOnly);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol removeHs(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.removeHs__SWIG_3(ROMol.getCPtr(mol));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void removeHs(RWMol mol, bool implicitOnly, bool updateExplicitCount, bool sanitize) {
    RDKFuncsPINVOKE.removeHs__SWIG_4(RWMol.getCPtr(mol), implicitOnly, updateExplicitCount, sanitize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeHs(RWMol mol, bool implicitOnly, bool updateExplicitCount) {
    RDKFuncsPINVOKE.removeHs__SWIG_5(RWMol.getCPtr(mol), implicitOnly, updateExplicitCount);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeHs(RWMol mol, bool implicitOnly) {
    RDKFuncsPINVOKE.removeHs__SWIG_6(RWMol.getCPtr(mol), implicitOnly);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeHs(RWMol mol) {
    RDKFuncsPINVOKE.removeHs__SWIG_7(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ROMol mergeQueryHs(ROMol mol, bool mergeUnmappedOnly) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.mergeQueryHs__SWIG_0(ROMol.getCPtr(mol), mergeUnmappedOnly);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol mergeQueryHs(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.mergeQueryHs__SWIG_1(ROMol.getCPtr(mol));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void mergeQueryHs(RWMol mol, bool mergeUnmappedOnly) {
    RDKFuncsPINVOKE.mergeQueryHs__SWIG_2(RWMol.getCPtr(mol), mergeUnmappedOnly);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void mergeQueryHs(RWMol mol) {
    RDKFuncsPINVOKE.mergeQueryHs__SWIG_3(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ROMol adjustQueryProperties(ROMol mol, AdjustQueryParameters arg1) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.adjustQueryProperties__SWIG_0(ROMol.getCPtr(mol), AdjustQueryParameters.getCPtr(arg1));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol adjustQueryProperties(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.adjustQueryProperties__SWIG_1(ROMol.getCPtr(mol));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void adjustQueryProperties(RWMol mol, AdjustQueryParameters arg1) {
    RDKFuncsPINVOKE.adjustQueryProperties__SWIG_2(RWMol.getCPtr(mol), AdjustQueryParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void adjustQueryProperties(RWMol mol) {
    RDKFuncsPINVOKE.adjustQueryProperties__SWIG_3(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ROMol renumberAtoms(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t newOrder) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.renumberAtoms(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(newOrder));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void sanitizeMol(RWMol mol, SWIGTYPE_p_unsigned_int operationThatFailed, uint sanitizeOps) {
    RDKFuncsPINVOKE.sanitizeMol__SWIG_0(RWMol.getCPtr(mol), SWIGTYPE_p_unsigned_int.getCPtr(operationThatFailed), sanitizeOps);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void sanitizeMol(RWMol mol, SWIGTYPE_p_unsigned_int operationThatFailed) {
    RDKFuncsPINVOKE.sanitizeMol__SWIG_1(RWMol.getCPtr(mol), SWIGTYPE_p_unsigned_int.getCPtr(operationThatFailed));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void sanitizeMol(RWMol mol) {
    RDKFuncsPINVOKE.sanitizeMol__SWIG_2(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int setAromaticity(RWMol mol, AromaticityModel model, SWIGTYPE_p_f_r_RDKit__RWMol__int func) {
    int ret = RDKFuncsPINVOKE.setAromaticity__SWIG_0(RWMol.getCPtr(mol), (int)model, SWIGTYPE_p_f_r_RDKit__RWMol__int.getCPtr(func));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int setAromaticity(RWMol mol, AromaticityModel model) {
    int ret = RDKFuncsPINVOKE.setAromaticity__SWIG_1(RWMol.getCPtr(mol), (int)model);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int setAromaticity(RWMol mol) {
    int ret = RDKFuncsPINVOKE.setAromaticity__SWIG_2(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void cleanUp(RWMol mol) {
    RDKFuncsPINVOKE.cleanUp(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignRadicals(RWMol mol) {
    RDKFuncsPINVOKE.assignRadicals(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void adjustHs(RWMol mol) {
    RDKFuncsPINVOKE.adjustHs(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kekulize(RWMol mol, bool markAtomsBonds, uint maxBackTracks) {
    RDKFuncsPINVOKE.Kekulize__SWIG_0(RWMol.getCPtr(mol), markAtomsBonds, maxBackTracks);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kekulize(RWMol mol, bool markAtomsBonds) {
    RDKFuncsPINVOKE.Kekulize__SWIG_1(RWMol.getCPtr(mol), markAtomsBonds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Kekulize(RWMol mol) {
    RDKFuncsPINVOKE.Kekulize__SWIG_2(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setConjugation(ROMol mol) {
    RDKFuncsPINVOKE.setConjugation(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setHybridization(ROMol mol) {
    RDKFuncsPINVOKE.setHybridization(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int findSSSR(ROMol mol, Int_Vect_Vect res) {
    int ret = RDKFuncsPINVOKE.findSSSR__SWIG_0(ROMol.getCPtr(mol), Int_Vect_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int findSSSR(ROMol mol) {
    int ret = RDKFuncsPINVOKE.findSSSR__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void fastFindRings(ROMol mol) {
    RDKFuncsPINVOKE.fastFindRings(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void findRingFamilies(ROMol mol) {
    RDKFuncsPINVOKE.findRingFamilies(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int symmetrizeSSSR(ROMol mol, Int_Vect_Vect res) {
    int ret = RDKFuncsPINVOKE.symmetrizeSSSR__SWIG_0(ROMol.getCPtr(mol), Int_Vect_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int symmetrizeSSSR(ROMol mol) {
    int ret = RDKFuncsPINVOKE.symmetrizeSSSR__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getAdjacencyMatrix(ROMol mol, bool useBO, int emptyVal, bool force, string propNamePrefix, SWIGTYPE_p_boost__dynamic_bitsetT_t bondsToUse) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAdjacencyMatrix__SWIG_0(ROMol.getCPtr(mol), useBO, emptyVal, force, propNamePrefix, SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(bondsToUse));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getAdjacencyMatrix(ROMol mol, bool useBO, int emptyVal, bool force, string propNamePrefix) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAdjacencyMatrix__SWIG_1(ROMol.getCPtr(mol), useBO, emptyVal, force, propNamePrefix);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getAdjacencyMatrix(ROMol mol, bool useBO, int emptyVal, bool force) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAdjacencyMatrix__SWIG_2(ROMol.getCPtr(mol), useBO, emptyVal, force);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getAdjacencyMatrix(ROMol mol, bool useBO, int emptyVal) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAdjacencyMatrix__SWIG_3(ROMol.getCPtr(mol), useBO, emptyVal);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getAdjacencyMatrix(ROMol mol, bool useBO) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAdjacencyMatrix__SWIG_4(ROMol.getCPtr(mol), useBO);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getAdjacencyMatrix(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getAdjacencyMatrix__SWIG_5(ROMol.getCPtr(mol));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, bool useBO, bool useAtomWts, bool force, string propNamePrefix) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_0(ROMol.getCPtr(mol), useBO, useAtomWts, force, propNamePrefix);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, bool useBO, bool useAtomWts, bool force) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_1(ROMol.getCPtr(mol), useBO, useAtomWts, force);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, bool useBO, bool useAtomWts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_2(ROMol.getCPtr(mol), useBO, useAtomWts);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, bool useBO) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_3(ROMol.getCPtr(mol), useBO);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_4(ROMol.getCPtr(mol));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, Int_Vect activeAtoms, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bonds, bool useBO, bool useAtomWts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_5(ROMol.getCPtr(mol), Int_Vect.getCPtr(activeAtoms), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bonds), useBO, useAtomWts);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, Int_Vect activeAtoms, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bonds, bool useBO) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_6(ROMol.getCPtr(mol), Int_Vect.getCPtr(activeAtoms), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bonds), useBO);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double getDistanceMat(ROMol mol, Int_Vect activeAtoms, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bonds) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getDistanceMat__SWIG_7(ROMol.getCPtr(mol), Int_Vect.getCPtr(activeAtoms), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bonds));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double get3DDistanceMat(ROMol mol, int confId, bool useAtomWts, bool force, string propNamePrefix) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.get3DDistanceMat__SWIG_0(ROMol.getCPtr(mol), confId, useAtomWts, force, propNamePrefix);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double get3DDistanceMat(ROMol mol, int confId, bool useAtomWts, bool force) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.get3DDistanceMat__SWIG_1(ROMol.getCPtr(mol), confId, useAtomWts, force);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double get3DDistanceMat(ROMol mol, int confId, bool useAtomWts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.get3DDistanceMat__SWIG_2(ROMol.getCPtr(mol), confId, useAtomWts);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double get3DDistanceMat(ROMol mol, int confId) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.get3DDistanceMat__SWIG_3(ROMol.getCPtr(mol), confId);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double get3DDistanceMat(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.get3DDistanceMat__SWIG_4(ROMol.getCPtr(mol));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_List getShortestPath(ROMol mol, int aid1, int aid2) {
    Int_List ret = new Int_List(RDKFuncsPINVOKE.getShortestPath(ROMol.getCPtr(mol), aid1, aid2), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void cleanupChirality(RWMol mol) {
    RDKFuncsPINVOKE.cleanupChirality(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignChiralTypesFrom3D(ROMol mol, int confId, bool replaceExistingTags) {
    RDKFuncsPINVOKE.assignChiralTypesFrom3D__SWIG_0(ROMol.getCPtr(mol), confId, replaceExistingTags);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignChiralTypesFrom3D(ROMol mol, int confId) {
    RDKFuncsPINVOKE.assignChiralTypesFrom3D__SWIG_1(ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignChiralTypesFrom3D(ROMol mol) {
    RDKFuncsPINVOKE.assignChiralTypesFrom3D__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistryFrom3D(ROMol mol, int confId, bool replaceExistingTags) {
    RDKFuncsPINVOKE.assignStereochemistryFrom3D__SWIG_0(ROMol.getCPtr(mol), confId, replaceExistingTags);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistryFrom3D(ROMol mol, int confId) {
    RDKFuncsPINVOKE.assignStereochemistryFrom3D__SWIG_1(ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistryFrom3D(ROMol mol) {
    RDKFuncsPINVOKE.assignStereochemistryFrom3D__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignChiralTypesFromBondDirs(ROMol mol, int confId, bool replaceExistingTags) {
    RDKFuncsPINVOKE.assignChiralTypesFromBondDirs__SWIG_0(ROMol.getCPtr(mol), confId, replaceExistingTags);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignChiralTypesFromBondDirs(ROMol mol, int confId) {
    RDKFuncsPINVOKE.assignChiralTypesFromBondDirs__SWIG_1(ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignChiralTypesFromBondDirs(ROMol mol) {
    RDKFuncsPINVOKE.assignChiralTypesFromBondDirs__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void detectBondStereochemistry(ROMol mol, int confId) {
    RDKFuncsPINVOKE.detectBondStereochemistry__SWIG_0(ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void detectBondStereochemistry(ROMol mol) {
    RDKFuncsPINVOKE.detectBondStereochemistry__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setDoubleBondNeighborDirections(ROMol mol, Conformer conf) {
    RDKFuncsPINVOKE.setDoubleBondNeighborDirections__SWIG_0(ROMol.getCPtr(mol), Conformer.getCPtr(conf));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setDoubleBondNeighborDirections(ROMol mol) {
    RDKFuncsPINVOKE.setDoubleBondNeighborDirections__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setBondStereoFromDirections(ROMol mol) {
    RDKFuncsPINVOKE.setBondStereoFromDirections(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistry(ROMol mol, bool cleanIt, bool force, bool flagPossibleStereoCenters) {
    RDKFuncsPINVOKE.assignStereochemistry__SWIG_0(ROMol.getCPtr(mol), cleanIt, force, flagPossibleStereoCenters);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistry(ROMol mol, bool cleanIt, bool force) {
    RDKFuncsPINVOKE.assignStereochemistry__SWIG_1(ROMol.getCPtr(mol), cleanIt, force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistry(ROMol mol, bool cleanIt) {
    RDKFuncsPINVOKE.assignStereochemistry__SWIG_2(ROMol.getCPtr(mol), cleanIt);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignStereochemistry(ROMol mol) {
    RDKFuncsPINVOKE.assignStereochemistry__SWIG_3(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void removeStereochemistry(ROMol mol) {
    RDKFuncsPINVOKE.removeStereochemistry(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void findPotentialStereoBonds(ROMol mol, bool cleanIt) {
    RDKFuncsPINVOKE.findPotentialStereoBonds__SWIG_0(ROMol.getCPtr(mol), cleanIt);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void findPotentialStereoBonds(ROMol mol) {
    RDKFuncsPINVOKE.findPotentialStereoBonds__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint getNumAtomsWithDistinctProperty(ROMol mol, string prop) {
    uint ret = RDKFuncsPINVOKE.getNumAtomsWithDistinctProperty(ROMol.getCPtr(mol), prop);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int sanitizeMol(RWMol mol, int sanitizeOps) {
    int ret = RDKFuncsPINVOKE.sanitizeMol(RWMol.getCPtr(mol), sanitizeOps);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MolSanitizeException_Vect detectChemistryProblems(ROMol mol, int sanitizeOps) {
    MolSanitizeException_Vect ret = new MolSanitizeException_Vect(RDKFuncsPINVOKE.detectChemistryProblems__SWIG_0(ROMol.getCPtr(mol), sanitizeOps), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MolSanitizeException_Vect detectChemistryProblems(ROMol mol) {
    MolSanitizeException_Vect ret = new MolSanitizeException_Vect(RDKFuncsPINVOKE.detectChemistryProblems__SWIG_1(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int defaultConfId {
    set {
      RDKFuncsPINVOKE.defaultConfId_set(value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = RDKFuncsPINVOKE.defaultConfId_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool isMoleculeReactantOfReaction(ChemicalReaction rxn, ROMol mol, SWIGTYPE_p_unsigned_int which) {
    bool ret = RDKFuncsPINVOKE.isMoleculeReactantOfReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), ROMol.getCPtr(mol), SWIGTYPE_p_unsigned_int.getCPtr(which));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isMoleculeReactantOfReaction(ChemicalReaction rxn, ROMol mol) {
    bool ret = RDKFuncsPINVOKE.isMoleculeReactantOfReaction__SWIG_1(ChemicalReaction.getCPtr(rxn), ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isMoleculeProductOfReaction(ChemicalReaction rxn, ROMol mol, SWIGTYPE_p_unsigned_int which) {
    bool ret = RDKFuncsPINVOKE.isMoleculeProductOfReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), ROMol.getCPtr(mol), SWIGTYPE_p_unsigned_int.getCPtr(which));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isMoleculeProductOfReaction(ChemicalReaction rxn, ROMol mol) {
    bool ret = RDKFuncsPINVOKE.isMoleculeProductOfReaction__SWIG_1(ChemicalReaction.getCPtr(rxn), ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isMoleculeAgentOfReaction(ChemicalReaction rxn, ROMol mol, SWIGTYPE_p_unsigned_int which) {
    bool ret = RDKFuncsPINVOKE.isMoleculeAgentOfReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), ROMol.getCPtr(mol), SWIGTYPE_p_unsigned_int.getCPtr(which));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isMoleculeAgentOfReaction(ChemicalReaction rxn, ROMol mol) {
    bool ret = RDKFuncsPINVOKE.isMoleculeAgentOfReaction__SWIG_1(ChemicalReaction.getCPtr(rxn), ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_Vect getReactingAtoms(ChemicalReaction rxn, bool mappedAtomsOnly) {
    Int_Vect_Vect ret = new Int_Vect_Vect(RDKFuncsPINVOKE.getReactingAtoms__SWIG_0(ChemicalReaction.getCPtr(rxn), mappedAtomsOnly), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_Vect getReactingAtoms(ChemicalReaction rxn) {
    Int_Vect_Vect ret = new Int_Vect_Vect(RDKFuncsPINVOKE.getReactingAtoms__SWIG_1(ChemicalReaction.getCPtr(rxn)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void addRecursiveQueriesToReaction(ChemicalReaction rxn, StringMolMap queries, string propName, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_std__string_t_t_t reactantLabels) {
    RDKFuncsPINVOKE.addRecursiveQueriesToReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), StringMolMap.getCPtr(queries), propName, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_unsigned_int_std__string_t_t_t.getCPtr(reactantLabels));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addRecursiveQueriesToReaction(ChemicalReaction rxn, StringMolMap queries, string propName) {
    RDKFuncsPINVOKE.addRecursiveQueriesToReaction__SWIG_1(ChemicalReaction.getCPtr(rxn), StringMolMap.getCPtr(queries), propName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing, bool updateProps, bool canonOrient, uint nFlipsPerSample, uint nSamples, int sampleSeed, bool permuteDeg4Nodes) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), spacing, updateProps, canonOrient, nFlipsPerSample, nSamples, sampleSeed, permuteDeg4Nodes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing, bool updateProps, bool canonOrient, uint nFlipsPerSample, uint nSamples, int sampleSeed) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_1(ChemicalReaction.getCPtr(rxn), spacing, updateProps, canonOrient, nFlipsPerSample, nSamples, sampleSeed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing, bool updateProps, bool canonOrient, uint nFlipsPerSample, uint nSamples) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_2(ChemicalReaction.getCPtr(rxn), spacing, updateProps, canonOrient, nFlipsPerSample, nSamples);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing, bool updateProps, bool canonOrient, uint nFlipsPerSample) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_3(ChemicalReaction.getCPtr(rxn), spacing, updateProps, canonOrient, nFlipsPerSample);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing, bool updateProps, bool canonOrient) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_4(ChemicalReaction.getCPtr(rxn), spacing, updateProps, canonOrient);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing, bool updateProps) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_5(ChemicalReaction.getCPtr(rxn), spacing, updateProps);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn, double spacing) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_6(ChemicalReaction.getCPtr(rxn), spacing);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void compute2DCoordsForReaction(ChemicalReaction rxn) {
    RDKFuncsPINVOKE.compute2DCoordsForReaction__SWIG_7(ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChemicalReaction RxnBlockToChemicalReaction(string rxnBlock) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnBlockToChemicalReaction(rxnBlock);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnFileToChemicalReaction(string fileName) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnFileToChemicalReaction(fileName);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnDataStreamToChemicalReaction(SWIGTYPE_p_std__istream rxnStream, SWIGTYPE_p_unsigned_int line) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnDataStreamToChemicalReaction(SWIGTYPE_p_std__istream.getCPtr(rxnStream), SWIGTYPE_p_unsigned_int.getCPtr(line));
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnSmartsToChemicalReaction(string text, String_String_Map replacements, bool useSmiles) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnSmartsToChemicalReaction__SWIG_0(text, String_String_Map.getCPtr(replacements), useSmiles);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnSmartsToChemicalReaction(string text, String_String_Map replacements) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnSmartsToChemicalReaction__SWIG_1(text, String_String_Map.getCPtr(replacements));
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnSmartsToChemicalReaction(string text) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnSmartsToChemicalReaction__SWIG_2(text);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnMolToChemicalReaction(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RxnMolToChemicalReaction(ROMol.getCPtr(mol));
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChemicalReactionToRxnSmarts(ChemicalReaction rxn) {
    string ret = RDKFuncsPINVOKE.ChemicalReactionToRxnSmarts(ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChemicalReactionToRxnSmiles(ChemicalReaction rxn, bool canonical) {
    string ret = RDKFuncsPINVOKE.ChemicalReactionToRxnSmiles__SWIG_0(ChemicalReaction.getCPtr(rxn), canonical);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChemicalReactionToRxnSmiles(ChemicalReaction rxn) {
    string ret = RDKFuncsPINVOKE.ChemicalReactionToRxnSmiles__SWIG_1(ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChemicalReactionToRxnBlock(ChemicalReaction rxn, bool separateAgents) {
    string ret = RDKFuncsPINVOKE.ChemicalReactionToRxnBlock__SWIG_0(ChemicalReaction.getCPtr(rxn), separateAgents);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ChemicalReactionToRxnBlock(ChemicalReaction rxn) {
    string ret = RDKFuncsPINVOKE.ChemicalReactionToRxnBlock__SWIG_1(ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol ChemicalReactionToRxnMol(ChemicalReaction rxn) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReactionToRxnMol(ChemicalReaction.getCPtr(rxn));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ci_BITVECT_VERSION {
    get {
      int ret = RDKFuncsPINVOKE.ci_BITVECT_VERSION_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool AllProbeBitsMatch(string probe, string arg1) {
    bool ret = RDKFuncsPINVOKE.AllProbeBitsMatch__SWIG_0(probe, arg1);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AllProbeBitsMatch(ExplicitBitVect probe, ExplicitBitVect arg1) {
    bool ret = RDKFuncsPINVOKE.AllProbeBitsMatch__SWIG_2(ExplicitBitVect.getCPtr(probe), ExplicitBitVect.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int NumOnBitsInCommon(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    int ret = RDKFuncsPINVOKE.NumOnBitsInCommon(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int NumBitsInCommon(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    int ret = RDKFuncsPINVOKE.NumBitsInCommon(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint CalcBitmapPopcount(SWIGTYPE_p_unsigned_char bv1, uint nBytes) {
    uint ret = RDKFuncsPINVOKE.CalcBitmapPopcount(SWIGTYPE_p_unsigned_char.getCPtr(bv1), nBytes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double CalcBitmapTanimoto(SWIGTYPE_p_unsigned_char bv1, SWIGTYPE_p_unsigned_char bv2, uint nBytes) {
    double ret = RDKFuncsPINVOKE.CalcBitmapTanimoto(SWIGTYPE_p_unsigned_char.getCPtr(bv1), SWIGTYPE_p_unsigned_char.getCPtr(bv2), nBytes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double CalcBitmapDice(SWIGTYPE_p_unsigned_char bv1, SWIGTYPE_p_unsigned_char bv2, uint nBytes) {
    double ret = RDKFuncsPINVOKE.CalcBitmapDice(SWIGTYPE_p_unsigned_char.getCPtr(bv1), SWIGTYPE_p_unsigned_char.getCPtr(bv2), nBytes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double CalcBitmapTversky(SWIGTYPE_p_unsigned_char bv1, SWIGTYPE_p_unsigned_char bv2, uint nBytes, double ca, double cb) {
    double ret = RDKFuncsPINVOKE.CalcBitmapTversky(SWIGTYPE_p_unsigned_char.getCPtr(bv1), SWIGTYPE_p_unsigned_char.getCPtr(bv2), nBytes, ca, cb);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CalcBitmapAllProbeBitsMatch(SWIGTYPE_p_unsigned_char probe, SWIGTYPE_p_unsigned_char arg1, uint nBytes) {
    bool ret = RDKFuncsPINVOKE.CalcBitmapAllProbeBitsMatch(SWIGTYPE_p_unsigned_char.getCPtr(probe), SWIGTYPE_p_unsigned_char.getCPtr(arg1), nBytes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect convertToExplicit(SWIGTYPE_p_SparseBitVect sbv) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.convertToExplicit(SWIGTYPE_p_SparseBitVect.getCPtr(sbv));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect OnBitProjSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.OnBitProjSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect FoldFingerprint(ExplicitBitVect bv1, uint factor) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.FoldFingerprint__SWIG_2(ExplicitBitVect.getCPtr(bv1), factor);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect FoldFingerprint(ExplicitBitVect bv1) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.FoldFingerprint__SWIG_3(ExplicitBitVect.getCPtr(bv1));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AllProbeBitsMatch(ExplicitBitVect probe, string pkl) {
    bool ret = RDKFuncsPINVOKE.AllProbeBitsMatch__SWIG_5(ExplicitBitVect.getCPtr(probe), pkl);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double CosineSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.CosineSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double KulczynskiSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.KulczynskiSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2, double a, double b) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2), a, b);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double SokalSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.SokalSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double McConnaugheySimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.McConnaugheySimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double AsymmetricSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.AsymmetricSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double BraunBlanquetSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.BraunBlanquetSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double RusselSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.RusselSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double OnBitSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.OnBitSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double AllBitSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.AllBitSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect OnBitsInCommon(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.OnBitsInCommon(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect OffBitsInCommon(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.OffBitsInCommon(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect OffBitProjSimilarity(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.OffBitProjSimilarity(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BitVectToText(ExplicitBitVect bv1) {
    string ret = RDKFuncsPINVOKE.BitVectToText(ExplicitBitVect.getCPtr(bv1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FromBitString(ExplicitBitVect sbv, string s) {
    RDKFuncsPINVOKE.FromBitString(ExplicitBitVect.getCPtr(sbv), s);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FromDaylightString(ExplicitBitVect sbv, string s) {
    RDKFuncsPINVOKE.FromDaylightString(ExplicitBitVect.getCPtr(sbv), s);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string BitVectToFPSText(ExplicitBitVect bv1) {
    string ret = RDKFuncsPINVOKE.BitVectToFPSText(ExplicitBitVect.getCPtr(bv1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void UpdateBitVectFromFPSText(ExplicitBitVect bv1, string fps) {
    RDKFuncsPINVOKE.UpdateBitVectFromFPSText(ExplicitBitVect.getCPtr(bv1), fps);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t atomBits, SWIGTYPE_p_std__mapT_unsigned_int_std__vectorT_std__vectorT_int_t_t_std__lessT_unsigned_int_t_t bitInfo) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_0(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t.getCPtr(atomBits), SWIGTYPE_p_std__mapT_unsigned_int_std__vectorT_std__vectorT_int_t_t_std__lessT_unsigned_int_t_t.getCPtr(bitInfo));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t atomBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_1(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t.getCPtr(atomBits));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_2(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_3(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize, bool branchedPaths, bool useBondOrder) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_4(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize, branchedPaths, useBondOrder);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize, bool branchedPaths) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_5(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize, branchedPaths);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity, uint minSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_6(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity, minSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs, double tgtDensity) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_7(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs, tgtDensity);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash, bool useHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_8(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash, useHs);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize, uint nBitsPerHash) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_9(ROMol.getCPtr(mol), minPath, maxPath, fpSize, nBitsPerHash);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, uint fpSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_10(ROMol.getCPtr(mol), minPath, maxPath, fpSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath, uint maxPath) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_11(ROMol.getCPtr(mol), minPath, maxPath);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol, uint minPath) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_12(ROMol.getCPtr(mol), minPath);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect RDKFingerprintMol(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.RDKFingerprintMol__SWIG_13(ROMol.getCPtr(mol));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RDKFingerprintMolVersion {
    get {
      string ret = RDKFuncsPINVOKE.RDKFingerprintMolVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath, uint maxPath, uint fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t atomCounts, ExplicitBitVect setOnlyBits, bool branchedPaths, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_0(ROMol.getCPtr(mol), layerFlags, minPath, maxPath, fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCounts), ExplicitBitVect.getCPtr(setOnlyBits), branchedPaths, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath, uint maxPath, uint fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t atomCounts, ExplicitBitVect setOnlyBits, bool branchedPaths) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_1(ROMol.getCPtr(mol), layerFlags, minPath, maxPath, fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCounts), ExplicitBitVect.getCPtr(setOnlyBits), branchedPaths);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath, uint maxPath, uint fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t atomCounts, ExplicitBitVect setOnlyBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_2(ROMol.getCPtr(mol), layerFlags, minPath, maxPath, fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCounts), ExplicitBitVect.getCPtr(setOnlyBits));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath, uint maxPath, uint fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t atomCounts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_3(ROMol.getCPtr(mol), layerFlags, minPath, maxPath, fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCounts));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath, uint maxPath, uint fpSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_4(ROMol.getCPtr(mol), layerFlags, minPath, maxPath, fpSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath, uint maxPath) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_5(ROMol.getCPtr(mol), layerFlags, minPath, maxPath);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags, uint minPath) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_6(ROMol.getCPtr(mol), layerFlags, minPath);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol, uint layerFlags) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_7(ROMol.getCPtr(mol), layerFlags);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect LayeredFingerprintMol(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.LayeredFingerprintMol__SWIG_8(ROMol.getCPtr(mol));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint maxFingerprintLayers {
    get {
      uint ret = RDKFuncsPINVOKE.maxFingerprintLayers_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string LayeredFingerprintMolVersion {
    get {
      string ret = RDKFuncsPINVOKE.LayeredFingerprintMolVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint substructLayers {
    get {
      uint ret = RDKFuncsPINVOKE.substructLayers_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ExplicitBitVect PatternFingerprintMol(ROMol mol, uint fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t atomCounts, ExplicitBitVect setOnlyBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PatternFingerprintMol__SWIG_0(ROMol.getCPtr(mol), fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCounts), ExplicitBitVect.getCPtr(setOnlyBits));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect PatternFingerprintMol(ROMol mol, uint fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t atomCounts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PatternFingerprintMol__SWIG_1(ROMol.getCPtr(mol), fpSize, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCounts));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect PatternFingerprintMol(ROMol mol, uint fpSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PatternFingerprintMol__SWIG_2(ROMol.getCPtr(mol), fpSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect PatternFingerprintMol(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.PatternFingerprintMol__SWIG_3(ROMol.getCPtr(mol));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t atomBits, SWIGTYPE_p_std__mapT_unsigned_long_std__vectorT_std__vectorT_int_t_t_std__lessT_unsigned_long_t_t bitInfo) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_0(ROMol.getCPtr(mol), minPath, maxPath, useHs, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t.getCPtr(atomBits), SWIGTYPE_p_std__mapT_unsigned_long_std__vectorT_std__vectorT_int_t_t_std__lessT_unsigned_long_t_t.getCPtr(bitInfo));
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t atomBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_1(ROMol.getCPtr(mol), minPath, maxPath, useHs, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_long_t_t.getCPtr(atomBits));
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_2(ROMol.getCPtr(mol), minPath, maxPath, useHs, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs, bool branchedPaths, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_3(ROMol.getCPtr(mol), minPath, maxPath, useHs, branchedPaths, useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants));
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs, bool branchedPaths, bool useBondOrder) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_4(ROMol.getCPtr(mol), minPath, maxPath, useHs, branchedPaths, useBondOrder);
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs, bool branchedPaths) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_5(ROMol.getCPtr(mol), minPath, maxPath, useHs, branchedPaths);
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath, bool useHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_6(ROMol.getCPtr(mol), minPath, maxPath, useHs);
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath, uint maxPath) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_7(ROMol.getCPtr(mol), minPath, maxPath);
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol, uint minPath) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_8(ROMol.getCPtr(mol), minPath);
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t getUnfoldedRDKFingerprintMol(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getUnfoldedRDKFingerprintMol__SWIG_9(ROMol.getCPtr(mol));
    SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_RDKit__SparseIntVectT_unsigned_long_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string maccsFingerprintVersion {
    get {
      string ret = RDKFuncsPINVOKE.maccsFingerprintVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ExplicitBitVect MACCSFingerprintMol(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MACCSFingerprintMol(ROMol.getCPtr(mol));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint numTypeBits {
    get {
      uint ret = RDKFuncsPINVOKE.numTypeBits_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SWIGTYPE_p_unsigned_int atomNumberTypes {
    get {
      global::System.IntPtr cPtr = RDKFuncsPINVOKE.atomNumberTypes_get();
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numPiBits {
    get {
      uint ret = RDKFuncsPINVOKE.numPiBits_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint maxNumPi {
    get {
      uint ret = RDKFuncsPINVOKE.maxNumPi_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numBranchBits {
    get {
      uint ret = RDKFuncsPINVOKE.numBranchBits_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint maxNumBranches {
    get {
      uint ret = RDKFuncsPINVOKE.maxNumBranches_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numChiralBits {
    get {
      uint ret = RDKFuncsPINVOKE.numChiralBits_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint codeSize {
    get {
      uint ret = RDKFuncsPINVOKE.codeSize_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numPathBits {
    get {
      uint ret = RDKFuncsPINVOKE.numPathBits_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint maxPathLen {
    get {
      uint ret = RDKFuncsPINVOKE.maxPathLen_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numAtomPairFingerprintBits {
    get {
      uint ret = RDKFuncsPINVOKE.numAtomPairFingerprintBits_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint getAtomCode(Atom atom, uint branchSubtract, bool includeChirality) {
    uint ret = RDKFuncsPINVOKE.getAtomCode__SWIG_0(Atom.getCPtr(atom), branchSubtract, includeChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getAtomCode(Atom atom, uint branchSubtract) {
    uint ret = RDKFuncsPINVOKE.getAtomCode__SWIG_1(Atom.getCPtr(atom), branchSubtract);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getAtomCode(Atom atom) {
    uint ret = RDKFuncsPINVOKE.getAtomCode__SWIG_2(Atom.getCPtr(atom));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getAtomPairCode(uint codeI, uint codeJ, uint dist, bool includeChirality) {
    uint ret = RDKFuncsPINVOKE.getAtomPairCode__SWIG_0(codeI, codeJ, dist, includeChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getAtomPairCode(uint codeI, uint codeJ, uint dist) {
    uint ret = RDKFuncsPINVOKE.getAtomPairCode__SWIG_1(codeI, codeJ, dist);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong getTopologicalTorsionCode(SWIGTYPE_p_std__vectorT_unsigned_int_t atomCodes, bool includeChirality) {
    ulong ret = RDKFuncsPINVOKE.getTopologicalTorsionCode__SWIG_0(SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCodes), includeChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong getTopologicalTorsionCode(SWIGTYPE_p_std__vectorT_unsigned_int_t atomCodes) {
    ulong ret = RDKFuncsPINVOKE.getTopologicalTorsionCode__SWIG_1(SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomCodes));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getTopologicalTorsionHash(SWIGTYPE_p_std__vectorT_unsigned_int_t pathCodes) {
    uint ret = RDKFuncsPINVOKE.getTopologicalTorsionHash(SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(pathCodes));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Str_Vect defaultFeatureSmarts {
    set {
      RDKFuncsPINVOKE.defaultFeatureSmarts_set(Str_Vect.getCPtr(value));
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = RDKFuncsPINVOKE.defaultFeatureSmarts_get();
      Str_Vect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Str_Vect(cPtr, false);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void getConnectivityInvariants(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t invars, bool includeRingMembership) {
    RDKFuncsPINVOKE.getConnectivityInvariants__SWIG_0(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invars), includeRingMembership);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void getConnectivityInvariants(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t invars) {
    RDKFuncsPINVOKE.getConnectivityInvariants__SWIG_1(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invars));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string morganConnectivityInvariantVersion {
    get {
      string ret = RDKFuncsPINVOKE.morganConnectivityInvariantVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void getFeatureInvariants(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t invars, SWIGTYPE_p_std__vectorT_RDKit__ROMol_const_p_t patterns) {
    RDKFuncsPINVOKE.getFeatureInvariants__SWIG_0(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invars), SWIGTYPE_p_std__vectorT_RDKit__ROMol_const_p_t.getCPtr(patterns));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void getFeatureInvariants(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t invars) {
    RDKFuncsPINVOKE.getFeatureInvariants__SWIG_1(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invars));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string morganFeatureInvariantVersion {
    get {
      string ret = RDKFuncsPINVOKE.morganFeatureInvariantVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void buildDefaultRDKitFingerprintAtomInvariants(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t lAtomInvariants) {
    RDKFuncsPINVOKE.buildDefaultRDKitFingerprintAtomInvariants(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(lAtomInvariants));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void identifyQueryBonds(ROMol mol, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bondCache, SWIGTYPE_p_std__vectorT_short_t isQueryBond) {
    RDKFuncsPINVOKE.identifyQueryBonds(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bondCache), SWIGTYPE_p_std__vectorT_short_t.getCPtr(isQueryBond));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_std__vectorT_unsigned_int_t generateBondHashes(ROMol mol, SWIGTYPE_p_boost__dynamic_bitsetT_t atomsInPath, SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t bondCache, SWIGTYPE_p_std__vectorT_short_t isQueryBond, Int_Vect path, bool useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t atomInvariants) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.generateBondHashes(ROMol.getCPtr(mol), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(atomsInPath), SWIGTYPE_p_std__vectorT_RDKit__Bond_const_p_t.getCPtr(bondCache), SWIGTYPE_p_std__vectorT_short_t.getCPtr(isQueryBond), Int_Vect.getCPtr(path), useBondOrder, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atomInvariants)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string morganFingerprintVersion {
    get {
      string ret = RDKFuncsPINVOKE.morganFingerprintVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool useCounts, bool onlyNonzeroInvariants, BitInfoMap atomsSettingBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_0(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, useCounts, onlyNonzeroInvariants, BitInfoMap.getCPtr(atomsSettingBits));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool useCounts, bool onlyNonzeroInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_1(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, useCounts, onlyNonzeroInvariants);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool useCounts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_2(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, useCounts);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_3(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_4(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_5(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_6(ROMol.getCPtr(mol), radius, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 MorganFingerprintMol(ROMol mol, uint radius) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MorganFingerprintMol__SWIG_7(ROMol.getCPtr(mol), radius);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool onlyNonzeroInvariants, BitInfoMap atomsSettingBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_0(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, onlyNonzeroInvariants, BitInfoMap.getCPtr(atomsSettingBits));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool onlyNonzeroInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_1(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, onlyNonzeroInvariants);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_2(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_3(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_4(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_5(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius, uint nBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_6(ROMol.getCPtr(mol), radius, nBits);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getHashedFingerprint(ROMol mol, uint radius) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getHashedFingerprint__SWIG_7(ROMol.getCPtr(mol), radius);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool onlyNonzeroInvariants, BitInfoMap atomsSettingBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_0(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, onlyNonzeroInvariants, BitInfoMap.getCPtr(atomsSettingBits));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes, bool onlyNonzeroInvariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_1(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes, onlyNonzeroInvariants);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality, bool useBondTypes) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_2(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality, useBondTypes);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_3(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms), useChirality);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants, SWIGTYPE_p_std__vectorT_unsigned_int_t fromAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_4(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(fromAtoms));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t invariants) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_5(ROMol.getCPtr(mol), radius, nBits, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(invariants));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect getMorganFingerprintAsBitVect(ROMol mol, uint radius, uint nBits) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getMorganFingerprintAsBitVect__SWIG_6(ROMol.getCPtr(mol), radius, nBits);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilarityEBV(ExplicitBitVect bv1, ExplicitBitVect bv2) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilarityEBV(ExplicitBitVect.getCPtr(bv1), ExplicitBitVect.getCPtr(bv2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVectu32 v1, SparseIntVectu32 v2, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_3(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVectu32 v1, SparseIntVectu32 v2, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_4(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVectu32 v1, SparseIntVectu32 v2) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_5(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVect32 v1, SparseIntVect32 v2, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_6(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVect32 v1, SparseIntVect32 v2, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_7(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVect32 v1, SparseIntVect32 v2) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_8(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVect64 v1, SparseIntVect64 v2, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_9(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVect64 v1, SparseIntVect64 v2, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_10(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double DiceSimilarity(SparseIntVect64 v1, SparseIntVect64 v2) {
    double ret = RDKFuncsPINVOKE.DiceSimilarity__SWIG_11(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVu32(SparseIntVectu32 v1, SparseIntVectu32 v2, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVu32__SWIG_0(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVu32(SparseIntVectu32 v1, SparseIntVectu32 v2, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVu32__SWIG_1(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVu32(SparseIntVectu32 v1, SparseIntVectu32 v2) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVu32__SWIG_2(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVi32(SparseIntVect32 v1, SparseIntVect32 v2, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVi32__SWIG_0(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVi32(SparseIntVect32 v1, SparseIntVect32 v2, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVi32__SWIG_1(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVi32(SparseIntVect32 v1, SparseIntVect32 v2) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVi32__SWIG_2(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVi64(SparseIntVect64 v1, SparseIntVect64 v2, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVi64__SWIG_0(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVi64(SparseIntVect64 v1, SparseIntVect64 v2, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVi64__SWIG_1(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TanimotoSimilaritySIVi64(SparseIntVect64 v1, SparseIntVect64 v2) {
    double ret = RDKFuncsPINVOKE.TanimotoSimilaritySIVi64__SWIG_2(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVectu32 v1, SparseIntVectu32 v2, double a, double b, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_3(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), a, b, returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVectu32 v1, SparseIntVectu32 v2, double a, double b, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_4(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), a, b, returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVectu32 v1, SparseIntVectu32 v2, double a, double b) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_5(SparseIntVectu32.getCPtr(v1), SparseIntVectu32.getCPtr(v2), a, b);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVect32 v1, SparseIntVect32 v2, double a, double b, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_6(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), a, b, returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVect32 v1, SparseIntVect32 v2, double a, double b, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_7(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), a, b, returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVect32 v1, SparseIntVect32 v2, double a, double b) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_8(SparseIntVect32.getCPtr(v1), SparseIntVect32.getCPtr(v2), a, b);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVect64 v1, SparseIntVect64 v2, double a, double b, bool returnDistance, double bounds) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_9(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), a, b, returnDistance, bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVect64 v1, SparseIntVect64 v2, double a, double b, bool returnDistance) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_10(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), a, b, returnDistance);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double TverskySimilarity(SparseIntVect64 v1, SparseIntVect64 v2, double a, double b) {
    double ret = RDKFuncsPINVOKE.TverskySimilarity__SWIG_11(SparseIntVect64.getCPtr(v1), SparseIntVect64.getCPtr(v2), a, b);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getFeatureFingerprint(ROMol mol, uint radius, bool useChirality, bool useBondTypes, bool useCounts) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getFeatureFingerprint__SWIG_0(ROMol.getCPtr(mol), radius, useChirality, useBondTypes, useCounts);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getFeatureFingerprint(ROMol mol, uint radius, bool useChirality, bool useBondTypes) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getFeatureFingerprint__SWIG_1(ROMol.getCPtr(mol), radius, useChirality, useBondTypes);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getFeatureFingerprint(ROMol mol, uint radius, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getFeatureFingerprint__SWIG_2(ROMol.getCPtr(mol), radius, useChirality);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 getFeatureFingerprint(ROMol mol, uint radius) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getFeatureFingerprint__SWIG_3(ROMol.getCPtr(mol), radius);
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ReactionFingerprintParams DefaultStructuralFPParams {
    get {
      global::System.IntPtr cPtr = RDKFuncsPINVOKE.DefaultStructuralFPParams_get();
      ReactionFingerprintParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ReactionFingerprintParams(cPtr, false);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ReactionFingerprintParams DefaultDifferenceFPParams {
    get {
      global::System.IntPtr cPtr = RDKFuncsPINVOKE.DefaultDifferenceFPParams_get();
      ReactionFingerprintParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new ReactionFingerprintParams(cPtr, false);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ExplicitBitVect StructuralFingerprintChemReaction(ChemicalReaction rxn, ReactionFingerprintParams arg1) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.StructuralFingerprintChemReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), ReactionFingerprintParams.getCPtr(arg1));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect StructuralFingerprintChemReaction(ChemicalReaction rxn) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.StructuralFingerprintChemReaction__SWIG_1(ChemicalReaction.getCPtr(rxn));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 DifferenceFingerprintChemReaction(ChemicalReaction rxn, ReactionFingerprintParams arg1) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DifferenceFingerprintChemReaction__SWIG_0(ChemicalReaction.getCPtr(rxn), ReactionFingerprintParams.getCPtr(arg1));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SparseIntVectu32 DifferenceFingerprintChemReaction(ChemicalReaction rxn) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DifferenceFingerprintChemReaction__SWIG_1(ChemicalReaction.getCPtr(rxn));
    SparseIntVectu32 ret = (cPtr == global::System.IntPtr.Zero) ? null : new SparseIntVectu32(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void pickFusedRings(int curr, Int_Int_Vect_Map neighMap, Int_Vect res, SWIGTYPE_p_boost__dynamic_bitsetT_t done, int depth) {
    RDKFuncsPINVOKE.pickFusedRings__SWIG_0(curr, Int_Int_Vect_Map.getCPtr(neighMap), Int_Vect.getCPtr(res), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(done), depth);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void pickFusedRings(int curr, Int_Int_Vect_Map neighMap, Int_Vect res, SWIGTYPE_p_boost__dynamic_bitsetT_t done) {
    RDKFuncsPINVOKE.pickFusedRings__SWIG_1(curr, Int_Int_Vect_Map.getCPtr(neighMap), Int_Vect.getCPtr(res), SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(done));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void makeRingNeighborMap(Int_Vect_Vect brings, Int_Int_Vect_Map neighMap, uint maxSize, uint maxOverlapSize) {
    RDKFuncsPINVOKE.makeRingNeighborMap__SWIG_0(Int_Vect_Vect.getCPtr(brings), Int_Int_Vect_Map.getCPtr(neighMap), maxSize, maxOverlapSize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void makeRingNeighborMap(Int_Vect_Vect brings, Int_Int_Vect_Map neighMap, uint maxSize) {
    RDKFuncsPINVOKE.makeRingNeighborMap__SWIG_1(Int_Vect_Vect.getCPtr(brings), Int_Int_Vect_Map.getCPtr(neighMap), maxSize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void makeRingNeighborMap(Int_Vect_Vect brings, Int_Int_Vect_Map neighMap) {
    RDKFuncsPINVOKE.makeRingNeighborMap__SWIG_2(Int_Vect_Vect.getCPtr(brings), Int_Int_Vect_Map.getCPtr(neighMap));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void convertToBonds(Int_Vect_Vect res, Int_Vect_Vect brings, ROMol mol) {
    RDKFuncsPINVOKE.convertToBonds(Int_Vect_Vect.getCPtr(res), Int_Vect_Vect.getCPtr(brings), ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint DIM_2D {
    get {
      uint ret = RDKFuncsPINVOKE.DIM_2D_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint DIM_3D {
    get {
      uint ret = RDKFuncsPINVOKE.DIM_3D_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void initBoundsMat(BoundsMatrix mmat, double defaultMin, double defaultMax) {
    RDKFuncsPINVOKE.initBoundsMat__SWIG_0(BoundsMatrix.getCPtr(mmat), defaultMin, defaultMax);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void initBoundsMat(BoundsMatrix mmat, double defaultMin) {
    RDKFuncsPINVOKE.initBoundsMat__SWIG_1(BoundsMatrix.getCPtr(mmat), defaultMin);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void initBoundsMat(BoundsMatrix mmat) {
    RDKFuncsPINVOKE.initBoundsMat__SWIG_2(BoundsMatrix.getCPtr(mmat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTopolBounds(ROMol mol, SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t mmat, bool set15bounds, bool scaleVDW) {
    RDKFuncsPINVOKE.setTopolBounds__SWIG_0(ROMol.getCPtr(mol), SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(mmat), set15bounds, scaleVDW);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTopolBounds(ROMol mol, SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t mmat, bool set15bounds) {
    RDKFuncsPINVOKE.setTopolBounds__SWIG_1(ROMol.getCPtr(mol), SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(mmat), set15bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTopolBounds(ROMol mol, SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t mmat) {
    RDKFuncsPINVOKE.setTopolBounds__SWIG_2(ROMol.getCPtr(mol), SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(mmat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTopolBounds(ROMol mol, SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t mmat, Match_Vect bonds, Int_Vect_Vect angles, bool set15bounds, bool scaleVDW) {
    RDKFuncsPINVOKE.setTopolBounds__SWIG_3(ROMol.getCPtr(mol), SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(mmat), Match_Vect.getCPtr(bonds), Int_Vect_Vect.getCPtr(angles), set15bounds, scaleVDW);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTopolBounds(ROMol mol, SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t mmat, Match_Vect bonds, Int_Vect_Vect angles, bool set15bounds) {
    RDKFuncsPINVOKE.setTopolBounds__SWIG_4(ROMol.getCPtr(mol), SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(mmat), Match_Vect.getCPtr(bonds), Int_Vect_Vect.getCPtr(angles), set15bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setTopolBounds(ROMol mol, SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t mmat, Match_Vect bonds, Int_Vect_Vect angles) {
    RDKFuncsPINVOKE.setTopolBounds__SWIG_5(ROMol.getCPtr(mol), SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(mmat), Match_Vect.getCPtr(bonds), Int_Vect_Vect.getCPtr(angles));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void collectBondsAndAngles(ROMol mol, Match_Vect bonds, Int_Vect_Vect angles) {
    RDKFuncsPINVOKE.collectBondsAndAngles(ROMol.getCPtr(mol), Match_Vect.getCPtr(bonds), Int_Vect_Vect.getCPtr(angles));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double pickRandomDistMat(BoundsMatrix mmat, DoubleSymmMatrix distmat, int seed) {
    double ret = RDKFuncsPINVOKE.pickRandomDistMat__SWIG_0(BoundsMatrix.getCPtr(mmat), DoubleSymmMatrix.getCPtr(distmat), seed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pickRandomDistMat(BoundsMatrix mmat, DoubleSymmMatrix distmat) {
    double ret = RDKFuncsPINVOKE.pickRandomDistMat__SWIG_1(BoundsMatrix.getCPtr(mmat), DoubleSymmMatrix.getCPtr(distmat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pickRandomDistMat(BoundsMatrix mmat, DoubleSymmMatrix distmat, SWIGTYPE_p_RDKit__double_source_type rng) {
    double ret = RDKFuncsPINVOKE.pickRandomDistMat__SWIG_2(BoundsMatrix.getCPtr(mmat), DoubleSymmMatrix.getCPtr(distmat), SWIGTYPE_p_RDKit__double_source_type.getCPtr(rng));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions, bool randNegEig, uint numZeroFail, int seed) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_0(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions), randNegEig, numZeroFail, seed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions, bool randNegEig, uint numZeroFail) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_1(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions), randNegEig, numZeroFail);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions, bool randNegEig) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_2(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions), randNegEig);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_3(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions, SWIGTYPE_p_RDKit__double_source_type rng, bool randNegEig, uint numZeroFail) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_4(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_RDKit__double_source_type.getCPtr(rng), randNegEig, numZeroFail);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions, SWIGTYPE_p_RDKit__double_source_type rng, bool randNegEig) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_5(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_RDKit__double_source_type.getCPtr(rng), randNegEig);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeInitialCoords(DoubleSymmMatrix distmat, Point_Vect positions, SWIGTYPE_p_RDKit__double_source_type rng) {
    bool ret = RDKFuncsPINVOKE.computeInitialCoords__SWIG_6(DoubleSymmMatrix.getCPtr(distmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_RDKit__double_source_type.getCPtr(rng));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeRandomCoords(Point_Vect positions, double boxSize, int seed) {
    bool ret = RDKFuncsPINVOKE.computeRandomCoords__SWIG_0(Point_Vect.getCPtr(positions), boxSize, seed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeRandomCoords(Point_Vect positions, double boxSize) {
    bool ret = RDKFuncsPINVOKE.computeRandomCoords__SWIG_1(Point_Vect.getCPtr(positions), boxSize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool computeRandomCoords(Point_Vect positions, double boxSize, SWIGTYPE_p_RDKit__double_source_type rng) {
    bool ret = RDKFuncsPINVOKE.computeRandomCoords__SWIG_2(Point_Vect.getCPtr(positions), boxSize, SWIGTYPE_p_RDKit__double_source_type.getCPtr(rng));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField construct3DForceField(BoundsMatrix mmat, Point3D_Vect positions, SWIGTYPE_p_ForceFields__CrystalFF__CrystalFFDetails etkdgDetails) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.construct3DForceField(BoundsMatrix.getCPtr(mmat), Point3D_Vect.getCPtr(positions), SWIGTYPE_p_ForceFields__CrystalFF__CrystalFFDetails.getCPtr(etkdgDetails));
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField constructPlain3DForceField(BoundsMatrix mmat, Point3D_Vect positions, SWIGTYPE_p_ForceFields__CrystalFF__CrystalFFDetails etkdgDetails) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.constructPlain3DForceField(BoundsMatrix.getCPtr(mmat), Point3D_Vect.getCPtr(positions), SWIGTYPE_p_ForceFields__CrystalFF__CrystalFFDetails.getCPtr(etkdgDetails));
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField construct3DImproperForceField(BoundsMatrix mmat, Point3D_Vect positions, Int_Vect_Vect improperAtoms, Int_Vect atomNums) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.construct3DImproperForceField(BoundsMatrix.getCPtr(mmat), Point3D_Vect.getCPtr(positions), Int_Vect_Vect.getCPtr(improperAtoms), Int_Vect.getCPtr(atomNums));
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool triangleSmoothBounds(BoundsMatrix boundsMat, double tol) {
    bool ret = RDKFuncsPINVOKE.triangleSmoothBounds__SWIG_0(BoundsMatrix.getCPtr(boundsMat), tol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool triangleSmoothBounds(BoundsMatrix boundsMat) {
    bool ret = RDKFuncsPINVOKE.triangleSmoothBounds__SWIG_1(BoundsMatrix.getCPtr(boundsMat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool triangleSmoothBounds(SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t boundsMat, double tol) {
    bool ret = RDKFuncsPINVOKE.triangleSmoothBounds__SWIG_2(SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(boundsMat), tol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool triangleSmoothBounds(SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t boundsMat) {
    bool ret = RDKFuncsPINVOKE.triangleSmoothBounds__SWIG_3(SWIGTYPE_p_boost__shared_ptrT_DistGeom__BoundsMatrix_t.getCPtr(boundsMat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmbedParameters getKDG() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getKDG();
    EmbedParameters ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmbedParameters(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmbedParameters getETDG() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getETDG();
    EmbedParameters ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmbedParameters(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmbedParameters getETKDG() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getETKDG();
    EmbedParameters ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmbedParameters(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmbedParameters getETKDGv2() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.getETKDGv2();
    EmbedParameters ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmbedParameters(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void normalizeAngleDeg(SWIGTYPE_p_double angleDeg) {
    RDKFuncsPINVOKE.normalizeAngleDeg(SWIGTYPE_p_double.getCPtr(angleDeg));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point_Vect pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r, Point3D t, SWIGTYPE_p_double d) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_0(Point_Vect.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r), Point3D.getCPtr(t), SWIGTYPE_p_double.getCPtr(d));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point_Vect pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r, Point3D t) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_1(Point_Vect.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r), Point3D.getCPtr(t));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point_Vect pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_2(Point_Vect.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point_Vect pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_3(Point_Vect.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point_Vect pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_4(Point_Vect.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point_Vect pos, uint idx1, uint idx2, uint idx3, uint idx4) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_5(Point_Vect.getCPtr(pos), idx1, idx2, idx3, idx4);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(SWIGTYPE_p_double pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r, Point3D t, SWIGTYPE_p_double d) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_6(SWIGTYPE_p_double.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r), Point3D.getCPtr(t), SWIGTYPE_p_double.getCPtr(d));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(SWIGTYPE_p_double pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r, Point3D t) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_7(SWIGTYPE_p_double.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r), Point3D.getCPtr(t));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(SWIGTYPE_p_double pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_8(SWIGTYPE_p_double.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(SWIGTYPE_p_double pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_9(SWIGTYPE_p_double.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(SWIGTYPE_p_double pos, uint idx1, uint idx2, uint idx3, uint idx4, SWIGTYPE_p_double dihedral) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_10(SWIGTYPE_p_double.getCPtr(pos), idx1, idx2, idx3, idx4, SWIGTYPE_p_double.getCPtr(dihedral));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(SWIGTYPE_p_double pos, uint idx1, uint idx2, uint idx3, uint idx4) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_11(SWIGTYPE_p_double.getCPtr(pos), idx1, idx2, idx3, idx4);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point3D p1, Point3D p2, Point3D p3, Point3D p4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r, Point3D t, SWIGTYPE_p_double d) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_12(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4), SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r), Point3D.getCPtr(t), SWIGTYPE_p_double.getCPtr(d));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point3D p1, Point3D p2, Point3D p3, Point3D p4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r, Point3D t) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_13(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4), SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r), Point3D.getCPtr(t));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point3D p1, Point3D p2, Point3D p3, Point3D p4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi, Point3D r) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_14(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4), SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi), Point3D.getCPtr(r));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point3D p1, Point3D p2, Point3D p3, Point3D p4, SWIGTYPE_p_double dihedral, SWIGTYPE_p_double cosPhi) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_15(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4), SWIGTYPE_p_double.getCPtr(dihedral), SWIGTYPE_p_double.getCPtr(cosPhi));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point3D p1, Point3D p2, Point3D p3, Point3D p4, SWIGTYPE_p_double dihedral) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_16(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4), SWIGTYPE_p_double.getCPtr(dihedral));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void computeDihedral(Point3D p1, Point3D p2, Point3D p3, Point3D p4) {
    RDKFuncsPINVOKE.computeDihedral__SWIG_17(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double DEG2RAD {
    get {
      double ret = RDKFuncsPINVOKE.DEG2RAD_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double RAD2DEG {
    get {
      double ret = RDKFuncsPINVOKE.RAD2DEG_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool isDoubleZero(double x) {
    bool ret = RDKFuncsPINVOKE.isDoubleZero(x);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void clipToOne(SWIGTYPE_p_double x) {
    RDKFuncsPINVOKE.clipToOne(SWIGTYPE_p_double.getCPtr(x));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double lambda {
    get {
      double ret = RDKFuncsPINVOKE.lambda_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double G {
    get {
      double ret = RDKFuncsPINVOKE.G_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double amideBondOrder {
    get {
      double ret = RDKFuncsPINVOKE.amideBondOrder_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcAngleForceConstant(double theta0, double bondOrder12, double bondOrder23, AtomicParams at1Params, AtomicParams at2Params, AtomicParams at3Params) {
    double ret = RDKFuncsPINVOKE.calcAngleForceConstant(theta0, bondOrder12, bondOrder23, AtomicParams.getCPtr(at1Params), AtomicParams.getCPtr(at2Params), AtomicParams.getCPtr(at3Params));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void calcAngleBendGrad(Point3D r, SWIGTYPE_p_double dist, SWIGTYPE_p_p_double g, SWIGTYPE_p_double dE_dTheta, SWIGTYPE_p_double cosTheta, SWIGTYPE_p_double sinTheta) {
    RDKFuncsPINVOKE.calcAngleBendGrad(Point3D.getCPtr(r), SWIGTYPE_p_double.getCPtr(dist), SWIGTYPE_p_p_double.getCPtr(g), SWIGTYPE_p_double.getCPtr(dE_dTheta), SWIGTYPE_p_double.getCPtr(cosTheta), SWIGTYPE_p_double.getCPtr(sinTheta));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double calcBondRestLength(double bondOrder, AtomicParams end1Params, AtomicParams end2Params) {
    double ret = RDKFuncsPINVOKE.calcBondRestLength(bondOrder, AtomicParams.getCPtr(end1Params), AtomicParams.getCPtr(end2Params));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcBondForceConstant(double restLength, AtomicParams end1Params, AtomicParams end2Params) {
    double ret = RDKFuncsPINVOKE.calcBondForceConstant(restLength, AtomicParams.getCPtr(end1Params), AtomicParams.getCPtr(end2Params));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcNonbondedMinimum(AtomicParams at1Params, AtomicParams at2Params) {
    double ret = RDKFuncsPINVOKE.calcNonbondedMinimum(AtomicParams.getCPtr(at1Params), AtomicParams.getCPtr(at2Params));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcNonbondedDepth(AtomicParams at1Params, AtomicParams at2Params) {
    double ret = RDKFuncsPINVOKE.calcNonbondedDepth(AtomicParams.getCPtr(at1Params), AtomicParams.getCPtr(at2Params));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calculateCosTorsion(Point3D p1, Point3D p2, Point3D p3, Point3D p4) {
    double ret = RDKFuncsPINVOKE.calculateCosTorsion(Point3D.getCPtr(p1), Point3D.getCPtr(p2), Point3D.getCPtr(p3), Point3D.getCPtr(p4));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void calcTorsionGrad(Point3D r, Point3D t, SWIGTYPE_p_double d, SWIGTYPE_p_p_double g, SWIGTYPE_p_double sinTerm, SWIGTYPE_p_double cosPhi) {
    RDKFuncsPINVOKE.calcTorsionGrad(Point3D.getCPtr(r), Point3D.getCPtr(t), SWIGTYPE_p_double.getCPtr(d), SWIGTYPE_p_p_double.getCPtr(g), SWIGTYPE_p_double.getCPtr(sinTerm), SWIGTYPE_p_double.getCPtr(cosPhi));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double equation17(double bondOrder23, AtomicParams at2Params, AtomicParams at3Params) {
    double ret = RDKFuncsPINVOKE.equation17(bondOrder23, AtomicParams.getCPtr(at2Params), AtomicParams.getCPtr(at3Params));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isInGroup6(int num) {
    bool ret = RDKFuncsPINVOKE.isInGroup6(num);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calculateCosY(Point3D iPoint, Point3D jPoint, Point3D kPoint, Point3D lPoint) {
    double ret = RDKFuncsPINVOKE.calculateCosY(Point3D.getCPtr(iPoint), Point3D.getCPtr(jPoint), Point3D.getCPtr(kPoint), Point3D.getCPtr(lPoint));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_boost__tupleT_double_double_double_double_t calcInversionCoefficientsAndForceConstant(int at2AtomicNum, bool isCBoundToO) {
    SWIGTYPE_p_boost__tupleT_double_double_double_double_t ret = new SWIGTYPE_p_boost__tupleT_double_double_double_double_t(RDKFuncsPINVOKE.calcInversionCoefficientsAndForceConstant(at2AtomicNum, isCBoundToO), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol deleteSubstructs(ROMol mol, ROMol query, bool onlyFrags, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.deleteSubstructs__SWIG_0(ROMol.getCPtr(mol), ROMol.getCPtr(query), onlyFrags, useChirality);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol deleteSubstructs(ROMol mol, ROMol query, bool onlyFrags) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.deleteSubstructs__SWIG_1(ROMol.getCPtr(mol), ROMol.getCPtr(query), onlyFrags);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol deleteSubstructs(ROMol mol, ROMol query) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.deleteSubstructs__SWIG_2(ROMol.getCPtr(mol), ROMol.getCPtr(query));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect replaceSubstructs(ROMol mol, ROMol query, ROMol replacement, bool replaceAll, uint replacementConnectionPoint, bool useChirality) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.replaceSubstructs__SWIG_0(ROMol.getCPtr(mol), ROMol.getCPtr(query), ROMol.getCPtr(replacement), replaceAll, replacementConnectionPoint, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect replaceSubstructs(ROMol mol, ROMol query, ROMol replacement, bool replaceAll, uint replacementConnectionPoint) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.replaceSubstructs__SWIG_1(ROMol.getCPtr(mol), ROMol.getCPtr(query), ROMol.getCPtr(replacement), replaceAll, replacementConnectionPoint), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect replaceSubstructs(ROMol mol, ROMol query, ROMol replacement, bool replaceAll) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.replaceSubstructs__SWIG_2(ROMol.getCPtr(mol), ROMol.getCPtr(query), ROMol.getCPtr(replacement), replaceAll), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol_Vect replaceSubstructs(ROMol mol, ROMol query, ROMol replacement) {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.replaceSubstructs__SWIG_3(ROMol.getCPtr(mol), ROMol.getCPtr(query), ROMol.getCPtr(replacement)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceSidechains(ROMol mol, ROMol coreQuery, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceSidechains__SWIG_0(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery), useChirality);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceSidechains(ROMol mol, ROMol coreQuery) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceSidechains__SWIG_1(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol core, Match_Vect matchVect, bool replaceDummies, bool labelByIndex, bool requireDummyMatch) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_0(ROMol.getCPtr(mol), ROMol.getCPtr(core), Match_Vect.getCPtr(matchVect), replaceDummies, labelByIndex, requireDummyMatch);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol core, Match_Vect matchVect, bool replaceDummies, bool labelByIndex) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_1(ROMol.getCPtr(mol), ROMol.getCPtr(core), Match_Vect.getCPtr(matchVect), replaceDummies, labelByIndex);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol core, Match_Vect matchVect, bool replaceDummies) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_2(ROMol.getCPtr(mol), ROMol.getCPtr(core), Match_Vect.getCPtr(matchVect), replaceDummies);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol core, Match_Vect matchVect) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_3(ROMol.getCPtr(mol), ROMol.getCPtr(core), Match_Vect.getCPtr(matchVect));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol coreQuery, bool replaceDummies, bool labelByIndex, bool requireDummyMatch, bool useChirality) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_4(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery), replaceDummies, labelByIndex, requireDummyMatch, useChirality);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol coreQuery, bool replaceDummies, bool labelByIndex, bool requireDummyMatch) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_5(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery), replaceDummies, labelByIndex, requireDummyMatch);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol coreQuery, bool replaceDummies, bool labelByIndex) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_6(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery), replaceDummies, labelByIndex);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol coreQuery, bool replaceDummies) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_7(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery), replaceDummies);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol replaceCore(ROMol mol, ROMol coreQuery) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.replaceCore__SWIG_8(ROMol.getCPtr(mol), ROMol.getCPtr(coreQuery));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol MurckoDecompose(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.MurckoDecompose(ROMol.getCPtr(mol));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol combineMols(ROMol mol1, ROMol mol2, Point3D offset) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.combineMols__SWIG_0(ROMol.getCPtr(mol1), ROMol.getCPtr(mol2), Point3D.getCPtr(offset));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol combineMols(ROMol mol1, ROMol mol2) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.combineMols__SWIG_1(ROMol.getCPtr(mol1), ROMol.getCPtr(mol2));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void addRecursiveQueries(ROMol mol, StringMolMap queries, string propName, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_t reactantLabels) {
    RDKFuncsPINVOKE.addRecursiveQueries__SWIG_0(ROMol.getCPtr(mol), StringMolMap.getCPtr(queries), propName, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_t.getCPtr(reactantLabels));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void addRecursiveQueries(ROMol mol, StringMolMap queries, string propName) {
    RDKFuncsPINVOKE.addRecursiveQueries__SWIG_1(ROMol.getCPtr(mol), StringMolMap.getCPtr(queries), propName);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(string filename, StringMolMap queryDefs, bool standardize, string delimiter, string comment, uint nameColumn, uint smartsColumn) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_0(filename, StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment, nameColumn, smartsColumn);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(string filename, StringMolMap queryDefs, bool standardize, string delimiter, string comment, uint nameColumn) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_1(filename, StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment, nameColumn);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(string filename, StringMolMap queryDefs, bool standardize, string delimiter, string comment) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_2(filename, StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(string filename, StringMolMap queryDefs, bool standardize, string delimiter) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_3(filename, StringMolMap.getCPtr(queryDefs), standardize, delimiter);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(string filename, StringMolMap queryDefs, bool standardize) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_4(filename, StringMolMap.getCPtr(queryDefs), standardize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(string filename, StringMolMap queryDefs) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_5(filename, StringMolMap.getCPtr(queryDefs));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(SWIGTYPE_p_std__istream inStream, StringMolMap queryDefs, bool standardize, string delimiter, string comment, uint nameColumn, uint smartsColumn) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_6(SWIGTYPE_p_std__istream.getCPtr(inStream), StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment, nameColumn, smartsColumn);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(SWIGTYPE_p_std__istream inStream, StringMolMap queryDefs, bool standardize, string delimiter, string comment, uint nameColumn) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_7(SWIGTYPE_p_std__istream.getCPtr(inStream), StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment, nameColumn);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(SWIGTYPE_p_std__istream inStream, StringMolMap queryDefs, bool standardize, string delimiter, string comment) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_8(SWIGTYPE_p_std__istream.getCPtr(inStream), StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(SWIGTYPE_p_std__istream inStream, StringMolMap queryDefs, bool standardize, string delimiter) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_9(SWIGTYPE_p_std__istream.getCPtr(inStream), StringMolMap.getCPtr(queryDefs), standardize, delimiter);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(SWIGTYPE_p_std__istream inStream, StringMolMap queryDefs, bool standardize) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_10(SWIGTYPE_p_std__istream.getCPtr(inStream), StringMolMap.getCPtr(queryDefs), standardize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefFile(SWIGTYPE_p_std__istream inStream, StringMolMap queryDefs) {
    RDKFuncsPINVOKE.parseQueryDefFile__SWIG_11(SWIGTYPE_p_std__istream.getCPtr(inStream), StringMolMap.getCPtr(queryDefs));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefText(string queryDefText, StringMolMap queryDefs, bool standardize, string delimiter, string comment, uint nameColumn, uint smartsColumn) {
    RDKFuncsPINVOKE.parseQueryDefText__SWIG_0(queryDefText, StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment, nameColumn, smartsColumn);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefText(string queryDefText, StringMolMap queryDefs, bool standardize, string delimiter, string comment, uint nameColumn) {
    RDKFuncsPINVOKE.parseQueryDefText__SWIG_1(queryDefText, StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment, nameColumn);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefText(string queryDefText, StringMolMap queryDefs, bool standardize, string delimiter, string comment) {
    RDKFuncsPINVOKE.parseQueryDefText__SWIG_2(queryDefText, StringMolMap.getCPtr(queryDefs), standardize, delimiter, comment);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefText(string queryDefText, StringMolMap queryDefs, bool standardize, string delimiter) {
    RDKFuncsPINVOKE.parseQueryDefText__SWIG_3(queryDefText, StringMolMap.getCPtr(queryDefs), standardize, delimiter);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefText(string queryDefText, StringMolMap queryDefs, bool standardize) {
    RDKFuncsPINVOKE.parseQueryDefText__SWIG_4(queryDefText, StringMolMap.getCPtr(queryDefs), standardize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void parseQueryDefText(string queryDefText, StringMolMap queryDefs) {
    RDKFuncsPINVOKE.parseQueryDefText__SWIG_5(queryDefText, StringMolMap.getCPtr(queryDefs));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ROMol fragmentOnBRICSBonds(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.fragmentOnBRICSBonds(ROMol.getCPtr(mol));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllSubgraphsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen, bool useHs, int rootedAtAtom) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllSubgraphsOfLengthsMtoN__SWIG_0(ROMol.getCPtr(mol), lowerLen, upperLen, useHs, rootedAtAtom), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllSubgraphsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen, bool useHs) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllSubgraphsOfLengthsMtoN__SWIG_1(ROMol.getCPtr(mol), lowerLen, upperLen, useHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllSubgraphsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllSubgraphsOfLengthsMtoN__SWIG_2(ROMol.getCPtr(mol), lowerLen, upperLen), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllSubgraphsOfLengthN(ROMol mol, uint targetLen, bool useHs, int rootedAtAtom) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllSubgraphsOfLengthN__SWIG_0(ROMol.getCPtr(mol), targetLen, useHs, rootedAtAtom), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllSubgraphsOfLengthN(ROMol mol, uint targetLen, bool useHs) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllSubgraphsOfLengthN__SWIG_1(ROMol.getCPtr(mol), targetLen, useHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllSubgraphsOfLengthN(ROMol mol, uint targetLen) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllSubgraphsOfLengthN__SWIG_2(ROMol.getCPtr(mol), targetLen), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findUniqueSubgraphsOfLengthN(ROMol mol, uint targetLen, bool useHs, bool useBO, int rootedAtAtom) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findUniqueSubgraphsOfLengthN__SWIG_0(ROMol.getCPtr(mol), targetLen, useHs, useBO, rootedAtAtom), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findUniqueSubgraphsOfLengthN(ROMol mol, uint targetLen, bool useHs, bool useBO) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findUniqueSubgraphsOfLengthN__SWIG_1(ROMol.getCPtr(mol), targetLen, useHs, useBO), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findUniqueSubgraphsOfLengthN(ROMol mol, uint targetLen, bool useHs) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findUniqueSubgraphsOfLengthN__SWIG_2(ROMol.getCPtr(mol), targetLen, useHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findUniqueSubgraphsOfLengthN(ROMol mol, uint targetLen) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findUniqueSubgraphsOfLengthN__SWIG_3(ROMol.getCPtr(mol), targetLen), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllPathsOfLengthN(ROMol mol, uint targetLen, bool useBonds, bool useHs, int rootedAtAtom) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllPathsOfLengthN__SWIG_0(ROMol.getCPtr(mol), targetLen, useBonds, useHs, rootedAtAtom), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllPathsOfLengthN(ROMol mol, uint targetLen, bool useBonds, bool useHs) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllPathsOfLengthN__SWIG_1(ROMol.getCPtr(mol), targetLen, useBonds, useHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllPathsOfLengthN(ROMol mol, uint targetLen, bool useBonds) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllPathsOfLengthN__SWIG_2(ROMol.getCPtr(mol), targetLen, useBonds), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List findAllPathsOfLengthN(ROMol mol, uint targetLen) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.findAllPathsOfLengthN__SWIG_3(ROMol.getCPtr(mol), targetLen), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllPathsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen, bool useBonds, bool useHs, int rootedAtAtom) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllPathsOfLengthsMtoN__SWIG_0(ROMol.getCPtr(mol), lowerLen, upperLen, useBonds, useHs, rootedAtAtom), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllPathsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen, bool useBonds, bool useHs) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllPathsOfLengthsMtoN__SWIG_1(ROMol.getCPtr(mol), lowerLen, upperLen, useBonds, useHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllPathsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen, bool useBonds) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllPathsOfLengthsMtoN__SWIG_2(ROMol.getCPtr(mol), lowerLen, upperLen, useBonds), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Int_Vect_List_Map findAllPathsOfLengthsMtoN(ROMol mol, uint lowerLen, uint upperLen) {
    Int_Int_Vect_List_Map ret = new Int_Int_Vect_List_Map(RDKFuncsPINVOKE.findAllPathsOfLengthsMtoN__SWIG_3(ROMol.getCPtr(mol), lowerLen, upperLen), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect findAtomEnvironmentOfRadiusN(ROMol mol, uint radius, uint rootedAtAtom, bool useHs) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.findAtomEnvironmentOfRadiusN__SWIG_0(ROMol.getCPtr(mol), radius, rootedAtAtom, useHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect findAtomEnvironmentOfRadiusN(ROMol mol, uint radius, uint rootedAtAtom) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.findAtomEnvironmentOfRadiusN__SWIG_1(ROMol.getCPtr(mol), radius, rootedAtAtom), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect calcPathDiscriminators(ROMol mol, Int_Vect path) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.calcPathDiscriminators(ROMol.getCPtr(mol), Int_Vect.getCPtr(path)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List uniquifyPaths(ROMol mol, Int_Vect_List allPathsb, bool useBO) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.uniquifyPaths__SWIG_0(ROMol.getCPtr(mol), Int_Vect_List.getCPtr(allPathsb), useBO), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect_List uniquifyPaths(ROMol mol, Int_Vect_List allPathsb) {
    Int_Vect_List ret = new Int_Vect_List(RDKFuncsPINVOKE.uniquifyPaths__SWIG_1(ROMol.getCPtr(mol), Int_Vect_List.getCPtr(allPathsb)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect bondListFromAtomList(ROMol mol, Int_Vect atomIds) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.bondListFromAtomList(ROMol.getCPtr(mol), Int_Vect.getCPtr(atomIds)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol pathToSubmol(ROMol mol, Int_Vect path, bool useQuery, Int_Int_Map atomIdxMap) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.pathToSubmol__SWIG_0(ROMol.getCPtr(mol), Int_Vect.getCPtr(path), useQuery, Int_Int_Map.getCPtr(atomIdxMap));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol pathToSubmol(ROMol mol, Int_Vect path, bool useQuery) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.pathToSubmol__SWIG_1(ROMol.getCPtr(mol), Int_Vect.getCPtr(path), useQuery);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol pathToSubmol(ROMol mol, Int_Vect path) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.pathToSubmol__SWIG_2(ROMol.getCPtr(mol), Int_Vect.getCPtr(path));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void transformMolsAtoms(ROMol mol, Transform3D tform) {
    RDKFuncsPINVOKE.transformMolsAtoms(ROMol.getCPtr(mol), Transform3D.getCPtr(tform));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void transformAtom(Atom atom, Transform3D tform) {
    RDKFuncsPINVOKE.transformAtom(Atom.getCPtr(atom), Transform3D.getCPtr(tform));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Point3D computeCentroid(Conformer conf, bool ignoreHs) {
    Point3D ret = new Point3D(RDKFuncsPINVOKE.computeCentroid__SWIG_0(Conformer.getCPtr(conf), ignoreHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Point3D computeCentroid(Conformer conf) {
    Point3D ret = new Point3D(RDKFuncsPINVOKE.computeCentroid__SWIG_1(Conformer.getCPtr(conf)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Transform3D computeCanonicalTransform(Conformer conf, Point3D center, bool normalizeCovar, bool ignoreHs) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.computeCanonicalTransform__SWIG_0(Conformer.getCPtr(conf), Point3D.getCPtr(center), normalizeCovar, ignoreHs);
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Transform3D computeCanonicalTransform(Conformer conf, Point3D center, bool normalizeCovar) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.computeCanonicalTransform__SWIG_1(Conformer.getCPtr(conf), Point3D.getCPtr(center), normalizeCovar);
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Transform3D computeCanonicalTransform(Conformer conf, Point3D center) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.computeCanonicalTransform__SWIG_2(Conformer.getCPtr(conf), Point3D.getCPtr(center));
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Transform3D computeCanonicalTransform(Conformer conf) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.computeCanonicalTransform__SWIG_3(Conformer.getCPtr(conf));
    Transform3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform3D(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void transformConformer(Conformer conf, Transform3D trans) {
    RDKFuncsPINVOKE.transformConformer(Conformer.getCPtr(conf), Transform3D.getCPtr(trans));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeConformer(Conformer conf, Point3D center, bool normalizeCovar, bool ignoreHs) {
    RDKFuncsPINVOKE.canonicalizeConformer__SWIG_0(Conformer.getCPtr(conf), Point3D.getCPtr(center), normalizeCovar, ignoreHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeConformer(Conformer conf, Point3D center, bool normalizeCovar) {
    RDKFuncsPINVOKE.canonicalizeConformer__SWIG_1(Conformer.getCPtr(conf), Point3D.getCPtr(center), normalizeCovar);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeConformer(Conformer conf, Point3D center) {
    RDKFuncsPINVOKE.canonicalizeConformer__SWIG_2(Conformer.getCPtr(conf), Point3D.getCPtr(center));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeConformer(Conformer conf) {
    RDKFuncsPINVOKE.canonicalizeConformer__SWIG_3(Conformer.getCPtr(conf));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeMol(ROMol mol, bool normalizeCovar, bool ignoreHs) {
    RDKFuncsPINVOKE.canonicalizeMol__SWIG_0(ROMol.getCPtr(mol), normalizeCovar, ignoreHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeMol(ROMol mol, bool normalizeCovar) {
    RDKFuncsPINVOKE.canonicalizeMol__SWIG_1(ROMol.getCPtr(mol), normalizeCovar);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void canonicalizeMol(ROMol mol) {
    RDKFuncsPINVOKE.canonicalizeMol__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double getBondLength(Conformer conf, uint iAtomId, uint jAtomId) {
    double ret = RDKFuncsPINVOKE.getBondLength(Conformer.getCPtr(conf), iAtomId, jAtomId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setBondLength(Conformer conf, uint iAtomId, uint jAtomId, double value) {
    RDKFuncsPINVOKE.setBondLength(Conformer.getCPtr(conf), iAtomId, jAtomId, value);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double getAngleRad(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId) {
    double ret = RDKFuncsPINVOKE.getAngleRad(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getAngleDeg(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId) {
    double ret = RDKFuncsPINVOKE.getAngleDeg(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setAngleRad(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId, double value) {
    RDKFuncsPINVOKE.setAngleRad(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId, value);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setAngleDeg(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId, double value) {
    RDKFuncsPINVOKE.setAngleDeg(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId, value);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double getDihedralRad(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId, uint lAtomId) {
    double ret = RDKFuncsPINVOKE.getDihedralRad(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId, lAtomId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getDihedralDeg(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId, uint lAtomId) {
    double ret = RDKFuncsPINVOKE.getDihedralDeg(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId, lAtomId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setDihedralRad(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId, uint lAtomId, double value) {
    RDKFuncsPINVOKE.setDihedralRad(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId, lAtomId, value);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void setDihedralDeg(Conformer conf, uint iAtomId, uint jAtomId, uint kAtomId, uint lAtomId, double value) {
    RDKFuncsPINVOKE.setDihedralDeg(Conformer.getCPtr(conf), iAtomId, jAtomId, kAtomId, lAtomId, value);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool MCSAtomCompareAny(MCSAtomCompareParameters p, ROMol mol1, uint atom1, ROMol mol2, uint atom2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSAtomCompareAny(MCSAtomCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), atom1, ROMol.getCPtr(mol2), atom2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSAtomCompareAnyHeavyAtom(MCSAtomCompareParameters p, ROMol mol1, uint atom1, ROMol mol2, uint atom2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSAtomCompareAnyHeavyAtom(MCSAtomCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), atom1, ROMol.getCPtr(mol2), atom2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSAtomCompareElements(MCSAtomCompareParameters p, ROMol mol1, uint atom1, ROMol mol2, uint atom2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSAtomCompareElements(MCSAtomCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), atom1, ROMol.getCPtr(mol2), atom2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSAtomCompareIsotopes(MCSAtomCompareParameters p, ROMol mol1, uint atom1, ROMol mol2, uint atom2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSAtomCompareIsotopes(MCSAtomCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), atom1, ROMol.getCPtr(mol2), atom2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSBondCompareAny(MCSBondCompareParameters p, ROMol mol1, uint bond1, ROMol mol2, uint bond2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSBondCompareAny(MCSBondCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), bond1, ROMol.getCPtr(mol2), bond2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSBondCompareOrder(MCSBondCompareParameters p, ROMol mol1, uint bond1, ROMol mol2, uint bond2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSBondCompareOrder(MCSBondCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), bond1, ROMol.getCPtr(mol2), bond2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSBondCompareOrderExact(MCSBondCompareParameters p, ROMol mol1, uint bond1, ROMol mol2, uint bond2, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSBondCompareOrderExact(MCSBondCompareParameters.getCPtr(p), ROMol.getCPtr(mol1), bond1, ROMol.getCPtr(mol2), bond2, SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MCSProgressCallbackTimeout(MCSProgressData stat, SWIGTYPE_p_RDKit__MCSParameters arg1, SWIGTYPE_p_void userData) {
    bool ret = RDKFuncsPINVOKE.MCSProgressCallbackTimeout(MCSProgressData.getCPtr(stat), SWIGTYPE_p_RDKit__MCSParameters.getCPtr(arg1), SWIGTYPE_p_void.getCPtr(userData));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void parseMCSParametersJSON(string json, SWIGTYPE_p_RDKit__MCSParameters arg1) {
    RDKFuncsPINVOKE.parseMCSParametersJSON(json, SWIGTYPE_p_RDKit__MCSParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static MCSResult findMCS(ROMol_Vect mols) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_0(ROMol_Vect.getCPtr(mols)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS_P(ROMol_Vect mols, string params_json) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS_P(ROMol_Vect.getCPtr(mols), params_json), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences, bool ringMatchesRingOnly, bool completeRingsOnly, bool matchChiralTag, AtomComparator atomComp, BondComparator bondComp, RingComparator ringComp) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_1(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences, ringMatchesRingOnly, completeRingsOnly, matchChiralTag, (int)atomComp, (int)bondComp, (int)ringComp), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences, bool ringMatchesRingOnly, bool completeRingsOnly, bool matchChiralTag, AtomComparator atomComp, BondComparator bondComp) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_2(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences, ringMatchesRingOnly, completeRingsOnly, matchChiralTag, (int)atomComp, (int)bondComp), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences, bool ringMatchesRingOnly, bool completeRingsOnly, bool matchChiralTag, AtomComparator atomComp) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_3(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences, ringMatchesRingOnly, completeRingsOnly, matchChiralTag, (int)atomComp), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences, bool ringMatchesRingOnly, bool completeRingsOnly, bool matchChiralTag) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_4(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences, ringMatchesRingOnly, completeRingsOnly, matchChiralTag), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences, bool ringMatchesRingOnly, bool completeRingsOnly) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_5(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences, ringMatchesRingOnly, completeRingsOnly), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences, bool ringMatchesRingOnly) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_6(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences, ringMatchesRingOnly), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose, bool matchValences) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_7(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose, matchValences), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout, bool verbose) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_8(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout, verbose), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold, uint timeout) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_9(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold, timeout), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds, double threshold) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_10(ROMol_Vect.getCPtr(mols), maximizeBonds, threshold), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MCSResult findMCS(ROMol_Vect mols, bool maximizeBonds) {
    MCSResult ret = new MCSResult(RDKFuncsPINVOKE.findMCS__SWIG_11(ROMol_Vect.getCPtr(mols), maximizeBonds), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void assignDefaultPalette(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t palette) {
    RDKFuncsPINVOKE.assignDefaultPalette(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(palette));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void assignBWPalette(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t palette) {
    RDKFuncsPINVOKE.assignBWPalette(SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(palette));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareMolForDrawing(RWMol mol, bool kekulize, bool addChiralHs, bool wedgeBonds, bool forceCoords) {
    RDKFuncsPINVOKE.prepareMolForDrawing__SWIG_0(RWMol.getCPtr(mol), kekulize, addChiralHs, wedgeBonds, forceCoords);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareMolForDrawing(RWMol mol, bool kekulize, bool addChiralHs, bool wedgeBonds) {
    RDKFuncsPINVOKE.prepareMolForDrawing__SWIG_1(RWMol.getCPtr(mol), kekulize, addChiralHs, wedgeBonds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareMolForDrawing(RWMol mol, bool kekulize, bool addChiralHs) {
    RDKFuncsPINVOKE.prepareMolForDrawing__SWIG_2(RWMol.getCPtr(mol), kekulize, addChiralHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareMolForDrawing(RWMol mol, bool kekulize) {
    RDKFuncsPINVOKE.prepareMolForDrawing__SWIG_3(RWMol.getCPtr(mol), kekulize);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareMolForDrawing(RWMol mol) {
    RDKFuncsPINVOKE.prepareMolForDrawing__SWIG_4(RWMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map, Int_Double_Map highlight_radii, int confId) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_0(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map), Int_Double_Map.getCPtr(highlight_radii), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map, Int_Double_Map highlight_radii) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_1(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map), Int_Double_Map.getCPtr(highlight_radii));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_bond_map) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_2(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_bond_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds, SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t highlight_atom_map) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_3(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds), SWIGTYPE_p_std__mapT_int_RDKit__DrawColour_std__lessT_int_t_t.getCPtr(highlight_atom_map));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend, Int_Vect highlight_atoms, Int_Vect highlight_bonds) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_4(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms), Int_Vect.getCPtr(highlight_bonds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend, Int_Vect highlight_atoms) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_5(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend, Int_Vect.getCPtr(highlight_atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol, string legend) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_6(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol), legend);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void prepareAndDrawMolecule(MolDraw2D drawer, ROMol mol) {
    RDKFuncsPINVOKE.prepareAndDrawMolecule__SWIG_7(MolDraw2D.getCPtr(drawer), ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void updateDrawerParamsFromJSON(MolDraw2D drawer, string json) {
    RDKFuncsPINVOKE.updateDrawerParamsFromJSON__SWIG_0(MolDraw2D.getCPtr(drawer), json);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGrid(MolDraw2D drawer, SWIGTYPE_p_double grid, Double_Vect xcoords, Double_Vect ycoords, uint nContours, Double_Vect levels, ContourParams ps) {
    RDKFuncsPINVOKE.contourAndDrawGrid__SWIG_0(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_double.getCPtr(grid), Double_Vect.getCPtr(xcoords), Double_Vect.getCPtr(ycoords), nContours, Double_Vect.getCPtr(levels), ContourParams.getCPtr(ps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGrid(MolDraw2D drawer, SWIGTYPE_p_double grid, Double_Vect xcoords, Double_Vect ycoords, uint nContours, Double_Vect levels) {
    RDKFuncsPINVOKE.contourAndDrawGrid__SWIG_1(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_double.getCPtr(grid), Double_Vect.getCPtr(xcoords), Double_Vect.getCPtr(ycoords), nContours, Double_Vect.getCPtr(levels));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGrid(MolDraw2D drawer, SWIGTYPE_p_double grid, Double_Vect xcoords, Double_Vect ycoords, uint nContours, ContourParams ps) {
    RDKFuncsPINVOKE.contourAndDrawGrid__SWIG_2(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_double.getCPtr(grid), Double_Vect.getCPtr(xcoords), Double_Vect.getCPtr(ycoords), nContours, ContourParams.getCPtr(ps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGrid(MolDraw2D drawer, SWIGTYPE_p_double grid, Double_Vect xcoords, Double_Vect ycoords, uint nContours) {
    RDKFuncsPINVOKE.contourAndDrawGrid__SWIG_3(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_double.getCPtr(grid), Double_Vect.getCPtr(xcoords), Double_Vect.getCPtr(ycoords), nContours);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGrid(MolDraw2D drawer, SWIGTYPE_p_double grid, Double_Vect xcoords, Double_Vect ycoords) {
    RDKFuncsPINVOKE.contourAndDrawGrid__SWIG_4(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_double.getCPtr(grid), Double_Vect.getCPtr(xcoords), Double_Vect.getCPtr(ycoords));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGaussians(MolDraw2D drawer, SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t locs, Double_Vect heights, Double_Vect widths, uint nContours, Double_Vect levels, ContourParams ps) {
    RDKFuncsPINVOKE.contourAndDrawGaussians__SWIG_0(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t.getCPtr(locs), Double_Vect.getCPtr(heights), Double_Vect.getCPtr(widths), nContours, Double_Vect.getCPtr(levels), ContourParams.getCPtr(ps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGaussians(MolDraw2D drawer, SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t locs, Double_Vect heights, Double_Vect widths, uint nContours, Double_Vect levels) {
    RDKFuncsPINVOKE.contourAndDrawGaussians__SWIG_1(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t.getCPtr(locs), Double_Vect.getCPtr(heights), Double_Vect.getCPtr(widths), nContours, Double_Vect.getCPtr(levels));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGaussians(MolDraw2D drawer, SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t locs, Double_Vect heights, Double_Vect widths, uint nContours, ContourParams ps) {
    RDKFuncsPINVOKE.contourAndDrawGaussians__SWIG_2(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t.getCPtr(locs), Double_Vect.getCPtr(heights), Double_Vect.getCPtr(widths), nContours, ContourParams.getCPtr(ps));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGaussians(MolDraw2D drawer, SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t locs, Double_Vect heights, Double_Vect widths, uint nContours) {
    RDKFuncsPINVOKE.contourAndDrawGaussians__SWIG_3(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t.getCPtr(locs), Double_Vect.getCPtr(heights), Double_Vect.getCPtr(widths), nContours);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void contourAndDrawGaussians(MolDraw2D drawer, SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t locs, Double_Vect heights, Double_Vect widths) {
    RDKFuncsPINVOKE.contourAndDrawGaussians__SWIG_4(MolDraw2D.getCPtr(drawer), SWIGTYPE_p_std__vectorT_RDGeom__Point2D_t.getCPtr(locs), Double_Vect.getCPtr(heights), Double_Vect.getCPtr(widths));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int versionMajor {
    get {
      int ret = RDKFuncsPINVOKE.versionMajor_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int versionMinor {
    get {
      int ret = RDKFuncsPINVOKE.versionMinor_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int versionPatch {
    get {
      int ret = RDKFuncsPINVOKE.versionPatch_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int endianId {
    get {
      int ret = RDKFuncsPINVOKE.endianId_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string DEFAULT_FILTERMATCHERBASE_NAME {
    set {
      RDKFuncsPINVOKE.DEFAULT_FILTERMATCHERBASE_NAME_set(value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RDKFuncsPINVOKE.DEFAULT_FILTERMATCHERBASE_NAME_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool FilterCatalogCanSerialize() {
    bool ret = RDKFuncsPINVOKE.FilterCatalogCanSerialize();
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FilterCatalogEntry_VectVect RunFilterCatalog(FilterCatalog filterCatalog, Str_Vect smiles, int numThreads) {
    FilterCatalogEntry_VectVect ret = new FilterCatalogEntry_VectVect(RDKFuncsPINVOKE.RunFilterCatalog__SWIG_0(FilterCatalog.getCPtr(filterCatalog), Str_Vect.getCPtr(smiles), numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FilterCatalogEntry_VectVect RunFilterCatalog(FilterCatalog filterCatalog, Str_Vect smiles) {
    FilterCatalogEntry_VectVect ret = new FilterCatalogEntry_VectVect(RDKFuncsPINVOKE.RunFilterCatalog__SWIG_1(FilterCatalog.getCPtr(filterCatalog), Str_Vect.getCPtr(smiles)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint readAmberTrajectory(string fName, Trajectory traj) {
    uint ret = RDKFuncsPINVOKE.readAmberTrajectory(fName, Trajectory.getCPtr(traj));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint readGromosTrajectory(string fName, Trajectory traj) {
    uint ret = RDKFuncsPINVOKE.readGromosTrajectory(fName, Trajectory.getCPtr(traj));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SubstructLibraryCanSerialize() {
    bool ret = RDKFuncsPINVOKE.SubstructLibraryCanSerialize();
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string MolHash(RWMol mol, HashFunction func) {
    string ret = RDKFuncsPINVOKE.MolHash(RWMol.getCPtr(mol), (int)func);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Strip(RWMol mol, uint striptype) {
    RDKFuncsPINVOKE.Strip(RWMol.getCPtr(mol), striptype);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SplitMolecule(RWMol mol, SWIGTYPE_p_std__vectorT_RDKit__RWMol_p_t molv) {
    RDKFuncsPINVOKE.SplitMolecule(RWMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_RDKit__RWMol_p_t.getCPtr(molv));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string amwVersion {
    get {
      string ret = RDKFuncsPINVOKE.amwVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcAMW(ROMol mol, bool onlyHeavy) {
    double ret = RDKFuncsPINVOKE.calcAMW__SWIG_0(ROMol.getCPtr(mol), onlyHeavy);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcAMW(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcAMW__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string exactmwVersion {
    get {
      string ret = RDKFuncsPINVOKE.exactmwVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcExactMW(ROMol mol, bool onlyHeavy) {
    double ret = RDKFuncsPINVOKE.calcExactMW__SWIG_0(ROMol.getCPtr(mol), onlyHeavy);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcExactMW(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcExactMW__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string calcMolFormula(ROMol mol, bool separateIsotopes, bool abbreviateHIsotopes) {
    string ret = RDKFuncsPINVOKE.calcMolFormula__SWIG_0(ROMol.getCPtr(mol), separateIsotopes, abbreviateHIsotopes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string calcMolFormula(ROMol mol, bool separateIsotopes) {
    string ret = RDKFuncsPINVOKE.calcMolFormula__SWIG_1(ROMol.getCPtr(mol), separateIsotopes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string calcMolFormula(ROMol mol) {
    string ret = RDKFuncsPINVOKE.calcMolFormula__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string lipinskiHBAVersion {
    get {
      string ret = RDKFuncsPINVOKE.lipinskiHBAVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcLipinskiHBA(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcLipinskiHBA(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string lipinskiHBDVersion {
    get {
      string ret = RDKFuncsPINVOKE.lipinskiHBDVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcLipinskiHBD(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcLipinskiHBD(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumRotatableBondsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumRotatableBondsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumRotatableBonds(ROMol mol, NumRotatableBondsOptions useStrictDefinition) {
    uint ret = RDKFuncsPINVOKE.calcNumRotatableBonds__SWIG_0(ROMol.getCPtr(mol), (int)useStrictDefinition);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint calcNumRotatableBonds(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumRotatableBonds__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint calcNumRotatableBonds(ROMol mol, bool strict) {
    uint ret = RDKFuncsPINVOKE.calcNumRotatableBonds__SWIG_2(ROMol.getCPtr(mol), strict);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumHBDVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumHBDVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumHBD(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumHBD(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumHBAVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumHBAVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumHBA(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumHBA(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumHeteroatomsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumHeteroatomsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumHeteroatoms(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumHeteroatoms(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAmideBondsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAmideBondsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAmideBonds(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAmideBonds(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FractionCSP3Version {
    get {
      string ret = RDKFuncsPINVOKE.FractionCSP3Version_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcFractionCSP3(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcFractionCSP3(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumRingsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumRingsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumRings(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumRings(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAromaticRingsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAromaticRingsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAromaticRings(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAromaticRings(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAliphaticRingsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAliphaticRingsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAliphaticRings(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAliphaticRings(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumSaturatedRingsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumSaturatedRingsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumSaturatedRings(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumSaturatedRings(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumHeterocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumHeterocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumHeterocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumHeterocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAromaticHeterocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAromaticHeterocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAromaticHeterocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAromaticHeterocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAromaticCarbocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAromaticCarbocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAromaticCarbocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAromaticCarbocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumSaturatedHeterocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumSaturatedHeterocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumSaturatedHeterocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumSaturatedHeterocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumSaturatedCarbocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumSaturatedCarbocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumSaturatedCarbocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumSaturatedCarbocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAliphaticHeterocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAliphaticHeterocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAliphaticHeterocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAliphaticHeterocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAliphaticCarbocyclesVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAliphaticCarbocyclesVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumAliphaticCarbocycles(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumAliphaticCarbocycles(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumSpiroAtomsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumSpiroAtomsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumSpiroAtoms(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atoms) {
    uint ret = RDKFuncsPINVOKE.calcNumSpiroAtoms__SWIG_0(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint calcNumSpiroAtoms(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumSpiroAtoms__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumBridgeheadAtomsVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumBridgeheadAtomsVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint calcNumBridgeheadAtoms(ROMol mol, SWIGTYPE_p_std__vectorT_unsigned_int_t atoms) {
    uint ret = RDKFuncsPINVOKE.calcNumBridgeheadAtoms__SWIG_0(ROMol.getCPtr(mol), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint calcNumBridgeheadAtoms(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.calcNumBridgeheadAtoms__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumAtomStereoCentersVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumAtomStereoCentersVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numAtomStereoCenters(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.numAtomStereoCenters(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NumUnspecifiedAtomStereoCentersVersion {
    get {
      string ret = RDKFuncsPINVOKE.NumUnspecifiedAtomStereoCentersVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint numUnspecifiedAtomStereoCenters(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.numUnspecifiedAtomStereoCenters(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void registerDescriptors() {
    RDKFuncsPINVOKE.registerDescriptors();
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string labuteASAVersion {
    get {
      string ret = RDKFuncsPINVOKE.labuteASAVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double getLabuteAtomContribs(ROMol mol, Double_Vect Vi, SWIGTYPE_p_double hContrib, bool includeHs, bool force) {
    double ret = RDKFuncsPINVOKE.getLabuteAtomContribs__SWIG_0(ROMol.getCPtr(mol), Double_Vect.getCPtr(Vi), SWIGTYPE_p_double.getCPtr(hContrib), includeHs, force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLabuteAtomContribs(ROMol mol, Double_Vect Vi, SWIGTYPE_p_double hContrib, bool includeHs) {
    double ret = RDKFuncsPINVOKE.getLabuteAtomContribs__SWIG_1(ROMol.getCPtr(mol), Double_Vect.getCPtr(Vi), SWIGTYPE_p_double.getCPtr(hContrib), includeHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getLabuteAtomContribs(ROMol mol, Double_Vect Vi, SWIGTYPE_p_double hContrib) {
    double ret = RDKFuncsPINVOKE.getLabuteAtomContribs__SWIG_2(ROMol.getCPtr(mol), Double_Vect.getCPtr(Vi), SWIGTYPE_p_double.getCPtr(hContrib));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcLabuteASA(ROMol mol, bool includeHs, bool force) {
    double ret = RDKFuncsPINVOKE.calcLabuteASA__SWIG_0(ROMol.getCPtr(mol), includeHs, force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcLabuteASA(ROMol mol, bool includeHs) {
    double ret = RDKFuncsPINVOKE.calcLabuteASA__SWIG_1(ROMol.getCPtr(mol), includeHs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcLabuteASA(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcLabuteASA__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string tpsaVersion {
    get {
      string ret = RDKFuncsPINVOKE.tpsaVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double getTPSAAtomContribs(ROMol mol, Double_Vect Vi, bool force, bool includeSandP) {
    double ret = RDKFuncsPINVOKE.getTPSAAtomContribs__SWIG_0(ROMol.getCPtr(mol), Double_Vect.getCPtr(Vi), force, includeSandP);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getTPSAAtomContribs(ROMol mol, Double_Vect Vi, bool force) {
    double ret = RDKFuncsPINVOKE.getTPSAAtomContribs__SWIG_1(ROMol.getCPtr(mol), Double_Vect.getCPtr(Vi), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getTPSAAtomContribs(ROMol mol, Double_Vect Vi) {
    double ret = RDKFuncsPINVOKE.getTPSAAtomContribs__SWIG_2(ROMol.getCPtr(mol), Double_Vect.getCPtr(Vi));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcTPSA(ROMol mol, bool force, bool includeSandP) {
    double ret = RDKFuncsPINVOKE.calcTPSA__SWIG_0(ROMol.getCPtr(mol), force, includeSandP);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcTPSA(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcTPSA__SWIG_1(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcTPSA(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcTPSA__SWIG_2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcSlogP_VSA(ROMol mol, Double_Vect bins, bool force) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcSlogP_VSA__SWIG_0(ROMol.getCPtr(mol), Double_Vect.getCPtr(bins), force), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcSlogP_VSA(ROMol mol, Double_Vect bins) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcSlogP_VSA__SWIG_1(ROMol.getCPtr(mol), Double_Vect.getCPtr(bins)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcSlogP_VSA(ROMol mol) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcSlogP_VSA__SWIG_2(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcSMR_VSA(ROMol mol, Double_Vect bins, bool force) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcSMR_VSA__SWIG_0(ROMol.getCPtr(mol), Double_Vect.getCPtr(bins), force), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcSMR_VSA(ROMol mol, Double_Vect bins) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcSMR_VSA__SWIG_1(ROMol.getCPtr(mol), Double_Vect.getCPtr(bins)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcSMR_VSA(ROMol mol) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcSMR_VSA__SWIG_2(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcPEOE_VSA(ROMol mol, Double_Vect bins, bool force) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcPEOE_VSA__SWIG_0(ROMol.getCPtr(mol), Double_Vect.getCPtr(bins), force), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcPEOE_VSA(ROMol mol, Double_Vect bins) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcPEOE_VSA__SWIG_1(ROMol.getCPtr(mol), Double_Vect.getCPtr(bins)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcPEOE_VSA(ROMol mol) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcPEOE_VSA__SWIG_2(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcCustomProp_VSA(ROMol mol, string customPropName, Double_Vect bins, bool force) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcCustomProp_VSA__SWIG_0(ROMol.getCPtr(mol), customPropName, Double_Vect.getCPtr(bins), force), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Vect calcCustomProp_VSA(ROMol mol, string customPropName, Double_Vect bins) {
    Double_Vect ret = new Double_Vect(RDKFuncsPINVOKE.calcCustomProp_VSA__SWIG_1(ROMol.getCPtr(mol), customPropName, Double_Vect.getCPtr(bins)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi0v(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi0v__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi0v(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi0v__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi0vVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi0vVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi1v(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi1v__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi1v(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi1v__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi1vVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi1vVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi2v(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi2v__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi2v(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi2v__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi2vVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi2vVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi3v(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi3v__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi3v(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi3v__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi3vVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi3vVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi4v(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi4v__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi4v(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi4v__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi4vVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi4vVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChiNv(ROMol mol, uint n, bool force) {
    double ret = RDKFuncsPINVOKE.calcChiNv__SWIG_0(ROMol.getCPtr(mol), n, force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChiNv(ROMol mol, uint n) {
    double ret = RDKFuncsPINVOKE.calcChiNv__SWIG_1(ROMol.getCPtr(mol), n);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chiNvVersion {
    get {
      string ret = RDKFuncsPINVOKE.chiNvVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi0n(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi0n__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi0n(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi0n__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi0nVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi0nVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi1n(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi1n__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi1n(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi1n__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi1nVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi1nVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi2n(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi2n__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi2n(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi2n__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi2nVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi2nVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi3n(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi3n__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi3n(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi3n__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi3nVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi3nVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChi4n(ROMol mol, bool force) {
    double ret = RDKFuncsPINVOKE.calcChi4n__SWIG_0(ROMol.getCPtr(mol), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChi4n(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcChi4n__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chi4nVersion {
    get {
      string ret = RDKFuncsPINVOKE.chi4nVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcChiNn(ROMol mol, uint n, bool force) {
    double ret = RDKFuncsPINVOKE.calcChiNn__SWIG_0(ROMol.getCPtr(mol), n, force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcChiNn(ROMol mol, uint n) {
    double ret = RDKFuncsPINVOKE.calcChiNn__SWIG_1(ROMol.getCPtr(mol), n);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string chiNnVersion {
    get {
      string ret = RDKFuncsPINVOKE.chiNnVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcHallKierAlpha(ROMol mol, Double_Vect atomContribs) {
    double ret = RDKFuncsPINVOKE.calcHallKierAlpha__SWIG_0(ROMol.getCPtr(mol), Double_Vect.getCPtr(atomContribs));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcHallKierAlpha(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcHallKierAlpha__SWIG_1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string hallKierAlphaVersion {
    get {
      string ret = RDKFuncsPINVOKE.hallKierAlphaVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcKappa1(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcKappa1(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string kappa1Version {
    get {
      string ret = RDKFuncsPINVOKE.kappa1Version_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcKappa2(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcKappa2(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string kappa2Version {
    get {
      string ret = RDKFuncsPINVOKE.kappa2Version_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double calcKappa3(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcKappa3(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string kappa3Version {
    get {
      string ret = RDKFuncsPINVOKE.kappa3Version_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void hkDeltas(ROMol mol, Double_Vect deltas, bool force) {
    RDKFuncsPINVOKE.hkDeltas(ROMol.getCPtr(mol), Double_Vect.getCPtr(deltas), force);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string MQNVersion {
    get {
      string ret = RDKFuncsPINVOKE.MQNVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__vectorT_unsigned_int_t calcMQNs(ROMol mol, bool force) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.calcMQNs__SWIG_0(ROMol.getCPtr(mol), force), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__vectorT_unsigned_int_t calcMQNs(ROMol mol) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(RDKFuncsPINVOKE.calcMQNs__SWIG_1(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Pair calcCrippenDescriptors(ROMol mol, bool includeHs, bool force) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.calcCrippenDescriptors__SWIG_0(ROMol.getCPtr(mol), includeHs, force), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Pair calcCrippenDescriptors(ROMol mol, bool includeHs) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.calcCrippenDescriptors__SWIG_1(ROMol.getCPtr(mol), includeHs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Double_Pair calcCrippenDescriptors(ROMol mol) {
    Double_Pair ret = new Double_Pair(RDKFuncsPINVOKE.calcCrippenDescriptors__SWIG_2(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcMolLogP(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcMolLogP(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double calcMolMR(ROMol mol) {
    double ret = RDKFuncsPINVOKE.calcMolMR(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect pickUsingFingerprints(EBV_Vect ebvs, uint nToPick, int seed, Int_Vect firstPicks, bool useCache) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.pickUsingFingerprints__SWIG_0(EBV_Vect.getCPtr(ebvs), nToPick, seed, Int_Vect.getCPtr(firstPicks), useCache), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect pickUsingFingerprints(EBV_Vect ebvs, uint nToPick, int seed, Int_Vect firstPicks) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.pickUsingFingerprints__SWIG_1(EBV_Vect.getCPtr(ebvs), nToPick, seed, Int_Vect.getCPtr(firstPicks)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect pickUsingFingerprints(EBV_Vect ebvs, uint nToPick, int seed) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.pickUsingFingerprints__SWIG_2(EBV_Vect.getCPtr(ebvs), nToPick, seed), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect pickUsingFingerprints(EBV_Vect ebvs, uint nToPick) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.pickUsingFingerprints__SWIG_3(EBV_Vect.getCPtr(ebvs), nToPick), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string rdkitVersion {
    set {
      RDKFuncsPINVOKE.rdkitVersion_set(value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RDKFuncsPINVOKE.rdkitVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string boostVersion {
    set {
      RDKFuncsPINVOKE.boostVersion_set(value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RDKFuncsPINVOKE.boostVersion_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string rdkitBuild {
    set {
      RDKFuncsPINVOKE.rdkitBuild_set(value);
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RDKFuncsPINVOKE.rdkitBuild_get();
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly double M_PI = RDKFuncsPINVOKE.M_PI_get();
  public static readonly int RDKIT_VERSION = RDKFuncsPINVOKE.RDKIT_VERSION_get();
}

}
