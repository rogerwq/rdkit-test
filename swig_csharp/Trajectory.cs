//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class Trajectory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Trajectory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Trajectory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Trajectory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_Trajectory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Trajectory(uint dimension, uint numPoints, SWIGTYPE_p_std__vectorT_RDKit__Snapshot_t snapshotVect) : this(RDKFuncsPINVOKE.new_Trajectory__SWIG_0(dimension, numPoints, SWIGTYPE_p_std__vectorT_RDKit__Snapshot_t.getCPtr(snapshotVect)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Trajectory(uint dimension, uint numPoints) : this(RDKFuncsPINVOKE.new_Trajectory__SWIG_1(dimension, numPoints), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Trajectory(Trajectory other) : this(RDKFuncsPINVOKE.new_Trajectory__SWIG_2(Trajectory.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint dimension() {
    uint ret = RDKFuncsPINVOKE.Trajectory_dimension(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numPoints() {
    uint ret = RDKFuncsPINVOKE.Trajectory_numPoints(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint size() {
    uint ret = RDKFuncsPINVOKE.Trajectory_size(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addSnapshot(Snapshot s) {
    uint ret = RDKFuncsPINVOKE.Trajectory_addSnapshot(swigCPtr, Snapshot.getCPtr(s));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Snapshot getSnapshot(uint snapshotNum) {
    Snapshot ret = new Snapshot(RDKFuncsPINVOKE.Trajectory_getSnapshot(swigCPtr, snapshotNum), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint insertSnapshot(uint snapshotNum, Snapshot s) {
    uint ret = RDKFuncsPINVOKE.Trajectory_insertSnapshot(swigCPtr, snapshotNum, Snapshot.getCPtr(s));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint removeSnapshot(uint snapshotNum) {
    uint ret = RDKFuncsPINVOKE.Trajectory_removeSnapshot(swigCPtr, snapshotNum);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear() {
    RDKFuncsPINVOKE.Trajectory_clear(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint addConformersToMol(ROMol mol, int from, int to) {
    uint ret = RDKFuncsPINVOKE.Trajectory_addConformersToMol__SWIG_0(swigCPtr, ROMol.getCPtr(mol), from, to);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addConformersToMol(ROMol mol, int from) {
    uint ret = RDKFuncsPINVOKE.Trajectory_addConformersToMol__SWIG_1(swigCPtr, ROMol.getCPtr(mol), from);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addConformersToMol(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.Trajectory_addConformersToMol__SWIG_2(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
