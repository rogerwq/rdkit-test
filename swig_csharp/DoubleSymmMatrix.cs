//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class DoubleSymmMatrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DoubleSymmMatrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleSymmMatrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DoubleSymmMatrix() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_DoubleSymmMatrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DoubleSymmMatrix(uint N) : this(RDKFuncsPINVOKE.new_DoubleSymmMatrix__SWIG_0(N), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleSymmMatrix(uint N, double val) : this(RDKFuncsPINVOKE.new_DoubleSymmMatrix__SWIG_1(N, val), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleSymmMatrix(uint N, Shared_Double_Array data) : this(RDKFuncsPINVOKE.new_DoubleSymmMatrix__SWIG_2(N, Shared_Double_Array.getCPtr(data)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleSymmMatrix(DoubleSymmMatrix other) : this(RDKFuncsPINVOKE.new_DoubleSymmMatrix__SWIG_3(DoubleSymmMatrix.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint numRows() {
    uint ret = RDKFuncsPINVOKE.DoubleSymmMatrix_numRows(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numCols() {
    uint ret = RDKFuncsPINVOKE.DoubleSymmMatrix_numCols(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getDataSize() {
    uint ret = RDKFuncsPINVOKE.DoubleSymmMatrix_getDataSize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setToIdentity() {
    RDKFuncsPINVOKE.DoubleSymmMatrix_setToIdentity(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getVal(uint i, uint j) {
    double ret = RDKFuncsPINVOKE.DoubleSymmMatrix_getVal(swigCPtr, i, j);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVal(uint i, uint j, double val) {
    RDKFuncsPINVOKE.DoubleSymmMatrix_setVal(swigCPtr, i, j, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getRow(uint i, SWIGTYPE_p_RDNumeric__VectorT_double_t row) {
    RDKFuncsPINVOKE.DoubleSymmMatrix_getRow(swigCPtr, i, SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(row));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getCol(uint i, SWIGTYPE_p_RDNumeric__VectorT_double_t col) {
    RDKFuncsPINVOKE.DoubleSymmMatrix_getCol(swigCPtr, i, SWIGTYPE_p_RDNumeric__VectorT_double_t.getCPtr(col));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double getData() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DoubleSymmMatrix_getData__SWIG_0(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleSymmMatrix transpose(DoubleSymmMatrix transpose) {
    DoubleSymmMatrix ret = new DoubleSymmMatrix(RDKFuncsPINVOKE.DoubleSymmMatrix_transpose(swigCPtr, DoubleSymmMatrix.getCPtr(transpose)), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleSymmMatrix transposeInplace() {
    DoubleSymmMatrix ret = new DoubleSymmMatrix(RDKFuncsPINVOKE.DoubleSymmMatrix_transposeInplace(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
