//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class InversionContrib : ForceFieldContrib {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal InversionContrib(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.InversionContrib_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InversionContrib obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~InversionContrib() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_InversionContrib(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public InversionContrib() : this(RDKFuncsPINVOKE.new_InversionContrib__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public InversionContrib(ForceField owner, uint idx1, uint idx2, uint idx3, uint idx4, int at2AtomicNum, bool isCBoundToO, double oobForceScalingFactor) : this(RDKFuncsPINVOKE.new_InversionContrib__SWIG_1(ForceField.getCPtr(owner), idx1, idx2, idx3, idx4, at2AtomicNum, isCBoundToO, oobForceScalingFactor), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public InversionContrib(ForceField owner, uint idx1, uint idx2, uint idx3, uint idx4, int at2AtomicNum, bool isCBoundToO) : this(RDKFuncsPINVOKE.new_InversionContrib__SWIG_2(ForceField.getCPtr(owner), idx1, idx2, idx3, idx4, at2AtomicNum, isCBoundToO), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override double getEnergy(SWIGTYPE_p_double pos) {
    double ret = RDKFuncsPINVOKE.InversionContrib_getEnergy(swigCPtr, SWIGTYPE_p_double.getCPtr(pos));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void getGrad(SWIGTYPE_p_double pos, SWIGTYPE_p_double grad) {
    RDKFuncsPINVOKE.InversionContrib_getGrad(swigCPtr, SWIGTYPE_p_double.getCPtr(pos), SWIGTYPE_p_double.getCPtr(grad));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ForceFieldContrib copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.InversionContrib_copy(swigCPtr);
    InversionContrib ret = (cPtr == global::System.IntPtr.Zero) ? null : new InversionContrib(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
