//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class ChemicalReaction : RDProps {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChemicalReaction(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.ChemicalReaction_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChemicalReaction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChemicalReaction() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_ChemicalReaction(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ChemicalReaction() : this(RDKFuncsPINVOKE.new_ChemicalReaction__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChemicalReaction(ChemicalReaction other) : this(RDKFuncsPINVOKE.new_ChemicalReaction__SWIG_1(ChemicalReaction.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChemicalReaction(string binStr) : this(RDKFuncsPINVOKE.new_ChemicalReaction__SWIG_2(binStr), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint addReactantTemplate(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.ChemicalReaction_addReactantTemplate(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addAgentTemplate(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.ChemicalReaction_addAgentTemplate(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addProductTemplate(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.ChemicalReaction_addProductTemplate(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeUnmappedReactantTemplates(double thresholdUnmappedAtoms, bool moveToAgentTemplates, ROMol_Vect targetVector) {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedReactantTemplates__SWIG_0(swigCPtr, thresholdUnmappedAtoms, moveToAgentTemplates, ROMol_Vect.getCPtr(targetVector));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedReactantTemplates(double thresholdUnmappedAtoms, bool moveToAgentTemplates) {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedReactantTemplates__SWIG_1(swigCPtr, thresholdUnmappedAtoms, moveToAgentTemplates);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedReactantTemplates(double thresholdUnmappedAtoms) {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedReactantTemplates__SWIG_2(swigCPtr, thresholdUnmappedAtoms);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedReactantTemplates() {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedReactantTemplates__SWIG_3(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedProductTemplates(double thresholdUnmappedAtoms, bool moveToAgentTemplates, ROMol_Vect targetVector) {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedProductTemplates__SWIG_0(swigCPtr, thresholdUnmappedAtoms, moveToAgentTemplates, ROMol_Vect.getCPtr(targetVector));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedProductTemplates(double thresholdUnmappedAtoms, bool moveToAgentTemplates) {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedProductTemplates__SWIG_1(swigCPtr, thresholdUnmappedAtoms, moveToAgentTemplates);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedProductTemplates(double thresholdUnmappedAtoms) {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedProductTemplates__SWIG_2(swigCPtr, thresholdUnmappedAtoms);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeUnmappedProductTemplates() {
    RDKFuncsPINVOKE.ChemicalReaction_removeUnmappedProductTemplates__SWIG_3(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAgentTemplates(ROMol_Vect targetVector) {
    RDKFuncsPINVOKE.ChemicalReaction_removeAgentTemplates__SWIG_0(swigCPtr, ROMol_Vect.getCPtr(targetVector));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAgentTemplates() {
    RDKFuncsPINVOKE.ChemicalReaction_removeAgentTemplates__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ROMol_Vect_Vect runReactants(ROMol_Vect reactants, uint numProducts) {
    ROMol_Vect_Vect ret = new ROMol_Vect_Vect(RDKFuncsPINVOKE.ChemicalReaction_runReactants__SWIG_0(swigCPtr, ROMol_Vect.getCPtr(reactants), numProducts), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect_Vect runReactants(ROMol_Vect reactants) {
    ROMol_Vect_Vect ret = new ROMol_Vect_Vect(RDKFuncsPINVOKE.ChemicalReaction_runReactants__SWIG_1(swigCPtr, ROMol_Vect.getCPtr(reactants)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect_Vect runReactant(ROMol reactant, uint reactantTemplateIdx) {
    ROMol_Vect_Vect ret = new ROMol_Vect_Vect(RDKFuncsPINVOKE.ChemicalReaction_runReactant(swigCPtr, ROMol.getCPtr(reactant), reactantTemplateIdx), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect getReactants() {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.ChemicalReaction_getReactants(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect getAgents() {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.ChemicalReaction_getAgents(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect getProducts() {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.ChemicalReaction_getProducts(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator beginReactantTemplates() {
    SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator(RDKFuncsPINVOKE.ChemicalReaction_beginReactantTemplates__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator endReactantTemplates() {
    SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator(RDKFuncsPINVOKE.ChemicalReaction_endReactantTemplates__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator beginProductTemplates() {
    SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator(RDKFuncsPINVOKE.ChemicalReaction_beginProductTemplates__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator endProductTemplates() {
    SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator(RDKFuncsPINVOKE.ChemicalReaction_endProductTemplates__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator beginAgentTemplates() {
    SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator(RDKFuncsPINVOKE.ChemicalReaction_beginAgentTemplates__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator endAgentTemplates() {
    SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator ret = new SWIGTYPE_p_std__vectorT_boost__shared_ptrT_RDKit__ROMol_t_t__const_iterator(RDKFuncsPINVOKE.ChemicalReaction_endAgentTemplates__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumReactantTemplates() {
    uint ret = RDKFuncsPINVOKE.ChemicalReaction_getNumReactantTemplates(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumProductTemplates() {
    uint ret = RDKFuncsPINVOKE.ChemicalReaction_getNumProductTemplates(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNumAgentTemplates() {
    uint ret = RDKFuncsPINVOKE.ChemicalReaction_getNumAgentTemplates(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void initReactantMatchers() {
    RDKFuncsPINVOKE.ChemicalReaction_initReactantMatchers(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isInitialized() {
    bool ret = RDKFuncsPINVOKE.ChemicalReaction_isInitialized(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validate(SWIGTYPE_p_unsigned_int numWarnings, SWIGTYPE_p_unsigned_int numErrors, bool silent) {
    bool ret = RDKFuncsPINVOKE.ChemicalReaction_validate__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(numWarnings), SWIGTYPE_p_unsigned_int.getCPtr(numErrors), silent);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validate(SWIGTYPE_p_unsigned_int numWarnings, SWIGTYPE_p_unsigned_int numErrors) {
    bool ret = RDKFuncsPINVOKE.ChemicalReaction_validate__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(numWarnings), SWIGTYPE_p_unsigned_int.getCPtr(numErrors));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getImplicitPropertiesFlag() {
    bool ret = RDKFuncsPINVOKE.ChemicalReaction_getImplicitPropertiesFlag(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setImplicitPropertiesFlag(bool val) {
    RDKFuncsPINVOKE.ChemicalReaction_setImplicitPropertiesFlag(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChemicalReaction ReactionFromSmarts(string sma, bool useSmiles) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_ReactionFromSmarts__SWIG_0(sma, useSmiles);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction ReactionFromSmarts(string sma) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_ReactionFromSmarts__SWIG_1(sma);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction ReactionFromRxnBlock(string block) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_ReactionFromRxnBlock(block);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction ReactionFromRxnFile(string filename) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_ReactionFromRxnFile(filename);
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ReactionToSmarts(ChemicalReaction rxn) {
    string ret = RDKFuncsPINVOKE.ChemicalReaction_ReactionToSmarts(ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ReactionToRxnBlock(ChemicalReaction rxn) {
    string ret = RDKFuncsPINVOKE.ChemicalReaction_ReactionToRxnBlock(ChemicalReaction.getCPtr(rxn));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol ReduceProductToSideChains(ROMol product, bool addDummyAtoms) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_ReduceProductToSideChains__SWIG_0(ROMol.getCPtr(product), addDummyAtoms);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ROMol ReduceProductToSideChains(ROMol product) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_ReduceProductToSideChains__SWIG_1(ROMol.getCPtr(product));
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void compute2DCoordsForReaction(double spacing, bool updateProps, bool canonOrient, uint nFlipsPerSample, uint nSamples, int sampleSeed, bool permuteDeg4Nodes) {
    RDKFuncsPINVOKE.ChemicalReaction_compute2DCoordsForReaction(swigCPtr, spacing, updateProps, canonOrient, nFlipsPerSample, nSamples, sampleSeed, permuteDeg4Nodes);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Int_Vect ToBinary() {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.ChemicalReaction_ToBinary(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChemicalReaction RxnFromBinary(Int_Vect pkl) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_RxnFromBinary(Int_Vect.getCPtr(pkl));
    ChemicalReaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChemicalReaction(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Pair validateReaction(bool silent) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_validateReaction__SWIG_0(swigCPtr, silent);
    Int_Pair ret = (cPtr == global::System.IntPtr.Zero) ? null : new Int_Pair(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Pair validateReaction() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ChemicalReaction_validateReaction__SWIG_1(swigCPtr);
    Int_Pair ret = (cPtr == global::System.IntPtr.Zero) ? null : new Int_Pair(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validate() {
    bool ret = RDKFuncsPINVOKE.ChemicalReaction_validate__SWIG_2(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
