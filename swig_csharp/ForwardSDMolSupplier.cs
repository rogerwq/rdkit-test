//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class ForwardSDMolSupplier : MolSupplier {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ForwardSDMolSupplier(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.ForwardSDMolSupplier_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ForwardSDMolSupplier obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ForwardSDMolSupplier() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_ForwardSDMolSupplier(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ForwardSDMolSupplier() : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(SWIGTYPE_p_std__istream inStream, bool takeOwnership, bool sanitize, bool removeHs, bool strictParsing) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_1(SWIGTYPE_p_std__istream.getCPtr(inStream), takeOwnership, sanitize, removeHs, strictParsing), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(SWIGTYPE_p_std__istream inStream, bool takeOwnership, bool sanitize, bool removeHs) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_2(SWIGTYPE_p_std__istream.getCPtr(inStream), takeOwnership, sanitize, removeHs), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(SWIGTYPE_p_std__istream inStream, bool takeOwnership, bool sanitize) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_3(SWIGTYPE_p_std__istream.getCPtr(inStream), takeOwnership, sanitize), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(SWIGTYPE_p_std__istream inStream, bool takeOwnership) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_4(SWIGTYPE_p_std__istream.getCPtr(inStream), takeOwnership), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(SWIGTYPE_p_std__istream inStream) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_5(SWIGTYPE_p_std__istream.getCPtr(inStream)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void init() {
    RDKFuncsPINVOKE.ForwardSDMolSupplier_init(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void reset() {
    RDKFuncsPINVOKE.ForwardSDMolSupplier_reset(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ROMol next() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ForwardSDMolSupplier_next(swigCPtr);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool atEnd() {
    bool ret = RDKFuncsPINVOKE.ForwardSDMolSupplier_atEnd(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setProcessPropertyLists(bool val) {
    RDKFuncsPINVOKE.ForwardSDMolSupplier_setProcessPropertyLists(swigCPtr, val);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getProcessPropertyLists() {
    bool ret = RDKFuncsPINVOKE.ForwardSDMolSupplier_getProcessPropertyLists(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getEOFHitOnRead() {
    bool ret = RDKFuncsPINVOKE.ForwardSDMolSupplier_getEOFHitOnRead(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ForwardSDMolSupplier(gzstream strm, bool sanitize, bool removeHs, bool strictParsing) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_6(gzstream.getCPtr(strm), sanitize, removeHs, strictParsing), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(gzstream strm, bool sanitize, bool removeHs) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_7(gzstream.getCPtr(strm), sanitize, removeHs), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(gzstream strm, bool sanitize) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_8(gzstream.getCPtr(strm), sanitize), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardSDMolSupplier(gzstream strm) : this(RDKFuncsPINVOKE.new_ForwardSDMolSupplier__SWIG_9(gzstream.getCPtr(strm)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
