//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class FilterCatalog : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FilterCatalog(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FilterCatalog obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FilterCatalog() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_FilterCatalog(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FilterCatalog() : this(RDKFuncsPINVOKE.new_FilterCatalog__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalog(FilterCatalogParams.FilterCatalogs catalogs) : this(RDKFuncsPINVOKE.new_FilterCatalog__SWIG_1((int)catalogs), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalog(FilterCatalogParams arg0) : this(RDKFuncsPINVOKE.new_FilterCatalog__SWIG_2(FilterCatalogParams.getCPtr(arg0)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalog(FilterCatalog rhs) : this(RDKFuncsPINVOKE.new_FilterCatalog__SWIG_3(FilterCatalog.getCPtr(rhs)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterCatalog(string binStr) : this(RDKFuncsPINVOKE.new_FilterCatalog__SWIG_4(binStr), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string Serialize() {
    string ret = RDKFuncsPINVOKE.FilterCatalog_Serialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getNumEntries() {
    uint ret = RDKFuncsPINVOKE.FilterCatalog_getNumEntries(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol mol) {
    bool ret = RDKFuncsPINVOKE.FilterCatalog_hasMatch(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterMatch_Vect getFilterMatches(ROMol mol) {
    FilterMatch_Vect ret = new FilterMatch_Vect(RDKFuncsPINVOKE.FilterCatalog_getFilterMatches(swigCPtr, ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterCatalog(UChar_Vect data) : this(RDKFuncsPINVOKE.new_FilterCatalog__SWIG_5(UChar_Vect.getCPtr(data)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool canSerialize() {
    bool ret = RDKFuncsPINVOKE.FilterCatalog_canSerialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterCatalogEntry getFirstMatch(ROMol mol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.FilterCatalog_getFirstMatch(swigCPtr, ROMol.getCPtr(mol));
    FilterCatalogEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new FilterCatalogEntry(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterCatalogEntry_Vect getMatches(ROMol mol) {
    FilterCatalogEntry_Vect ret = new FilterCatalogEntry_Vect(RDKFuncsPINVOKE.FilterCatalog_getMatches(swigCPtr, ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addEntry(FilterCatalogEntry entry) {
    uint ret = RDKFuncsPINVOKE.FilterCatalog_addEntry(swigCPtr, FilterCatalogEntry.getCPtr(entry));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool removeEntry(FilterCatalogEntry entry) {
    bool ret = RDKFuncsPINVOKE.FilterCatalog_removeEntry(swigCPtr, FilterCatalogEntry.getCPtr(entry));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FilterCatalogEntry getEntry(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.FilterCatalog_getEntry(swigCPtr, idx);
    FilterCatalogEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new FilterCatalogEntry(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getIdxForEntry(FilterCatalogEntry entry) {
    uint ret = RDKFuncsPINVOKE.FilterCatalog_getIdxForEntry(swigCPtr, FilterCatalogEntry.getCPtr(entry));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
