//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class TDTWriter : MolWriter {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TDTWriter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.TDTWriter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TDTWriter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TDTWriter() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_TDTWriter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TDTWriter(string fileName) : this(RDKFuncsPINVOKE.new_TDTWriter__SWIG_0(fileName), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public TDTWriter(SWIGTYPE_p_std__ostream outStream, bool takeOwnership) : this(RDKFuncsPINVOKE.new_TDTWriter__SWIG_1(SWIGTYPE_p_std__ostream.getCPtr(outStream), takeOwnership), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public TDTWriter(SWIGTYPE_p_std__ostream outStream) : this(RDKFuncsPINVOKE.new_TDTWriter__SWIG_2(SWIGTYPE_p_std__ostream.getCPtr(outStream)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void setProps(Str_Vect propNames) {
    RDKFuncsPINVOKE.TDTWriter_setProps(swigCPtr, Str_Vect.getCPtr(propNames));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void write(ROMol mol, int confId) {
    RDKFuncsPINVOKE.TDTWriter_write__SWIG_0(swigCPtr, ROMol.getCPtr(mol), confId);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void write(ROMol mol) {
    RDKFuncsPINVOKE.TDTWriter_write__SWIG_1(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void flush() {
    RDKFuncsPINVOKE.TDTWriter_flush(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void close() {
    RDKFuncsPINVOKE.TDTWriter_close(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint numMols() {
    uint ret = RDKFuncsPINVOKE.TDTWriter_numMols(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWrite2D(bool state) {
    RDKFuncsPINVOKE.TDTWriter_setWrite2D__SWIG_0(swigCPtr, state);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setWrite2D() {
    RDKFuncsPINVOKE.TDTWriter_setWrite2D__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getWrite2D() {
    bool ret = RDKFuncsPINVOKE.TDTWriter_getWrite2D(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setWriteNames(bool state) {
    RDKFuncsPINVOKE.TDTWriter_setWriteNames__SWIG_0(swigCPtr, state);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setWriteNames() {
    RDKFuncsPINVOKE.TDTWriter_setWriteNames__SWIG_1(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getWriteNames() {
    bool ret = RDKFuncsPINVOKE.TDTWriter_getWriteNames(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNumDigits(uint numDigits) {
    RDKFuncsPINVOKE.TDTWriter_setNumDigits(swigCPtr, numDigits);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumDigits() {
    uint ret = RDKFuncsPINVOKE.TDTWriter_getNumDigits(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
