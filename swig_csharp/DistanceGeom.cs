//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class DistanceGeom : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DistanceGeom(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DistanceGeom obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DistanceGeom() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_DistanceGeom(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs, bool useBasicKnowledge, bool verbose, double basinThresh) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_0(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs, useBasicKnowledge, verbose, basinThresh);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs, bool useBasicKnowledge, bool verbose) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_1(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs, useBasicKnowledge, verbose);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs, bool useBasicKnowledge) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_2(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs, useBasicKnowledge);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_3(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_4(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_5(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap, double optimizerForceTol) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_6(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, Int_Point3D_Map coordMap) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_7(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, Int_Point3D_Map.getCPtr(coordMap));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_8(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_9(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_10(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_11(ROMol.getCPtr(mol), maxIterations, seed, clearConfs, useRandomCoords);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed, bool clearConfs) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_12(ROMol.getCPtr(mol), maxIterations, seed, clearConfs);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations, int seed) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_13(ROMol.getCPtr(mol), maxIterations, seed);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, uint maxIterations) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_14(ROMol.getCPtr(mol), maxIterations);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_15(ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int EmbedMolecule(ROMol mol, EmbedParameters arg1) {
    int ret = RDKFuncsPINVOKE.DistanceGeom_EmbedMolecule__SWIG_16(ROMol.getCPtr(mol), EmbedParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs, bool useBasicKnowledge, bool verbose, double basinThresh) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_0(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs, useBasicKnowledge, verbose, basinThresh), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs, bool useBasicKnowledge, bool verbose) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_1(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs, useBasicKnowledge, verbose), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs, bool useBasicKnowledge) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_2(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs, useBasicKnowledge), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality, bool useExpTorsionAnglePrefs) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_3(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality, useExpTorsionAnglePrefs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures, bool enforceChirality) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_4(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures, enforceChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol, bool ignoreSmoothingFailures) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_5(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol, ignoreSmoothingFailures), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap, double optimizerForceTol) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_6(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap), optimizerForceTol), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh, Int_Point3D_Map coordMap) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_7(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh, Int_Point3D_Map.getCPtr(coordMap)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail, double pruneRmsThresh) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_8(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail, pruneRmsThresh), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig, uint numZeroFail) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_9(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig, numZeroFail), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult, bool randNegEig) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_10(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult, randNegEig), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords, double boxSizeMult) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_11(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords, boxSizeMult), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs, bool useRandomCoords) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_12(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs, useRandomCoords), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed, bool clearConfs) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_13(ROMol.getCPtr(mol), numConfs, maxIterations, seed, clearConfs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations, int seed) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_14(ROMol.getCPtr(mol), numConfs, maxIterations, seed), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, uint maxIterations) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_15(ROMol.getCPtr(mol), numConfs, maxIterations), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_16(ROMol.getCPtr(mol), numConfs), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_17(ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Int_Vect EmbedMultipleConfs(ROMol mol, uint numConfs, EmbedParameters arg2) {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.DistanceGeom_EmbedMultipleConfs__SWIG_18(ROMol.getCPtr(mol), numConfs, EmbedParameters.getCPtr(arg2)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetTopolBounds(ROMol mol, BoundsMatrix mmat, bool set15bounds, bool scaleVDW) {
    RDKFuncsPINVOKE.DistanceGeom_SetTopolBounds__SWIG_0(ROMol.getCPtr(mol), BoundsMatrix.getCPtr(mmat), set15bounds, scaleVDW);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetTopolBounds(ROMol mol, BoundsMatrix mmat, bool set15bounds) {
    RDKFuncsPINVOKE.DistanceGeom_SetTopolBounds__SWIG_1(ROMol.getCPtr(mol), BoundsMatrix.getCPtr(mmat), set15bounds);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetTopolBounds(ROMol mol, BoundsMatrix mmat) {
    RDKFuncsPINVOKE.DistanceGeom_SetTopolBounds__SWIG_2(ROMol.getCPtr(mol), BoundsMatrix.getCPtr(mmat));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ForceField ConstructForceField(BoundsMatrix mmat, Point_Vect positions, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t csets, double weightChiral, double weightFourthDim, SWIGTYPE_p_std__mapT_std__pairT_boost__int32_t_int_t_double_std__lessT_std__pairT_boost__int32_t_int_t_t_t extraWeights, double basinSizeTol) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DistanceGeom_ConstructForceField__SWIG_0(BoundsMatrix.getCPtr(mmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t.getCPtr(csets), weightChiral, weightFourthDim, SWIGTYPE_p_std__mapT_std__pairT_boost__int32_t_int_t_double_std__lessT_std__pairT_boost__int32_t_int_t_t_t.getCPtr(extraWeights), basinSizeTol);
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField ConstructForceField(BoundsMatrix mmat, Point_Vect positions, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t csets, double weightChiral, double weightFourthDim, SWIGTYPE_p_std__mapT_std__pairT_boost__int32_t_int_t_double_std__lessT_std__pairT_boost__int32_t_int_t_t_t extraWeights) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DistanceGeom_ConstructForceField__SWIG_1(BoundsMatrix.getCPtr(mmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t.getCPtr(csets), weightChiral, weightFourthDim, SWIGTYPE_p_std__mapT_std__pairT_boost__int32_t_int_t_double_std__lessT_std__pairT_boost__int32_t_int_t_t_t.getCPtr(extraWeights));
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField ConstructForceField(BoundsMatrix mmat, Point_Vect positions, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t csets, double weightChiral, double weightFourthDim) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DistanceGeom_ConstructForceField__SWIG_2(BoundsMatrix.getCPtr(mmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t.getCPtr(csets), weightChiral, weightFourthDim);
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField ConstructForceField(BoundsMatrix mmat, Point_Vect positions, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t csets, double weightChiral) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DistanceGeom_ConstructForceField__SWIG_3(BoundsMatrix.getCPtr(mmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t.getCPtr(csets), weightChiral);
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ForceField ConstructForceField(BoundsMatrix mmat, Point_Vect positions, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t csets) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.DistanceGeom_ConstructForceField__SWIG_4(BoundsMatrix.getCPtr(mmat), Point_Vect.getCPtr(positions), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_DistGeom__ChiralSet_t_t.getCPtr(csets));
    ForceField ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceField(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeInitialCoords(DoubleSymmMatrix distmat, Point3D_Vect positions, bool randNegEig, uint numZeroFail) {
    bool ret = RDKFuncsPINVOKE.DistanceGeom_ComputeInitialCoords__SWIG_0(DoubleSymmMatrix.getCPtr(distmat), Point3D_Vect.getCPtr(positions), randNegEig, numZeroFail);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeInitialCoords(DoubleSymmMatrix distmat, Point3D_Vect positions, bool randNegEig) {
    bool ret = RDKFuncsPINVOKE.DistanceGeom_ComputeInitialCoords__SWIG_1(DoubleSymmMatrix.getCPtr(distmat), Point3D_Vect.getCPtr(positions), randNegEig);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ComputeInitialCoords(DoubleSymmMatrix distmat, Point3D_Vect positions) {
    bool ret = RDKFuncsPINVOKE.DistanceGeom_ComputeInitialCoords__SWIG_2(DoubleSymmMatrix.getCPtr(distmat), Point3D_Vect.getCPtr(positions));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DistanceGeom() : this(RDKFuncsPINVOKE.new_DistanceGeom(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
