//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class ExplicitBitVect : BitVect {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ExplicitBitVect(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.ExplicitBitVect_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExplicitBitVect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ExplicitBitVect() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_ExplicitBitVect(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ExplicitBitVect() : this(RDKFuncsPINVOKE.new_ExplicitBitVect__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExplicitBitVect(uint size) : this(RDKFuncsPINVOKE.new_ExplicitBitVect__SWIG_1(size), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExplicitBitVect(ExplicitBitVect other) : this(RDKFuncsPINVOKE.new_ExplicitBitVect__SWIG_2(ExplicitBitVect.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExplicitBitVect(string arg0) : this(RDKFuncsPINVOKE.new_ExplicitBitVect__SWIG_3(arg0), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExplicitBitVect(string arg0, uint arg1) : this(RDKFuncsPINVOKE.new_ExplicitBitVect__SWIG_4(arg0, arg1), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExplicitBitVect(SWIGTYPE_p_boost__dynamic_bitsetT_t bits) : this(RDKFuncsPINVOKE.new_ExplicitBitVect__SWIG_5(SWIGTYPE_p_boost__dynamic_bitsetT_t.getCPtr(bits)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool setBit(uint which) {
    bool ret = RDKFuncsPINVOKE.ExplicitBitVect_setBit(swigCPtr, which);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool unsetBit(uint which) {
    bool ret = RDKFuncsPINVOKE.ExplicitBitVect_unsetBit(swigCPtr, which);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getBit(uint which) {
    bool ret = RDKFuncsPINVOKE.ExplicitBitVect_getBit(swigCPtr, which);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint getNumBits() {
    uint ret = RDKFuncsPINVOKE.ExplicitBitVect_getNumBits(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint getNumOnBits() {
    uint ret = RDKFuncsPINVOKE.ExplicitBitVect_getNumOnBits(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint getNumOffBits() {
    uint ret = RDKFuncsPINVOKE.ExplicitBitVect_getNumOffBits(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void clearBits() {
    RDKFuncsPINVOKE.ExplicitBitVect_clearBits(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string toString() {
    string ret = RDKFuncsPINVOKE.ExplicitBitVect_toString(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Vect getOnBits() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.ExplicitBitVect_getOnBits(swigCPtr);
    Int_Vect ret = (cPtr == global::System.IntPtr.Zero) ? null : new Int_Vect(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
