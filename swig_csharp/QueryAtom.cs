//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class QueryAtom : Atom {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal QueryAtom(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.QueryAtom_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(QueryAtom obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~QueryAtom() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_QueryAtom(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public QueryAtom() : this(RDKFuncsPINVOKE.new_QueryAtom__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public QueryAtom(int num) : this(RDKFuncsPINVOKE.new_QueryAtom__SWIG_1(num), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public QueryAtom(Atom other) : this(RDKFuncsPINVOKE.new_QueryAtom__SWIG_2(Atom.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public QueryAtom(QueryAtom other) : this(RDKFuncsPINVOKE.new_QueryAtom__SWIG_3(QueryAtom.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Atom copy() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.QueryAtom_copy(swigCPtr);
    Atom ret = (cPtr == global::System.IntPtr.Zero) ? null : new Atom(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool hasQuery() {
    bool ret = RDKFuncsPINVOKE.QueryAtom_hasQuery(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what) {
    RDKFuncsPINVOKE.QueryAtom_setQuery(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t getQuery() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.QueryAtom_getQuery(swigCPtr);
    SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what, CompositeQueryType how, bool maintainOrder) {
    RDKFuncsPINVOKE.QueryAtom_expandQuery__SWIG_0(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what), (int)how, maintainOrder);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what, CompositeQueryType how) {
    RDKFuncsPINVOKE.QueryAtom_expandQuery__SWIG_1(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what), (int)how);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void expandQuery(SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t what) {
    RDKFuncsPINVOKE.QueryAtom_expandQuery__SWIG_2(swigCPtr, SWIGTYPE_p_Queries__QueryT_int_RDKit__Atom_const_p_true_t.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool QueryMatch(QueryAtom what) {
    bool ret = RDKFuncsPINVOKE.QueryAtom_QueryMatch(swigCPtr, QueryAtom.getCPtr(what));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
